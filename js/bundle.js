(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = function() {
    var config = {
    apiKey: "AIzaSyBK3gzwOREIM9NCt8dizMo2He8xp2lm_Bc",
    authDomain: "radoxpage.firebaseapp.com",
    projectId: "radoxpage",
    };

    return config;
}

},{}],2:[function(require,module,exports){
// Now this db.js is specialized to upload copy machine
// How it works = save it to the database and add one to the db_counter

const firebase = require("firebase/app");
// Required for side-effects
require("firebase/firestore");
const config = require("./config.js")();

firebase.initializeApp(config);
// Initialize Cloud Firestore through Firebase
var db = firebase.firestore();
// Disable deprecated features
db.settings({
  timestampsInSnapshots: true
});

const collection = "copyPlaceholder_db" // The name of the db collection
const counter_id = "copy_counter";

var set = function(doc_name, msg_str, callback){ // Callback: added document ID
    db.collection(collection).doc(doc_name).set({
        msg: msg_str
    })
    .then(function() {
        callback();
    })
    .catch(function(error) {
        console.error("Error setting document: ", doc_name, error);
    });
}

var add = function(msg_str, callback) { // Count here is the temp placeholder to handle the doc_id
    get(counter_id, function(count) {
        set(count.toString(), msg_str, function() {
            count += 1;
            set(counter_id, count, function() {
                count-=1;
                callback(count);
            });
        });
    });
}

var getOptions = {
    source: 'server'
};

var del = function(copy_id) {
    db.collection(collection).doc(copy_id).delete().then(function() {
        console.log("Document successfully deleted!");
    }).catch(function(error) {
        console.error("Error removing document: ", error);
    });

}

var get = function(copy_id, callback) {
    var docRef = db.collection(collection).doc(copy_id);

    docRef.get(getOptions).then(function(doc) {
        if (doc.exists) {
            callback(doc.data()["msg"]);
            del(copy_id);
        } else {
            // doc.data() will be undefined in this case
            callback("No such document!");
            console.log("No such document!");
        }
    }).catch(function(error) {
        console.log("Error getting document:", error);
    });
}

module.exports = function() {
    return {add, get};
}

},{"./config.js":1,"firebase/app":10,"firebase/firestore":11}],3:[function(require,module,exports){
(function (global){
// cd js; watchify main.js -o bundle.js -v

"use strict";
global.$ = require("jquery");
global.jQuery = $;
var db = require("./db.js")();
// require("../include/jGravity.js");
var onclickcopy_input = false; // Toggle click_copy to be a button or not
var copy_text_global = "";

function checkKeyup(id_str, func, range='str') { // 13 is to detect Enter! // the func has one argument of the typed value
    $(id_str).on('keyup input', function (e) {
        // alert(e.keyCode || e.which);
        // if (range=='num') {
        //     if (e.keyCode>=48&&e.keyCode<=57) {
        //         func($(this).val());
        //     }
        // } else {
        //     func($(this).val());
        // }
        if (e.keyCode != 13) {
            func($(this).val());
        }
    });
} // To check everytime the key is up on specific element

function connectMouseDown (target, callback) {
    if (onclickcopy_input==false) {
        $(target).val(" Click here");
        $(target).css("cursor", "pointer");
        $(target).on('mousedown', callback);
        onclickcopy_input = true;
    }
}

// Here comes the real deal of the program
const copyID_length = 10;
$(document).ready(function() {
    checkKeyup("#copy_input", function(val) {
        db.get(val, function(msg_str) {
            $("#copy_textarea").val(msg_str);
        });
    }, 'num');
    checkKeyup("#copy_textarea", function(val) {
        copy_text_global = val;
        if (val != '') {
            connectMouseDown("#copy_input", function () { // After it is click
                $("#copy_input").css("cursor", "auto");
                $("#copy_input").unbind();
                db.add(copy_text_global, function(copy_id) {
                    $("#copy_input").val(copy_id);
                    $("#copy_input").attr("readonly","readonly");
                })
            })
        }
    });
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./db.js":2,"jquery":12}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var util = require('@firebase/util');
var component = require('@firebase/component');
var logger$1 = require('@firebase/logger');

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
var ERRORS = (_a = {},
    _a["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
        'call Firebase App.initializeApp()',
    _a["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
    _a["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
    _a["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
    _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
        'Firebase App instance.',
    _a["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
    _a);
var ERROR_FACTORY = new util.ErrorFactory('app', 'Firebase', ERRORS);

var name$1 = "@firebase/app";
var version = "0.6.1";

var name$2 = "@firebase/analytics";

var name$3 = "@firebase/auth";

var name$4 = "@firebase/database";

var name$5 = "@firebase/functions";

var name$6 = "@firebase/installations";

var name$7 = "@firebase/messaging";

var name$8 = "@firebase/performance";

var name$9 = "@firebase/remote-config";

var name$a = "@firebase/storage";

var name$b = "@firebase/firestore";

var name$c = "firebase-wrapper";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a$1;
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_a$1 = {},
    _a$1[name$1] = 'fire-core',
    _a$1[name$2] = 'fire-analytics',
    _a$1[name$3] = 'fire-auth',
    _a$1[name$4] = 'fire-rtdb',
    _a$1[name$5] = 'fire-fn',
    _a$1[name$6] = 'fire-iid',
    _a$1[name$7] = 'fire-fcm',
    _a$1[name$8] = 'fire-perf',
    _a$1[name$9] = 'fire-rc',
    _a$1[name$a] = 'fire-gcs',
    _a$1[name$b] = 'fire-fst',
    _a$1['fire-js'] = 'fire-js',
    _a$1[name$c] = 'fire-js-all',
    _a$1);

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var logger = new logger$1.Logger('@firebase/app');

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
var FirebaseAppImpl = /** @class */ (function () {
    function FirebaseAppImpl(options, config, firebase_) {
        var e_1, _a;
        var _this = this;
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ =
            config.automaticDataCollectionEnabled || false;
        this.options_ = util.deepCopy(options);
        this.container = new component.ComponentContainer(config.name);
        // add itself to container
        this._addComponent(new component.Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
        try {
            // populate ComponentContainer with existing components
            for (var _b = tslib.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var component$1 = _c.value;
                this._addComponent(component$1);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
        get: function () {
            this.checkDestroyed_();
            return this.automaticDataCollectionEnabled_;
        },
        set: function (val) {
            this.checkDestroyed_();
            this.automaticDataCollectionEnabled_ = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
        get: function () {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
        get: function () {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseAppImpl.prototype.delete = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.checkDestroyed_();
            resolve();
        })
            .then(function () {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
        })
            .then(function () {
            _this.isDeleted_ = true;
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage and functions are the only ones that are leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        this.checkDestroyed_();
        // getImmediate will always succeed because _getService is only called for registered components.
        return this.container.getProvider(name).getImmediate({
            identifier: instanceIdentifier
        });
    };
    /**
     * Remove a service instance from the cache, so we will create a new instance for this service
     * when people try to get this service again.
     *
     * NOTE: currently only firestore is using this functionality to support firestore shutdown.
     *
     * @param name The service name
     * @param instanceIdentifier instance identifier in case multiple instances are allowed
     * @internal
     */
    FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.container.getProvider(name).clearInstance(instanceIdentifier);
    };
    /**
     * @param component the component being added to this app's container
     */
    FirebaseAppImpl.prototype._addComponent = function (component) {
        try {
            this.container.addComponent(component);
        }
        catch (e) {
            logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
        }
    };
    FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
        this.container.addOrOverwriteComponent(component);
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
        if (this.isDeleted_) {
            throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
        }
    };
    return FirebaseAppImpl;
}());
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    FirebaseAppImpl.prototype.delete ||
    console.log('dc');

var version$1 = "7.13.2";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */
function createFirebaseNamespaceCore(firebaseAppImpl) {
    var apps = {};
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var components = new Map();
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp: initializeApp,
        // @ts-ignore
        app: app,
        registerVersion: registerVersion,
        setLogLevel: logger$1.setLogLevel,
        onLog: onLog,
        // @ts-ignore
        apps: null,
        SDK_VERSION: version$1,
        INTERNAL: {
            registerComponent: registerComponent,
            removeApp: removeApp,
            components: components,
            useAsService: useAsService
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace['default'] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        delete apps[name];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME;
        if (!util.contains(apps, name)) {
            throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
        }
        return apps[name];
    }
    // @ts-ignore
    app['App'] = firebaseAppImpl;
    function initializeApp(options, rawConfig) {
        if (rawConfig === void 0) { rawConfig = {}; }
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            var name_1 = rawConfig;
            rawConfig = { name: name_1 };
        }
        var config = rawConfig;
        if (config.name === undefined) {
            config.name = DEFAULT_ENTRY_NAME;
        }
        var name = config.name;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                appName: String(name)
            });
        }
        if (util.contains(apps, name)) {
            throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
        }
        var app = new firebaseAppImpl(options, config, namespace);
        apps[name] = app;
        return app;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map(function (name) { return apps[name]; });
    }
    function registerComponent(component) {
        var e_1, _a;
        var componentName = component.name;
        if (components.has(componentName)) {
            logger.debug("There were multiple attempts to register component " + componentName + ".");
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        components.set(componentName, component);
        // create service namespace for public components
        if (component.type === "PUBLIC" /* PUBLIC */) {
            // The Service namespace is an accessor function ...
            var serviceNamespace = function (appArg) {
                if (appArg === void 0) { appArg = app(); }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof appArg[componentName] !== 'function') {
                    // Invalid argument.
                    // This happens in the following case: firebase.storage('gs:/')
                    throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                        appName: componentName
                    });
                }
                // Forward service instance lookup to the FirebaseApp.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return appArg[componentName]();
            };
            // ... and a container for service-level properties.
            if (component.serviceProps !== undefined) {
                util.deepExtend(serviceNamespace, component.serviceProps);
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            namespace[componentName] = serviceNamespace;
            // Patch the FirebaseAppImpl prototype
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            firebaseAppImpl.prototype[componentName] =
                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                // option added to the no-explicit-any rule when ESlint releases it.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var serviceFxn = this._getService.bind(this, componentName);
                    return serviceFxn.apply(this, component.multipleInstances ? args : []);
                };
        }
        try {
            // add the component to existing app instances
            for (var _b = tslib.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var appName = _c.value;
                apps[appName]._addComponent(component);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return component.type === "PUBLIC" /* PUBLIC */
            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName]
            : null;
    }
    function registerVersion(libraryKeyOrName, version, variant) {
        var _a;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
        if (variant) {
            library += "-" + variant;
        }
        var libraryMismatch = library.match(/\s|\//);
        var versionMismatch = version.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            var warning = [
                "Unable to register library \"" + library + "\" with version \"" + version + "\":"
            ];
            if (libraryMismatch) {
                warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
            }
            if (libraryMismatch && versionMismatch) {
                warning.push('and');
            }
            if (versionMismatch) {
                warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
            }
            logger.warn(warning.join(' '));
            return;
        }
        registerComponent(new component.Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
    }
    function onLog(logCallback, options) {
        if (logCallback !== null && typeof logCallback !== 'function') {
            throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                appName: name
            });
        }
        logger$1.setUserLogHandler(logCallback, options);
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
        }
        var useService = name;
        return useService;
    }
    return namespace;
}

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */
function createFirebaseNamespace() {
    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = tslib.__assign(tslib.__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
        extendNamespace: extendNamespace,
        createSubscribe: util.createSubscribe,
        ErrorFactory: util.ErrorFactory,
        deepExtend: util.deepExtend });
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */
    function extendNamespace(props) {
        util.deepExtend(namespace, props);
    }
    return namespace;
}
var firebase = createFirebaseNamespace();

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PlatformLoggerService = /** @class */ (function () {
    function PlatformLoggerService(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    PlatformLoggerService.prototype.getPlatformInfoString = function () {
        var providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers
            .map(function (provider) {
            if (isVersionServiceProvider(provider)) {
                var service = provider.getImmediate();
                return service.library + "/" + service.version;
            }
            else {
                return null;
            }
        })
            .filter(function (logString) { return logString; })
            .join(' ');
    };
    return PlatformLoggerService;
}());
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */
function isVersionServiceProvider(provider) {
    var component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
}

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(firebase, variant) {
    firebase.INTERNAL.registerComponent(new component.Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
    // Register `app` package.
    firebase.registerVersion(name$1, version, variant);
    // Register platform SDK identifier (no version).
    firebase.registerVersion('fire-js', '');
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Firebase Lite detection test
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if (util.isBrowser() && self.firebase !== undefined) {
    logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
    // eslint-disable-next-line
    var sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
        logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
    }
}
var initializeApp = firebase.initializeApp;
// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
// the no-explicit-any rule when ESlint releases it.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
firebase.initializeApp = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // Environment check before initializing app
    // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
    // in @firebase/logger
    if (util.isNode()) {
        logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
    }
    return initializeApp.apply(undefined, args);
};
var firebase$1 = firebase;
registerCoreComponents(firebase$1);

exports.default = firebase$1;
exports.firebase = firebase$1;


},{"@firebase/component":5,"@firebase/logger":7,"@firebase/util":8,"tslib":13}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var util = require('@firebase/util');

/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
var Component = /** @class */ (function () {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */
    function Component(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */
        this.serviceProps = {};
        this.instantiationMode = "LAZY" /* LAZY */;
    }
    Component.prototype.setInstantiationMode = function (mode) {
        this.instantiationMode = mode;
        return this;
    };
    Component.prototype.setMultipleInstances = function (multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    };
    Component.prototype.setServiceProps = function (props) {
        this.serviceProps = props;
        return this;
    };
    return Component;
}());

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DEFAULT_ENTRY_NAME = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */
var Provider = /** @class */ (function () {
    function Provider(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */
    Provider.prototype.get = function (identifier) {
        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            var deferred = new util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            // If the service instance is available, resolve the promise with it immediately
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (instance) {
                    deferred.resolve(instance);
                }
            }
            catch (e) {
                // when the instance factory throws an exception during get(), it should not cause
                // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    };
    Provider.prototype.getImmediate = function (options) {
        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
        // if multipleInstances is not supported, use the default name
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        try {
            var instance = this.getOrInitializeService(normalizedIdentifier);
            if (!instance) {
                if (optional) {
                    return null;
                }
                throw Error("Service " + this.name + " is not available");
            }
            return instance;
        }
        catch (e) {
            if (optional) {
                return null;
            }
            else {
                throw e;
            }
        }
    };
    Provider.prototype.getComponent = function () {
        return this.component;
    };
    Provider.prototype.setComponent = function (component) {
        var e_1, _a;
        if (component.name !== this.name) {
            throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        }
        if (this.component) {
            throw Error("Component for " + this.name + " has already been provided");
        }
        this.component = component;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) {
            try {
                this.getOrInitializeService(DEFAULT_ENTRY_NAME);
            }
            catch (e) {
                // when the instance factory for an eager Component throws an exception during the eager
                // initialization, it should not cause a fatal error.
                // TODO: Investigate if we need to make it configurable, because some component may want to cause
                // a fatal error in this case?
            }
        }
        try {
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    instanceDeferred.resolve(instance);
                }
                catch (e) {
                    // when the instance factory throws an exception, it should not cause
                    // a fatal error. We just leave the promise unresolved.
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Provider.prototype.clearInstance = function (identifier) {
        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
        this.instancesDeferred.delete(identifier);
        this.instances.delete(identifier);
    };
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    Provider.prototype.delete = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var services;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        services = Array.from(this.instances.values());
                        return [4 /*yield*/, Promise.all(services
                                .filter(function (service) { return 'INTERNAL' in service; })
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                .map(function (service) { return service.INTERNAL.delete(); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Provider.prototype.isComponentSet = function () {
        return this.component != null;
    };
    Provider.prototype.getOrInitializeService = function (identifier) {
        var instance = this.instances.get(identifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
            this.instances.set(identifier, instance);
        }
        return instance || null;
    };
    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
        if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        }
        else {
            return identifier; // assume multiple instances are supported before the component is provided.
        }
    };
    return Provider;
}());
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */;
}

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */
var ComponentContainer = /** @class */ (function () {
    function ComponentContainer(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */
    ComponentContainer.prototype.addComponent = function (component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            throw new Error("Component " + component.name + " has already been registered with " + this.name);
        }
        provider.setComponent(component);
    };
    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            // delete the existing provider from the container, so we can register the new component
            this.providers.delete(component.name);
        }
        this.addComponent(component);
    };
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */
    ComponentContainer.prototype.getProvider = function (name) {
        if (this.providers.has(name)) {
            return this.providers.get(name);
        }
        // create a Provider for a service that hasn't registered with Firebase
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    };
    ComponentContainer.prototype.getProviders = function () {
        return Array.from(this.providers.values());
    };
    return ComponentContainer;
}());

exports.Component = Component;
exports.ComponentContainer = ComponentContainer;
exports.Provider = Provider;


},{"@firebase/util":8,"tslib":13}],6:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var t = _interopDefault(require('@firebase/app'));
var tslib = require('tslib');
var logger = require('@firebase/logger');
var util = require('@firebase/util');
var component = require('@firebase/component');
var webchannelWrapper = require('@firebase/webchannel-wrapper');

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** The semver (www.semver.org) version of the SDK. */ var _ = t.SDK_VERSION, I = /** @class */ function() {
    function t(t) {
        this.uid = t;
    }
    return t.prototype.t = function() {
        return null != this.uid;
    }, 
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */
    t.prototype.i = function() {
        return this.t() ? "uid:" + this.uid : "anonymous-user";
    }, t.prototype.isEqual = function(t) {
        return t.uid === this.uid;
    }, 
    /** A user with a null UID. */
    t.UNAUTHENTICATED = new t(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    t.u = new t("google-credentials-uid"), t.s = new t("first-party-uid"), t;
}(), T = {
    // Causes are copied from:
    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
    /** Not an error; returned on success. */
    OK: "ok",
    /** The operation was cancelled (typically by the caller). */
    CANCELLED: "cancelled",
    /** Unknown error or an error from a different error domain. */
    UNKNOWN: "unknown",
    /**
     * Client specified an invalid argument. Note that this differs from
     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
     * problematic regardless of the state of the system (e.g., a malformed file
     * name).
     */
    INVALID_ARGUMENT: "invalid-argument",
    /**
     * Deadline expired before operation could complete. For operations that
     * change the state of the system, this error may be returned even if the
     * operation has completed successfully. For example, a successful response
     * from a server could have been delayed long enough for the deadline to
     * expire.
     */
    DEADLINE_EXCEEDED: "deadline-exceeded",
    /** Some requested entity (e.g., file or directory) was not found. */
    NOT_FOUND: "not-found",
    /**
     * Some entity that we attempted to create (e.g., file or directory) already
     * exists.
     */
    ALREADY_EXISTS: "already-exists",
    /**
     * The caller does not have permission to execute the specified operation.
     * PERMISSION_DENIED must not be used for rejections caused by exhausting
     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
     * PERMISSION_DENIED must not be used if the caller can not be identified
     * (use UNAUTHENTICATED instead for those errors).
     */
    PERMISSION_DENIED: "permission-denied",
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */
    UNAUTHENTICATED: "unauthenticated",
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
     * entire file system is out of space.
     */
    RESOURCE_EXHAUSTED: "resource-exhausted",
    /**
     * Operation was rejected because the system is not in a state required for
     * the operation's execution. For example, directory to be deleted may be
     * non-empty, an rmdir operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     */
    FAILED_PRECONDITION: "failed-precondition",
    /**
     * The operation was aborted, typically due to a concurrency issue like
     * sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */
    ABORTED: "aborted",
    /**
     * Operation was attempted past the valid range. E.g., seeking or reading
     * past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
     * if the system state changes. For example, a 32-bit file system will
     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
     * an offset past the current file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
     * when it applies so that callers who are iterating through a space can
     * easily look for an OUT_OF_RANGE error to detect when they are done.
     */
    OUT_OF_RANGE: "out-of-range",
    /** Operation is not implemented or not supported/enabled in this service. */
    UNIMPLEMENTED: "unimplemented",
    /**
     * Internal errors. Means some invariants expected by underlying System has
     * been broken. If you see one of these errors, Something is very broken.
     */
    INTERNAL: "internal",
    /**
     * The service is currently unavailable. This is a most likely a transient
     * condition and may be corrected by retrying with a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */
    UNAVAILABLE: "unavailable",
    /** Unrecoverable data loss or corruption. */
    DATA_LOSS: "data-loss"
}, E = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this, i) || this;
        return e.code = n, e.message = i, e.name = "FirebaseError", 
        // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        e.toString = function() {
            return e.name + ": [code=" + e.code + "]: " + e.message;
        }, e;
    }
    return tslib.__extends(i, t), i;
}(Error), D = function(t, n) {
    this.user = n, this.type = "OAuth", this.o = {}, 
    // Set the headers using Object Literal notation to avoid minification
    this.o.Authorization = "Bearer " + t;
}, R = /** @class */ function() {
    function t() {
        /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */
        this.h = null;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(null);
    }, t.prototype.l = function() {}, t.prototype.v = function(t) {
        Wn(!this.h, "Can only call setChangeListener() once."), this.h = t, 
        // Fire with initial user.
        t(I.UNAUTHENTICATED);
    }, t.prototype.m = function() {
        Wn(null !== this.h, "removeChangeListener() when no listener registered"), this.h = null;
    }, t;
}(), S = /** @class */ function() {
    function t(t) {
        var n = this;
        /**
         * The auth token listener registered with FirebaseApp, retained here so we
         * can unregister it.
         */        this.p = null, 
        /** Tracks the current User. */
        this.currentUser = I.UNAUTHENTICATED, this.g = !1, 
        /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */
        this._ = 0, 
        /** The listener registered with setChangeListener(). */
        this.h = null, this.forceRefresh = !1, this.p = function() {
            n._++, n.currentUser = n.I(), n.g = !0, n.h && n.h(n.currentUser);
        }, this._ = 0, this.auth = t.getImmediate({
            optional: !0
        }), this.auth ? this.auth.addAuthTokenListener(this.p) : (
        // if auth is not available, invoke tokenListener once with null token
        this.p(null), t.get().then((function(t) {
            n.auth = t, n.p && 
            // tokenListener can be removed by removeChangeListener()
            n.auth.addAuthTokenListener(n.p);
        }), (function() {
            /* this.authProvider.get() never rejects */})));
    }
    return t.prototype.getToken = function() {
        var t = this;
        Wn(null != this.p, "getToken cannot be called after listener removed.");
        // Take note of the current value of the tokenCounter so that this method
        // can fail (with an ABORTED error) if there is a token change while the
        // request is outstanding.
        var n = this._, i = this.forceRefresh;
        return this.forceRefresh = !1, this.auth ? this.auth.getToken(i).then((function(i) {
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            if (t._ !== n) throw new E(T.ABORTED, "getToken aborted due to token change.");
            return i ? (Wn("string" == typeof i.accessToken, "Invalid tokenData returned from getToken():" + i), 
            new D(i.accessToken, t.currentUser)) : null;
        })) : Promise.resolve(null);
    }, t.prototype.l = function() {
        this.forceRefresh = !0;
    }, t.prototype.v = function(t) {
        Wn(!this.h, "Can only call setChangeListener() once."), this.h = t, 
        // Fire the initial event
        this.g && t(this.currentUser);
    }, t.prototype.m = function() {
        Wn(null != this.p, "removeChangeListener() called twice"), Wn(null !== this.h, "removeChangeListener() called when no listener registered"), 
        this.auth && this.auth.removeAuthTokenListener(this.p), this.p = null, this.h = null;
    }, 
    // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.
    t.prototype.I = function() {
        var t = this.auth && this.auth.getUid();
        return Wn(null === t || "string" == typeof t, "Received invalid UID: " + t), new I(t);
    }, t;
}(), A = /** @class */ function() {
    function t(t, n) {
        this.T = t, this.D = n, this.type = "FirstParty", this.user = I.s;
    }
    return Object.defineProperty(t.prototype, "o", {
        get: function() {
            var t = {
                "X-Goog-AuthUser": this.D
            }, n = this.T.auth.R([]);
            return n && (t.Authorization = n), t;
        },
        enumerable: !0,
        configurable: !0
    }), t;
}(), C = /** @class */ function() {
    function t(t, n) {
        this.T = t, this.D = n;
    }
    return t.prototype.getToken = function() {
        return Promise.resolve(new A(this.T, this.D));
    }, t.prototype.v = function(t) {
        // Fire with initial uid.
        t(I.s);
    }, t.prototype.m = function() {}, t.prototype.l = function() {}, t;
}();

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */
function P(t) {
    if (!t) return new R;
    switch (t.type) {
      case "gapi":
        var n = t.S;
        // Make sure this really is a Gapi client.
                return Wn(!("object" != typeof n || null === n || !n.auth || !n.auth.getAuthHeaderValueForFirstParty), "unexpected gapi interface"), 
        new C(n, t.D || "0");

      case "provider":
        return t.S;

      default:
        throw new E(T.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
    }
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).
var V = /** @class */ function() {
    function t(t, n) {
        if (this.seconds = t, this.nanoseconds = n, n < 0) throw new E(T.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
        if (n >= 1e9) throw new E(T.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
        if (t < -62135596800) throw new E(T.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        // This will break in the year 10,000.
                if (t >= 253402300800) throw new E(T.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
    }
    return t.now = function() {
        return t.fromMillis(Date.now());
    }, t.fromDate = function(n) {
        return t.fromMillis(n.getTime());
    }, t.fromMillis = function(n) {
        var i = Math.floor(n / 1e3);
        return new t(i, 1e6 * (n - 1e3 * i));
    }, t.prototype.toDate = function() {
        return new Date(this.toMillis());
    }, t.prototype.toMillis = function() {
        return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }, t.prototype.A = function(t) {
        return this.seconds === t.seconds ? Kn(this.nanoseconds, t.nanoseconds) : Kn(this.seconds, t.seconds);
    }, t.prototype.isEqual = function(t) {
        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }, t.prototype.toString = function() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }, t.prototype.valueOf = function() {
        // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
        // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
        // with zeroes to be a consistent length. Strings with this format then have a lexiographical
        // ordering that matches the expected ordering. The <seconds> translation is done to avoid
        // having a leading negative sign (i.e. a leading '-' character) in its string representation,
        // which would affect its lexiographical ordering.
        var t = this.seconds - -62135596800;
        // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }, t;
}(), k = /** @class */ function() {
    function t(t) {
        this.timestamp = t;
    }
    // TODO(b/34176344): Once we no longer need to use the old alpha protos,
    // delete this constructor and use a timestamp-backed version everywhere.
        return t.C = function(n) {
        var i = Math.floor(n / 1e6);
        return new t(new V(i, n % 1e6 * 1e3));
    }, t.P = function(n) {
        return new t(n);
    }, t.V = function() {
        return t.MIN;
    }, t.prototype.k = function(t) {
        return this.timestamp.A(t.timestamp);
    }, t.prototype.isEqual = function(t) {
        return this.timestamp.isEqual(t.timestamp);
    }, 
    /** Returns a number representation of the version for use in spec tests. */
    t.prototype.N = function() {
        // Convert to microseconds.
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }, t.prototype.toString = function() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }, t.prototype.O = function() {
        return this.timestamp;
    }, t.MIN = new t(new V(0, 0)), t;
}(), N = /** @class */ function() {
    function t(t, n, i) {
        void 0 === n ? n = 0 : n > t.length && Gn("offset " + n + " out of range " + t.length), 
        void 0 === i ? i = t.length - n : i > t.length - n && Gn("length " + i + " out of range " + (t.length - n)), 
        this.segments = t, this.offset = n, this.len = i;
    }
    return Object.defineProperty(t.prototype, "length", {
        get: function() {
            return this.len;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(n) {
        return 0 === t.F(this, n);
    }, t.prototype.child = function(n) {
        var i = this.segments.slice(this.offset, this.limit());
        return n instanceof t ? n.forEach((function(t) {
            i.push(t);
        })) : i.push(n), this.U(i);
    }, 
    /** The index of one past the last segment of the path. */
    t.prototype.limit = function() {
        return this.offset + this.length;
    }, t.prototype.j = function(t) {
        return t = void 0 === t ? 1 : t, Wn(this.length >= t, "Can't call popFirst() with less segments"), 
        this.U(this.segments, this.offset + t, this.length - t);
    }, t.prototype.L = function() {
        return Wn(!this.M(), "Can't call popLast() on empty path"), this.U(this.segments, this.offset, this.length - 1);
    }, t.prototype.q = function() {
        return Wn(!this.M(), "Can't call firstSegment() on empty path"), this.segments[this.offset];
    }, t.prototype.B = function() {
        return this.get(this.length - 1);
    }, t.prototype.get = function(t) {
        return Wn(t < this.length, "Index out of range"), this.segments[this.offset + t];
    }, t.prototype.M = function() {
        return 0 === this.length;
    }, t.prototype.G = function(t) {
        if (t.length < this.length) return !1;
        for (var n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
        return !0;
    }, t.prototype.W = function(t) {
        if (this.length + 1 !== t.length) return !1;
        for (var n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
        return !0;
    }, t.prototype.forEach = function(t) {
        for (var n = this.offset, i = this.limit(); n < i; n++) t(this.segments[n]);
    }, t.prototype.K = function() {
        return this.segments.slice(this.offset, this.limit());
    }, t.F = function(t, n) {
        for (var i = Math.min(t.length, n.length), e = 0; e < i; e++) {
            var r = t.get(e), u = n.get(e);
            if (r < u) return -1;
            if (r > u) return 1;
        }
        return t.length < n.length ? -1 : t.length > n.length ? 1 : 0;
    }, t;
}(), O = /** @class */ function(t) {
    function i() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(i, t), i.prototype.U = function(t, n, e) {
        return new i(t, n, e);
    }, i.prototype.J = function() {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        return this.K().join("/");
    }, i.prototype.toString = function() {
        return this.J();
    }, 
    /**
     * Creates a resource path from the given slash-delimited string.
     */
    i.H = function(t) {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        if (t.indexOf("//") >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid path (" + t + "). Paths must not contain // in them.");
        // We may still have an empty segment at the beginning or end if they had a
        // leading or trailing slash (which we allow).
                return new i(t.split("/").filter((function(t) {
            return t.length > 0;
        })));
    }, i.Y = new i([]), i;
}(N), F = /^[_a-zA-Z][_a-zA-Z0-9]*$/, U = /** @class */ function(t) {
    function i() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(i, t), i.prototype.U = function(t, n, e) {
        return new i(t, n, e);
    }, 
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */
    i.X = function(t) {
        return F.test(t);
    }, i.prototype.J = function() {
        return this.K().map((function(t) {
            return t = t.replace("\\", "\\\\").replace("`", "\\`"), i.X(t) || (t = "`" + t + "`"), 
            t;
        })).join(".");
    }, i.prototype.toString = function() {
        return this.J();
    }, 
    /**
     * Returns true if this field references the key of a document.
     */
    i.prototype.$ = function() {
        return 1 === this.length && "__name__" === this.get(0);
    }, 
    /**
     * The field designating the key of a document.
     */
    i.Z = function() {
        return new i([ "__name__" ]);
    }, 
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */
    i.tt = function(t) {
        for (var n = [], e = "", r = 0, u = function() {
            if (0 === e.length) throw new E(T.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
            n.push(e), e = "";
        }, s = !1; r < t.length; ) {
            var o = t[r];
            if ("\\" === o) {
                if (r + 1 === t.length) throw new E(T.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                var h = t[r + 1];
                if ("\\" !== h && "." !== h && "`" !== h) throw new E(T.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                e += h, r += 2;
            } else "`" === o ? (s = !s, r++) : "." !== o || s ? (e += o, r++) : (u(), r++);
        }
        if (u(), s) throw new E(T.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
        return new i(n);
    }, i.Y = new i([]), i;
}(N), j = /** @class */ function() {
    function t(n) {
        this.path = n, Wn(t.nt(n), "Invalid DocumentKey with an odd number of segments: " + n.K().join("/"));
    }
    return t.it = function(n) {
        return new t(O.H(n).j(5));
    }, 
    /** Returns true if the document is in the specified collectionId. */
    t.prototype.et = function(t) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }, t.prototype.isEqual = function(t) {
        return null !== t && 0 === O.F(this.path, t.path);
    }, t.prototype.toString = function() {
        return this.path.toString();
    }, t.F = function(t, n) {
        return O.F(t.path, n.path);
    }, t.nt = function(t) {
        return t.length % 2 == 0;
    }, 
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments The segments of the path to the document
     * @return A new instance of DocumentKey
     */
    t.rt = function(n) {
        return new t(new O(n.slice()));
    }, t.EMPTY = new t(new O([])), t;
}(), x = /** @class */ function() {
    function t(t, n) {
        this.F = t, this.root = n || M.EMPTY;
    }
    // Returns a copy of the map, with the specified key/value added or replaced.
        return t.prototype.ut = function(n, i) {
        return new t(this.F, this.root.ut(n, i, this.F).copy(null, null, M.st, null, null));
    }, 
    // Returns a copy of the map, with the specified key removed.
    t.prototype.remove = function(n) {
        return new t(this.F, this.root.remove(n, this.F).copy(null, null, M.st, null, null));
    }, 
    // Returns the value of the node with the given key, or null.
    t.prototype.get = function(t) {
        for (var n = this.root; !n.M(); ) {
            var i = this.F(t, n.key);
            if (0 === i) return n.value;
            i < 0 ? n = n.left : i > 0 && (n = n.right);
        }
        return null;
    }, 
    // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.
    t.prototype.indexOf = function(t) {
        for (
        // Number of nodes that were pruned when descending right
        var n = 0, i = this.root; !i.M(); ) {
            var e = this.F(t, i.key);
            if (0 === e) return n + i.left.size;
            e < 0 ? i = i.left : (
            // Count all nodes left of the node plus the node itself
            n += i.left.size + 1, i = i.right);
        }
        // Node not found
                return -1;
    }, t.prototype.M = function() {
        return this.root.M();
    }, Object.defineProperty(t.prototype, "size", {
        // Returns the total number of nodes in the map.
        get: function() {
            return this.root.size;
        },
        enumerable: !0,
        configurable: !0
    }), 
    // Returns the minimum key in the map.
    t.prototype.ot = function() {
        return this.root.ot();
    }, 
    // Returns the maximum key in the map.
    t.prototype.ht = function() {
        return this.root.ht();
    }, 
    // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.ct = function(t) {
        return this.root.ct(t);
    }, t.prototype.forEach = function(t) {
        this.ct((function(n, i) {
            return t(n, i), !1;
        }));
    }, t.prototype.toString = function() {
        var t = [];
        return this.ct((function(n, i) {
            return t.push(n + ":" + i), !1;
        })), "{" + t.join(", ") + "}";
    }, 
    // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.at = function(t) {
        return this.root.at(t);
    }, 
    // Returns an iterator over the SortedMap.
    t.prototype.ft = function() {
        return new L(this.root, null, this.F, !1);
    }, t.prototype.lt = function(t) {
        return new L(this.root, t, this.F, !1);
    }, t.prototype.dt = function() {
        return new L(this.root, null, this.F, !0);
    }, t.prototype.vt = function(t) {
        return new L(this.root, t, this.F, !0);
    }, t;
}(), L = /** @class */ function() {
    function t(t, n, i, e) {
        this.wt = e, this.pt = [];
        for (var r = 1; !t.M(); ) if (r = n ? i(t.key, n) : 1, 
        // flip the comparison if we're going in reverse
        e && (r *= -1), r < 0) 
        // This node is less than our start key. ignore it
        t = this.wt ? t.left : t.right; else {
            if (0 === r) {
                // This node is exactly equal to our start key. Push it on the stack,
                // but stop iterating;
                this.pt.push(t);
                break;
            }
            // This node is greater than our start key, add it to the stack and move
            // to the next one
            this.pt.push(t), t = this.wt ? t.right : t.left;
        }
    }
    return t.prototype.bt = function() {
        Wn(this.pt.length > 0, "getNext() called on iterator when hasNext() is false.");
        var t = this.pt.pop(), n = {
            key: t.key,
            value: t.value
        };
        if (this.wt) for (t = t.left; !t.M(); ) this.pt.push(t), t = t.right; else for (t = t.right; !t.M(); ) this.pt.push(t), 
        t = t.left;
        return n;
    }, t.prototype.gt = function() {
        return this.pt.length > 0;
    }, t.prototype.yt = function() {
        if (0 === this.pt.length) return null;
        var t = this.pt[this.pt.length - 1];
        return {
            key: t.key,
            value: t.value
        };
    }, t;
}(), M = /** @class */ function() {
    function t(n, i, e, r, u) {
        this.key = n, this.value = i, this.color = null != e ? e : t.RED, this.left = null != r ? r : t.EMPTY, 
        this.right = null != u ? u : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    // Returns a copy of the current node, optionally replacing pieces of it.
        return t.prototype.copy = function(n, i, e, r, u) {
        return new t(null != n ? n : this.key, null != i ? i : this.value, null != e ? e : this.color, null != r ? r : this.left, null != u ? u : this.right);
    }, t.prototype.M = function() {
        return !1;
    }, 
    // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.ct = function(t) {
        return this.left.ct(t) || t(this.key, this.value) || this.right.ct(t);
    }, 
    // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t.prototype.at = function(t) {
        return this.right.at(t) || t(this.key, this.value) || this.left.at(t);
    }, 
    // Returns the minimum node in the tree.
    t.prototype.min = function() {
        return this.left.M() ? this : this.left.min();
    }, 
    // Returns the maximum key in the tree.
    t.prototype.ot = function() {
        return this.min().key;
    }, 
    // Returns the maximum key in the tree.
    t.prototype.ht = function() {
        return this.right.M() ? this.key : this.right.ht();
    }, 
    // Returns new tree, with the key/value added.
    t.prototype.ut = function(t, n, i) {
        var e = this, r = i(t, e.key);
        return (e = r < 0 ? e.copy(null, null, null, e.left.ut(t, n, i), null) : 0 === r ? e.copy(null, n, null, null, null) : e.copy(null, null, null, null, e.right.ut(t, n, i)))._t();
    }, t.prototype.It = function() {
        if (this.left.M()) return t.EMPTY;
        var n = this;
        return n.left.Tt() || n.left.left.Tt() || (n = n.Et()), (n = n.copy(null, null, null, n.left.It(), null))._t();
    }, 
    // Returns new tree, with the specified item removed.
    t.prototype.remove = function(n, i) {
        var e, r = this;
        if (i(n, r.key) < 0) r.left.M() || r.left.Tt() || r.left.left.Tt() || (r = r.Et()), 
        r = r.copy(null, null, null, r.left.remove(n, i), null); else {
            if (r.left.Tt() && (r = r.Dt()), r.right.M() || r.right.Tt() || r.right.left.Tt() || (r = r.Rt()), 
            0 === i(n, r.key)) {
                if (r.right.M()) return t.EMPTY;
                e = r.right.min(), r = r.copy(e.key, e.value, null, null, r.right.It());
            }
            r = r.copy(null, null, null, null, r.right.remove(n, i));
        }
        return r._t();
    }, t.prototype.Tt = function() {
        return this.color;
    }, 
    // Returns new tree after performing any needed rotations.
    t.prototype._t = function() {
        var t = this;
        return t.right.Tt() && !t.left.Tt() && (t = t.St()), t.left.Tt() && t.left.left.Tt() && (t = t.Dt()), 
        t.left.Tt() && t.right.Tt() && (t = t.At()), t;
    }, t.prototype.Et = function() {
        var t = this.At();
        return t.right.left.Tt() && (t = (t = (t = t.copy(null, null, null, null, t.right.Dt())).St()).At()), 
        t;
    }, t.prototype.Rt = function() {
        var t = this.At();
        return t.left.left.Tt() && (t = (t = t.Dt()).At()), t;
    }, t.prototype.St = function() {
        var n = this.copy(null, null, t.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, n, null);
    }, t.prototype.Dt = function() {
        var n = this.copy(null, null, t.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, n);
    }, t.prototype.At = function() {
        var t = this.left.copy(null, null, !this.left.color, null, null), n = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t, n);
    }, 
    // For testing.
    t.prototype.Ct = function() {
        var t = this.Pt();
        return Math.pow(2, t) <= this.size + 1;
    }, 
    // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.
    t.prototype.Pt = function() {
        if (this.Tt() && this.left.Tt()) throw Gn("Red node has red child(" + this.key + "," + this.value + ")");
        if (this.right.Tt()) throw Gn("Right child of (" + this.key + "," + this.value + ") is red");
        var t = this.left.Pt();
        if (t !== this.right.Pt()) throw Gn("Black depths differ");
        return t + (this.Tt() ? 0 : 1);
    }, 
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t.EMPTY = null, t.RED = !0, t.st = !1, t;
}(), q = /** @class */ function() {
    function t() {
        this.size = 0;
    }
    return Object.defineProperty(t.prototype, "key", {
        get: function() {
            throw Gn("LLRBEmptyNode has no key.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "value", {
        get: function() {
            throw Gn("LLRBEmptyNode has no value.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "color", {
        get: function() {
            throw Gn("LLRBEmptyNode has no color.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "left", {
        get: function() {
            throw Gn("LLRBEmptyNode has no left child.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "right", {
        get: function() {
            throw Gn("LLRBEmptyNode has no right child.");
        },
        enumerable: !0,
        configurable: !0
    }), 
    // Returns a copy of the current node.
    t.prototype.copy = function(t, n, i, e, r) {
        return this;
    }, 
    // Returns a copy of the tree, with the specified key/value added.
    t.prototype.ut = function(t, n, i) {
        return new M(t, n);
    }, 
    // Returns a copy of the tree, with the specified key removed.
    t.prototype.remove = function(t, n) {
        return this;
    }, t.prototype.M = function() {
        return !0;
    }, t.prototype.ct = function(t) {
        return !1;
    }, t.prototype.at = function(t) {
        return !1;
    }, t.prototype.ot = function() {
        return null;
    }, t.prototype.ht = function() {
        return null;
    }, t.prototype.Tt = function() {
        return !1;
    }, 
    // For testing.
    t.prototype.Ct = function() {
        return !0;
    }, t.prototype.Pt = function() {
        return 0;
    }, t;
}();

// end LLRBEmptyNode
M.EMPTY = new q;

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */
var B = /** @class */ function() {
    function t(t) {
        this.F = t, this.data = new x(this.F);
    }
    /**
     * Creates a SortedSet from the keys of the map.
     * This is currently implemented as an O(n) copy.
     */    return t.Vt = function(n) {
        var i = new t(n.F);
        return n.forEach((function(t) {
            i = i.add(t);
        })), i;
    }, t.prototype.has = function(t) {
        return null !== this.data.get(t);
    }, t.prototype.first = function() {
        return this.data.ot();
    }, t.prototype.last = function() {
        return this.data.ht();
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.data.size;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.indexOf = function(t) {
        return this.data.indexOf(t);
    }, 
    /** Iterates elements in order defined by "comparator" */
    t.prototype.forEach = function(t) {
        this.data.ct((function(n, i) {
            return t(n), !1;
        }));
    }, 
    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */
    t.prototype.kt = function(t, n) {
        for (var i = this.data.lt(t[0]); i.gt(); ) {
            var e = i.bt();
            if (this.F(e.key, t[1]) >= 0) return;
            n(e.key);
        }
    }, 
    /**
     * Iterates over `elem`s such that: start <= elem until false is returned.
     */
    t.prototype.Nt = function(t, n) {
        var i;
        for (i = void 0 !== n ? this.data.lt(n) : this.data.ft(); i.gt(); ) {
            if (!t(i.bt().key)) return;
        }
    }, 
    /** Finds the least element greater than or equal to `elem`. */
    t.prototype.Ot = function(t) {
        var n = this.data.lt(t);
        return n.gt() ? n.bt().key : null;
    }, t.prototype.ft = function() {
        return new Q(this.data.ft());
    }, t.prototype.lt = function(t) {
        return new Q(this.data.lt(t));
    }, 
    /** Inserts or updates an element */
    t.prototype.add = function(t) {
        return this.copy(this.data.remove(t).ut(t, !0));
    }, 
    /** Deletes an element */
    t.prototype.delete = function(t) {
        return this.has(t) ? this.copy(this.data.remove(t)) : this;
    }, t.prototype.M = function() {
        return this.data.M();
    }, t.prototype.Ft = function(t) {
        var n = this;
        // Make sure `result` always refers to the larger one of the two sets.
                return n.size < t.size && (n = t, t = this), t.forEach((function(t) {
            n = n.add(t);
        })), n;
    }, t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) return !1;
        if (this.size !== n.size) return !1;
        for (var i = this.data.ft(), e = n.data.ft(); i.gt(); ) {
            var r = i.bt().key, u = e.bt().key;
            if (0 !== this.F(r, u)) return !1;
        }
        return !0;
    }, t.prototype.K = function() {
        var t = [];
        return this.forEach((function(n) {
            t.push(n);
        })), t;
    }, t.prototype.toString = function() {
        var t = [];
        return this.forEach((function(n) {
            return t.push(n);
        })), "SortedSet(" + t.toString() + ")";
    }, t.prototype.copy = function(n) {
        var i = new t(this.F);
        return i.data = n, i;
    }, t;
}(), Q = /** @class */ function() {
    function t(t) {
        this.Ut = t;
    }
    return t.prototype.bt = function() {
        return this.Ut.bt().key;
    }, t.prototype.gt = function() {
        return this.Ut.gt();
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function G(t) {
    var n = 0;
    for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && n++;
    return n;
}

function W(t, n) {
    for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && n(i, t[i]);
}

function z(t) {
    for (var n in Wn(null != t && "object" == typeof t, "isEmpty() expects object parameter."), 
    t) if (Object.prototype.hasOwnProperty.call(t, n)) return !1;
    return !0;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 */ var K = /** @class */ function() {
    function t(t) {
        this.jt = t;
    }
    return t.fromBase64String = function(n) {
        return new t(jn.xt().atob(n));
    }, t.fromUint8Array = function(n) {
        return new t(
        /**
 * Helper function to convert an Uint8array to a binary string.
 */
        function(t) {
            for (var n = "", i = 0; i < t.length; ++i) n += String.fromCharCode(t[i]);
            return n;
        }
        /**
 * Helper function to convert a binary string to an Uint8Array.
 */ (n));
    }, t.prototype.toBase64 = function() {
        return jn.xt().btoa(this.jt);
    }, t.prototype.toUint8Array = function() {
        return function(t) {
            for (var n = new Uint8Array(t.length), i = 0; i < t.length; i++) n[i] = t.charCodeAt(i);
            return n;
        }
        /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        /**
 * Returns whether a variable is either undefined or null.
 */ (this.jt);
    }, t.prototype.Lt = function() {
        return 2 * this.jt.length;
    }, t.prototype.k = function(t) {
        return Kn(this.jt, t.jt);
    }, t.prototype.isEqual = function(t) {
        return this.jt === t.jt;
    }, t.Mt = new t(""), t;
}();

function J(t) {
    return null == t;
}

/** Returns whether the value represents -0. */ function H(t) {
    // Detect if the value is -0.0. Based on polyfill from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    return -0 === t && 1 / t == -1 / 0;
}

/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value The value to test for being an integer and in the safe range
 */ function Y(t) {
    return "number" == typeof t && Number.isInteger(t) && !H(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
 *   the local view of a document. Therefore they do not need to be parsed or
 *   serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */ function X(t) {
    var n, i;
    return "server_timestamp" === (null === (i = ((null === (n = null == t ? void 0 : t.mapValue) || void 0 === n ? void 0 : n.fields) || {}).__type__) || void 0 === i ? void 0 : i.stringValue);
}

/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */
/**
 * Returns the local time at which this timestamp was first set.
 */
function $(t) {
    var n = ot(t.mapValue.fields.__local_write_time__.timestampValue);
    return new V(n.seconds, n.nanos);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// A RegExp matching ISO 8601 UTC timestamps with optional fraction.
var Z = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

/** Extracts the backend's type order for the provided value. */ function tt(t) {
    return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? X(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : Gn("Invalid value type: " + JSON.stringify(t));
}

/** Tests `left` and `right` for equality based on the backend semantics. */ function nt(t, n) {
    var i = tt(t);
    if (i !== tt(n)) return !1;
    switch (i) {
      case 0 /* NullValue */ :
        return !0;

      case 1 /* BooleanValue */ :
        return t.booleanValue === n.booleanValue;

      case 4 /* ServerTimestampValue */ :
        return $(t).isEqual($(n));

      case 3 /* TimestampValue */ :
        return function(t, n) {
            if ("string" == typeof t.timestampValue && "string" == typeof n.timestampValue && t.timestampValue.length === n.timestampValue.length) 
            // Use string equality for ISO 8601 timestamps
            return t.timestampValue === n.timestampValue;
            var i = ot(t.timestampValue), e = ot(n.timestampValue);
            return i.seconds === e.seconds && i.nanos === e.nanos;
        }(t, n);

      case 5 /* StringValue */ :
        return t.stringValue === n.stringValue;

      case 6 /* BlobValue */ :
        return function(t, n) {
            return ct(t.bytesValue).isEqual(ct(n.bytesValue));
        }(t, n);

      case 7 /* RefValue */ :
        return t.referenceValue === n.referenceValue;

      case 8 /* GeoPointValue */ :
        return function(t, n) {
            return ht(t.geoPointValue.latitude) === ht(n.geoPointValue.latitude) && ht(t.geoPointValue.longitude) === ht(n.geoPointValue.longitude);
        }(t, n);

      case 2 /* NumberValue */ :
        return function(t, n) {
            if ("integerValue" in t && "integerValue" in n) return ht(t.integerValue) === ht(n.integerValue);
            if ("doubleValue" in t && "doubleValue" in n) {
                var i = ht(t.doubleValue), e = ht(n.doubleValue);
                return i === e ? H(i) === H(e) : isNaN(i) && isNaN(e);
            }
            return !1;
        }(t, n);

      case 9 /* ArrayValue */ :
        return Jn(t.arrayValue.values || [], n.arrayValue.values || [], nt);

      case 10 /* ObjectValue */ :
        return function(t, n) {
            var i = t.mapValue.fields || {}, e = n.mapValue.fields || {};
            if (G(i) !== G(e)) return !1;
            for (var r in i) if (i.hasOwnProperty(r) && (void 0 === e[r] || !nt(i[r], e[r]))) return !1;
            return !0;
        }
        /** Returns true if the ArrayValue contains the specified element. */ (t, n);

      default:
        return Gn("Unexpected value type: " + JSON.stringify(t));
    }
}

function it(t, n) {
    return void 0 !== (t.values || []).find((function(t) {
        return nt(t, n);
    }));
}

function et(t, n) {
    var i = tt(t), e = tt(n);
    if (i !== e) return Kn(i, e);
    switch (i) {
      case 0 /* NullValue */ :
        return 0;

      case 1 /* BooleanValue */ :
        return Kn(t.booleanValue, n.booleanValue);

      case 2 /* NumberValue */ :
        return function(t, n) {
            var i = ht(t.integerValue || t.doubleValue), e = ht(n.integerValue || n.doubleValue);
            return i < e ? -1 : i > e ? 1 : i === e ? 0 : 
            // one or both are NaN.
            isNaN(i) ? isNaN(e) ? 0 : -1 : 1;
        }(t, n);

      case 3 /* TimestampValue */ :
        return rt(t.timestampValue, n.timestampValue);

      case 4 /* ServerTimestampValue */ :
        return rt($(t), $(n));

      case 5 /* StringValue */ :
        return Kn(t.stringValue, n.stringValue);

      case 6 /* BlobValue */ :
        return function(t, n) {
            var i = ct(t), e = ct(n);
            return i.k(e);
        }(t.bytesValue, n.bytesValue);

      case 7 /* RefValue */ :
        return function(t, n) {
            for (var i = t.split("/"), e = n.split("/"), r = 0; r < i.length && r < e.length; r++) {
                var u = Kn(i[r], e[r]);
                if (0 !== u) return u;
            }
            return Kn(i.length, e.length);
        }(t.referenceValue, n.referenceValue);

      case 8 /* GeoPointValue */ :
        return function(t, n) {
            var i = Kn(ht(t.latitude), ht(n.latitude));
            if (0 !== i) return i;
            return Kn(ht(t.longitude), ht(n.longitude));
        }(t.geoPointValue, n.geoPointValue);

      case 9 /* ArrayValue */ :
        return function(t, n) {
            for (var i = t.values || [], e = n.values || [], r = 0; r < i.length && r < e.length; ++r) {
                var u = et(i[r], e[r]);
                if (u) return u;
            }
            return Kn(i.length, e.length);
        }(t.arrayValue, n.arrayValue);

      case 10 /* ObjectValue */ :
        return function(t, n) {
            var i = t.fields || {}, e = Object.keys(i), r = n.fields || {}, u = Object.keys(r);
            // Even though MapValues are likely sorted correctly based on their insertion
            // order (e.g. when received from the backend), local modifications can bring
            // elements out of order. We need to re-sort the elements to ensure that
            // canonical IDs are independent of insertion order.
            e.sort(), u.sort();
            for (var s = 0; s < e.length && s < u.length; ++s) {
                var o = Kn(e[s], u[s]);
                if (0 !== o) return o;
                var h = et(i[e[s]], r[u[s]]);
                if (0 !== h) return h;
            }
            return Kn(e.length, u.length);
        }
        /**
 * Generates the canonical ID for the provided field value (as used in Target
 * serialization).
 */ (t.mapValue, n.mapValue);

      default:
        throw Gn("Invalid value type: " + i);
    }
}

function rt(t, n) {
    if ("string" == typeof t && "string" == typeof n && t.length === n.length) return Kn(t, n);
    var i = ot(t), e = ot(n), r = Kn(i.seconds, e.seconds);
    return 0 !== r ? r : Kn(i.nanos, e.nanos);
}

function ut(t) {
    return st(t);
}

function st(t) {
    return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? (e = t.timestampValue, 
    "time(" + (r = ot(e)).seconds + "," + r.nanos + ")") : "stringValue" in t ? t.stringValue : "bytesValue" in t ? ct(t.bytesValue).toBase64() : "referenceValue" in t ? (i = t.referenceValue, 
    j.it(i).toString()) : "geoPointValue" in t ? "geo(" + (n = t.geoPointValue).latitude + "," + n.longitude + ")" : "arrayValue" in t ? function(t) {
        for (var n = "[", i = !0, e = 0, r = t.values || []; e < r.length; e++) {
            var u = r[e];
            i ? i = !1 : n += ",", n += st(u);
        }
        return n + "]";
    }
    /**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */ (t.arrayValue) : "mapValue" in t ? function(t) {
        for (
        // Iteration order in JavaScript is not guaranteed. To ensure that we generate
        // matching canonical IDs for identical maps, we need to sort the keys.
        var n = Object.keys(t.fields || {}).sort(), i = "{", e = !0, r = 0, u = n; r < u.length; r++) {
            var s = u[r];
            e ? e = !1 : i += ",", i += s + ":" + st(t.fields[s]);
        }
        return i + "}";
    }(t.mapValue) : Gn("Invalid value type: " + JSON.stringify(t));
    var n, i, e, r;
}

function ot(t) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (Wn(!!t, "Cannot normalize null or undefined timestamp."), "string" == typeof t) {
        // The date string can have higher precision (nanos) than the Date class
        // (millis), so we do some custom parsing here.
        // Parse the nanos right out of the string.
        var n = 0, i = Z.exec(t);
        if (Wn(!!i, "invalid timestamp: " + t), i[1]) {
            // Pad the fraction out to 9 digits (nanos).
            var e = i[1];
            e = (e + "000000000").substr(0, 9), n = Number(e);
        }
        // Parse the date to get the seconds.
                var r = new Date(t);
        return {
            seconds: Math.floor(r.getTime() / 1e3),
            nanos: n
        };
    }
    return {
        seconds: ht(t.seconds),
        nanos: n = ht(t.nanos)
    };
}

/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */ function ht(t) {
    // TODO(bjornick): Handle int64 greater than 53 bits.
    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}

/** Converts the possible Proto types for Blobs into a ByteString. */ function ct(t) {
    return "string" == typeof t ? K.fromBase64String(t) : K.fromUint8Array(t);
}

/** Returns a reference value for the provided database and key. */ function at(t, n) {
    return {
        referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + n.path.J()
    };
}

/** Returns true if `value` is an IntegerValue . */ function ft(t) {
    return !!t && "integerValue" in t;
}

/** Returns true if `value` is a DoubleValue. */
/** Returns true if `value` is either an IntegerValue or a DoubleValue. */
function lt(t) {
    return ft(t) || function(t) {
        return !!t && "doubleValue" in t;
    }(t);
}

/** Returns true if `value` is an ArrayValue. */ function dt(t) {
    return !!t && "arrayValue" in t;
}

/** Returns true if `value` is a ReferenceValue. */ function vt(t) {
    return !!t && "referenceValue" in t;
}

/** Returns true if `value` is a NullValue. */ function wt(t) {
    return !!t && "nullValue" in t;
}

/** Returns true if `value` is NaN. */ function mt(t) {
    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}

/** Returns true if `value` is a MapValue. */ function pt(t) {
    return !!t && "mapValue" in t;
}

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Transforms a value into a server-generated timestamp. */ var bt = /** @class */ function() {
    function t() {}
    return t.prototype.qt = function(t, n) {
        return function(t, n) {
            var i, e = {
                fields: (i = {}, i.__type__ = {
                    stringValue: "server_timestamp"
                }, i.__local_write_time__ = {
                    timestampValue: {
                        seconds: t.seconds,
                        nanos: t.nanoseconds
                    }
                }, i)
            };
            return n && (e.fields.__previous_value__ = n), {
                mapValue: e
            };
        }
        /**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */ (n, t);
    }, t.prototype.Bt = function(t, n) {
        return n;
    }, t.prototype.Qt = function(t) {
        return null;
 // Server timestamps are idempotent and don't require a base value.
        }, t.prototype.isEqual = function(n) {
        return n instanceof t;
    }, t.instance = new t, t;
}(), gt = /** @class */ function() {
    function t(t) {
        this.elements = t;
    }
    return t.prototype.qt = function(t, n) {
        return this.apply(t);
    }, t.prototype.Bt = function(t, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return this.apply(t);
    }, t.prototype.apply = function(t) {
        for (var n = It(t), i = function(t) {
            n.some((function(n) {
                return nt(n, t);
            })) || n.push(t);
        }, e = 0, r = this.elements; e < r.length; e++) {
            i(r[e]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }, t.prototype.Qt = function(t) {
        return null;
 // Array transforms are idempotent and don't require a base value.
        }, t.prototype.isEqual = function(n) {
        return n instanceof t && Jn(this.elements, n.elements, nt);
    }, t;
}(), yt = /** @class */ function() {
    function t(t) {
        this.elements = t;
    }
    return t.prototype.qt = function(t, n) {
        return this.apply(t);
    }, t.prototype.Bt = function(t, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return this.apply(t);
    }, t.prototype.apply = function(t) {
        for (var n = It(t), i = function(t) {
            n = n.filter((function(n) {
                return !nt(n, t);
            }));
        }, e = 0, r = this.elements; e < r.length; e++) {
            i(r[e]);
        }
        return {
            arrayValue: {
                values: n
            }
        };
    }, t.prototype.Qt = function(t) {
        return null;
 // Array transforms are idempotent and don't require a base value.
        }, t.prototype.isEqual = function(n) {
        return n instanceof t && Jn(this.elements, n.elements, nt);
    }, t;
}(), _t = /** @class */ function() {
    function t(t, n) {
        this.serializer = t, this.Gt = n, Wn(lt(n), "NumericIncrementTransform transform requires a NumberValue");
    }
    return t.prototype.qt = function(t, n) {
        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
        // precision and resolves overflows by reducing precision, we do not
        // manually cap overflows at 2^63.
        var i = this.Qt(t), e = this.asNumber(i) + this.asNumber(this.Gt);
        return ft(i) && ft(this.Gt) ? this.serializer.Wt(e) : this.serializer.zt(e);
    }, t.prototype.Bt = function(t, n) {
        return Wn(null !== n, "Didn't receive transformResult for NUMERIC_ADD transform"), 
        n;
    }, 
    /**
     * Inspects the provided value, returning the provided value if it is already
     * a NumberValue, otherwise returning a coerced value of 0.
     */
    t.prototype.Qt = function(t) {
        return lt(t) ? t : {
            integerValue: 0
        };
    }, t.prototype.isEqual = function(n) {
        return n instanceof t && nt(this.Gt, n.Gt);
    }, t.prototype.asNumber = function(t) {
        return ht(t.integerValue || t.doubleValue);
    }, t;
}();

/** Transforms an array value via a union operation. */ function It(t) {
    return dt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */ var Tt, Et, Dt = /** @class */ function() {
    function t(t) {
        this.fields = t;
        // TODO(dimond): validation of FieldMask
        }
    return t.Kt = function(n) {
        return new t(n);
    }, t.Jt = function(n) {
        var i = new B(U.F);
        return n.forEach((function(t) {
            return i = i.add(t);
        })), new t(i);
    }, 
    /**
     * Verifies that `fieldPath` is included by at least one field in this field
     * mask.
     *
     * This is an O(n) operation, where `n` is the size of the field mask.
     */
    t.prototype.Ht = function(t) {
        var n = !1;
        return this.fields.forEach((function(i) {
            i.G(t) && (n = !0);
        })), n;
    }, t.prototype.isEqual = function(t) {
        return this.fields.isEqual(t.fields);
    }, t;
}(), Rt = /** @class */ function() {
    function t(t, n) {
        this.field = t, this.transform = n;
    }
    return t.prototype.isEqual = function(t) {
        return this.field.isEqual(t.field) && this.transform.isEqual(t.transform);
    }, t;
}(), St = function(
/**
     * The version at which the mutation was committed:
     *
     * - For most operations, this is the updateTime in the WriteResult.
     * - For deletes, the commitTime of the WriteResponse (because deletes are
     *   not stored and have no updateTime).
     *
     * Note that these versions can be different: No-op writes will not change
     * the updateTime even though the commitTime advances.
     */
t, 
/**
     * The resulting fields returned from the backend after a
     * TransformMutation has been committed. Contains one FieldValue for each
     * FieldTransform that was in the mutation.
     *
     * Will be null if the mutation was not a TransformMutation.
     */
n) {
    this.version = t, this.transformResults = n;
}, At = /** @class */ function() {
    function t(t, n) {
        this.updateTime = t, this.exists = n, Wn(void 0 === t || void 0 === n, 'Precondition can specify "exists" or "updateTime" but not both');
    }
    /** Creates a new Precondition with an exists flag. */    return t.exists = function(n) {
        return new t(void 0, n);
    }, 
    /** Creates a new Precondition based on a version a document exists at. */
    t.updateTime = function(n) {
        return new t(n);
    }, Object.defineProperty(t.prototype, "Yt", {
        /** Returns whether this Precondition is empty. */
        get: function() {
            return void 0 === this.updateTime && void 0 === this.exists;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /**
     * Returns true if the preconditions is valid for the given document
     * (or null if no document is available).
     */
    t.prototype.Xt = function(t) {
        return void 0 !== this.updateTime ? t instanceof xt && t.version.isEqual(this.updateTime) : void 0 !== this.exists ? this.exists === t instanceof xt : (Wn(this.Yt, "Precondition should be empty"), 
        !0);
    }, t.prototype.isEqual = function(t) {
        return !(n = this.updateTime, i = t.updateTime, (null != n ? !i || !n.isEqual(i) : n !== i) || this.exists !== t.exists);
        /** Helper to compare nullable (or undefined-able) objects using isEqual(). */
        var n, i;
        /** Helper to compare arrays using isEqual(). */    }, t.NONE = new t, t;
}(), Ct = /** @class */ function() {
    function t() {}
    return t.prototype.$t = function(t) {
        null != t && Wn(t.key.isEqual(this.key), "Can only apply a mutation to a document with the same key");
    }, 
    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.MIN.
     */
    t.Zt = function(t) {
        return t instanceof xt ? t.version : k.MIN;
    }, t;
}(), Pt = /** @class */ function(t) {
    function i(n, i, e) {
        var r = t.call(this) || this;
        return r.key = n, r.value = i, r.tn = e, r.type = 0 /* Set */ , r;
    }
    return tslib.__extends(i, t), i.prototype.Bt = function(t, n) {
        this.$t(t), Wn(null == n.transformResults, "Transform results received by SetMutation.");
        // Unlike applyToLocalView, if we're applying a mutation to a remote
        // document the server has accepted the mutation so the precondition must
        // have held.
        var i = n.version;
        return new xt(this.key, i, this.value, {
            hasCommittedMutations: !0
        });
    }, i.prototype.qt = function(t, n, i) {
        if (this.$t(t), !this.tn.Xt(t)) return t;
        var e = Ct.Zt(t);
        return new xt(this.key, e, this.value, {
            nn: !0
        });
    }, i.prototype.in = function(t) {
        return null;
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && this.key.isEqual(t.key) && this.value.isEqual(t.value) && this.tn.isEqual(t.tn);
    }, i;
}(Ct), Vt = /** @class */ function(t) {
    function i(n, i, e, r) {
        var u = t.call(this) || this;
        return u.key = n, u.data = i, u.en = e, u.tn = r, u.type = 1 /* Patch */ , u;
    }
    return tslib.__extends(i, t), i.prototype.Bt = function(t, n) {
        if (this.$t(t), Wn(null == n.transformResults, "Transform results received by PatchMutation."), 
        !this.tn.Xt(t)) 
        // Since the mutation was not rejected, we know that the  precondition
        // matched on the backend. We therefore must not have the expected version
        // of the document in our cache and return an UnknownDocument with the
        // known updateTime.
        return new Mt(this.key, n.version);
        var i = this.rn(t);
        return new xt(this.key, n.version, i, {
            hasCommittedMutations: !0
        });
    }, i.prototype.qt = function(t, n, i) {
        if (this.$t(t), !this.tn.Xt(t)) return t;
        var e = Ct.Zt(t), r = this.rn(t);
        return new xt(this.key, e, r, {
            nn: !0
        });
    }, i.prototype.in = function(t) {
        return null;
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && this.key.isEqual(t.key) && this.en.isEqual(t.en) && this.tn.isEqual(t.tn);
    }, 
    /**
     * Patches the data of document if available or creates a new document. Note
     * that this does not check whether or not the precondition of this patch
     * holds.
     */
    i.prototype.rn = function(t) {
        var n;
        return n = t instanceof xt ? t.data() : Ft.EMPTY, this.un(n);
    }, i.prototype.un = function(t) {
        var n = this, i = t.sn();
        return this.en.fields.forEach((function(t) {
            if (!t.M()) {
                var e = n.data.field(t);
                null !== e ? i.set(t, e) : i.delete(t);
            }
        })), i.on();
    }, i;
}(Ct), kt = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this) || this;
        return e.key = n, e.fieldTransforms = i, e.type = 2 /* Transform */ , 
        // NOTE: We set a precondition of exists: true as a safety-check, since we
        // always combine TransformMutations with a SetMutation or PatchMutation which
        // (if successful) should end up with an existing document.
        e.tn = At.exists(!0), e;
    }
    return tslib.__extends(i, t), i.prototype.Bt = function(t, n) {
        if (this.$t(t), Wn(null != n.transformResults, "Transform results missing for TransformMutation."), 
        !this.tn.Xt(t)) 
        // Since the mutation was not rejected, we know that the  precondition
        // matched on the backend. We therefore must not have the expected version
        // of the document in our cache and return an UnknownDocument with the
        // known updateTime.
        return new Mt(this.key, n.version);
        var i = this.hn(t), e = this.cn(t, n.transformResults), r = n.version, u = this.an(i.data(), e);
        return new xt(this.key, r, u, {
            hasCommittedMutations: !0
        });
    }, i.prototype.qt = function(t, n, i) {
        if (this.$t(t), !this.tn.Xt(t)) return t;
        var e = this.hn(t), r = this.fn(i, t, n), u = this.an(e.data(), r);
        return new xt(this.key, e.version, u, {
            nn: !0
        });
    }, i.prototype.in = function(t) {
        for (var n = null, i = 0, e = this.fieldTransforms; i < e.length; i++) {
            var r = e[i], u = t instanceof xt ? t.field(r.field) : void 0, s = r.transform.Qt(u || null);
            null != s && (n = null == n ? Ft.ln().set(r.field, s) : n.set(r.field, s));
        }
        return n ? n.on() : null;
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && this.key.isEqual(t.key) && Jn(this.fieldTransforms, t.fieldTransforms, (function(t, n) {
            return t.isEqual(n);
        })) && this.tn.isEqual(t.tn);
    }, 
    /**
     * Asserts that the given MaybeDocument is actually a Document and verifies
     * that it matches the key for this mutation. Since we only support
     * transformations with precondition exists this method is guaranteed to be
     * safe.
     */
    i.prototype.hn = function(t) {
        return Wn(t instanceof xt, "Unknown MaybeDocument type " + t), Wn(t.key.isEqual(this.key), "Can only transform a document with the same key"), 
        t;
    }, 
    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a
     * TransformMutation has been acknowledged by the server.
     *
     * @param baseDoc The document prior to applying this mutation batch.
     * @param serverTransformResults The transform results received by the server.
     * @return The transform results list.
     */
    i.prototype.cn = function(t, n) {
        var i = [];
        Wn(this.fieldTransforms.length === n.length, "server transform result count (" + n.length + ") should match field transform count (" + this.fieldTransforms.length + ")");
        for (var e = 0; e < n.length; e++) {
            var r = this.fieldTransforms[e], u = r.transform, s = null;
            t instanceof xt && (s = t.field(r.field)), i.push(u.Bt(s, n[e]));
        }
        return i;
    }, 
    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * TransformMutation locally.
     *
     * @param localWriteTime The local time of the transform mutation (used to
     *     generate ServerTimestampValues).
     * @param maybeDoc The current state of the document after applying all
     *     previous mutations.
     * @param baseDoc The document prior to applying this mutation batch.
     * @return The transform results list.
     */
    i.prototype.fn = function(t, n, i) {
        for (var e = [], r = 0, u = this.fieldTransforms; r < u.length; r++) {
            var s = u[r], o = s.transform, h = null;
            n instanceof xt && (h = n.field(s.field)), null === h && i instanceof xt && (
            // If the current document does not contain a value for the mutated
            // field, use the value that existed before applying this mutation
            // batch. This solves an edge case where a PatchMutation clears the
            // values in a nested map before the TransformMutation is applied.
            h = i.field(s.field)), e.push(o.qt(h, t));
        }
        return e;
    }, i.prototype.an = function(t, n) {
        Wn(n.length === this.fieldTransforms.length, "TransformResults length mismatch.");
        for (var i = t.sn(), e = 0; e < this.fieldTransforms.length; e++) {
            var r = this.fieldTransforms[e].field;
            i.set(r, n[e]);
        }
        return i.on();
    }, i;
}(Ct), Nt = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this) || this;
        return e.key = n, e.tn = i, e.type = 3 /* Delete */ , e;
    }
    return tslib.__extends(i, t), i.prototype.Bt = function(t, n) {
        // Unlike applyToLocalView, if we're applying a mutation to a remote
        // document the server has accepted the mutation so the precondition must
        // have held.
        return this.$t(t), Wn(null == n.transformResults, "Transform results received by DeleteMutation."), 
        new Lt(this.key, n.version, {
            hasCommittedMutations: !0
        });
    }, i.prototype.qt = function(t, n, i) {
        return this.$t(t), this.tn.Xt(t) ? (t && Wn(t.key.isEqual(this.key), "Can only apply mutation to document with same key"), 
        new Lt(this.key, k.V())) : t;
    }, i.prototype.in = function(t) {
        return null;
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && this.key.isEqual(t.key) && this.tn.isEqual(t.tn);
    }, i;
}(Ct), Ot = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this) || this;
        return e.key = n, e.tn = i, e.type = 4 /* Verify */ , e;
    }
    return tslib.__extends(i, t), i.prototype.Bt = function(t, n) {
        Gn("VerifyMutation should only be used in Transactions.");
    }, i.prototype.qt = function(t, n, i) {
        Gn("VerifyMutation should only be used in Transactions.");
    }, i.prototype.in = function(t) {
        Gn("VerifyMutation should only be used in Transactions.");
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && this.key.isEqual(t.key) && this.tn.isEqual(t.tn);
    }, i;
}(Ct), Ft = /** @class */ function() {
    function t(t) {
        this.proto = t, Wn(!X(t), "ServerTimestamps should be converted to ServerTimestampValue");
    }
    /** Returns a new Builder instance that is based on an empty object. */    return t.ln = function() {
        return t.EMPTY.sn();
    }, 
    /**
     * Returns the value at the given path or null.
     *
     * @param path the path to search
     * @return The value at the path or if there it doesn't exist.
     */
    t.prototype.field = function(t) {
        if (t.M()) return this.proto;
        for (var n = this.proto, i = 0; i < t.length - 1; ++i) {
            if (!n.mapValue.fields) return null;
            if (!pt(n = n.mapValue.fields[t.get(i)])) return null;
        }
        return (n = (n.mapValue.fields || {})[t.B()]) || null;
    }, 
    /**
     * Returns a FieldMask built from all FieldPaths starting from this
     * ObjectValue, including paths from nested objects.
     */
    t.prototype.en = function() {
        return this.dn(this.proto.mapValue);
    }, t.prototype.dn = function(t) {
        var n = this, i = new B(U.F);
        return W(t.fields || {}, (function(t, e) {
            var r = new U([ t ]);
            if (10 /* ObjectValue */ === tt(e)) {
                var u = n.dn(e.mapValue).fields;
                u.M() ? 
                // Preserve the empty map by adding it to the FieldMask.
                i = i.add(r) : 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                u.forEach((function(t) {
                    i = i.add(r.child(t));
                }));
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            i = i.add(r);
        })), Dt.Kt(i);
    }, t.prototype.isEqual = function(t) {
        return nt(this.proto, t.proto);
    }, 
    /** Creates a ObjectValueBuilder instance that is based on the current value. */
    t.prototype.sn = function() {
        return new Ut(this);
    }, t.EMPTY = new t({
        mapValue: {}
    }), t;
}(), Ut = /** @class */ function() {
    /**
     * @param baseObject The object to mutate.
     */
    function t(t) {
        this.vn = t, 
        /** A map that contains the accumulated changes in this builder. */
        this.wn = new Map;
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path The field path to set.
     * @param value The value to set.
     * @return The current Builder instance.
     */    return t.prototype.set = function(t, n) {
        return Wn(!t.M(), "Cannot set field for empty path on ObjectValue"), this.mn(t, n), 
        this;
    }, 
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path The field path to remove.
     * @return The current Builder instance.
     */
    t.prototype.delete = function(t) {
        return Wn(!t.M(), "Cannot delete field for empty path on ObjectValue"), this.mn(t, null), 
        this;
    }, 
    /**
     * Adds `value` to the overlay map at `path`. Creates nested map entries if
     * needed.
     */
    t.prototype.mn = function(t, n) {
        for (var i = this.wn, e = 0; e < t.length - 1; ++e) {
            var r = t.get(e), u = i.get(r);
            u instanceof Map ? 
            // Re-use a previously created map
            i = u : u && 10 /* ObjectValue */ === tt(u) ? (
            // Convert the existing Protobuf MapValue into a map
            u = new Map(Object.entries(u.mapValue.fields || {})), i.set(r, u), i = u) : (
            // Create an empty map to represent the current nesting level
            u = new Map, i.set(r, u), i = u);
        }
        i.set(t.B(), n);
    }, 
    /** Returns an ObjectValue with all mutations applied. */
    t.prototype.on = function() {
        var t = this.pn(U.Y, this.wn);
        return null != t ? new Ft(t) : this.vn;
    }, 
    /**
     * Applies any overlays from `currentOverlays` that exist at `currentPath`
     * and returns the merged data at `currentPath` (or null if there were no
     * changes).
     *
     * @param currentPath The path at the current nesting level. Can be set to
     * FieldValue.EMPTY_PATH to represent the root.
     * @param currentOverlays The overlays at the current nesting level in the
     * same format as `overlayMap`.
     * @return The merged data at `currentPath` or null if no modifications
     * were applied.
     */
    t.prototype.pn = function(t, n) {
        var e = this, r = !1, u = this.vn.field(t), s = pt(u) ? // If there is already data at the current path, base our
        tslib.__assign({}, u.mapValue.fields) : {};
        return n.forEach((function(n, i) {
            if (n instanceof Map) {
                var u = e.pn(t.child(i), n);
                null != u && (s[i] = u, r = !0);
            } else null !== n ? (s[i] = n, r = !0) : s.hasOwnProperty(i) && (delete s[i], r = !0);
        })), r ? {
            mapValue: {
                fields: s
            }
        } : null;
    }, t;
}(), jt = /** @class */ function() {
    function t(t, n) {
        this.key = t, this.version = n;
    }
    return t.bn = function(t, n) {
        return j.F(t.key, n.key);
    }, t;
}(), xt = /** @class */ function(t) {
    function i(n, i, e, r) {
        var u = t.call(this, n, i) || this;
        return u.gn = e, u.nn = !!r.nn, u.hasCommittedMutations = !!r.hasCommittedMutations, 
        u;
    }
    return tslib.__extends(i, t), i.prototype.field = function(t) {
        return this.gn.field(t);
    }, i.prototype.data = function() {
        return this.gn;
    }, i.prototype.yn = function() {
        return this.gn.proto;
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.nn === t.nn && this.hasCommittedMutations === t.hasCommittedMutations && this.gn.isEqual(t.gn);
    }, i.prototype.toString = function() {
        return "Document(" + this.key + ", " + this.version + ", " + this.gn.toString() + ", {hasLocalMutations: " + this.nn + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
    }, Object.defineProperty(i.prototype, "hasPendingWrites", {
        get: function() {
            return this.nn || this.hasCommittedMutations;
        },
        enumerable: !0,
        configurable: !0
    }), i._n = function(t, n, i) {
        var e = n.field(t), r = i.field(t);
        return null !== e && null !== r ? et(e, r) : Gn("Trying to compare documents on fields that don't exist");
    }, i;
}(jt), Lt = /** @class */ function(t) {
    function i(n, i, e) {
        var r = t.call(this, n, i) || this;
        return r.hasCommittedMutations = !(!e || !e.hasCommittedMutations), r;
    }
    return tslib.__extends(i, t), i.prototype.toString = function() {
        return "NoDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(i.prototype, "hasPendingWrites", {
        get: function() {
            return this.hasCommittedMutations;
        },
        enumerable: !0,
        configurable: !0
    }), i.prototype.isEqual = function(t) {
        return t instanceof i && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
    }, i;
}(jt), Mt = /** @class */ function(t) {
    function i() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(i, t), i.prototype.toString = function() {
        return "UnknownDocument(" + this.key + ", " + this.version + ")";
    }, Object.defineProperty(i.prototype, "hasPendingWrites", {
        get: function() {
            return !0;
        },
        enumerable: !0,
        configurable: !0
    }), i.prototype.isEqual = function(t) {
        return t instanceof i && t.version.isEqual(this.version) && t.key.isEqual(this.key);
    }, i;
}(jt), qt = /** @class */ function() {
    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this constructor, because `Query` provides an implicit `orderBy`
     * property.
     */
    function t(t, n, i, e, r, u, s) {
        void 0 === n && (n = null), void 0 === i && (i = []), void 0 === e && (e = []), 
        void 0 === r && (r = null), void 0 === u && (u = null), void 0 === s && (s = null), 
        this.path = t, this.collectionGroup = n, this.orderBy = i, this.filters = e, this.limit = r, 
        this.startAt = u, this.endAt = s, this.In = null;
    }
    return t.prototype.canonicalId = function() {
        if (null === this.In) {
            var t = this.path.J();
            null !== this.collectionGroup && (t += "|cg:" + this.collectionGroup), t += "|f:", 
            t += this.filters.map((function(t) {
                return t.canonicalId();
            })).join(","), t += "|ob:", t += this.orderBy.map((function(t) {
                return t.canonicalId();
            })).join(","), J(this.limit) || (t += "|l:", t += this.limit), this.startAt && (t += "|lb:", 
            t += this.startAt.canonicalId()), this.endAt && (t += "|ub:", t += this.endAt.canonicalId()), 
            this.In = t;
        }
        return this.In;
    }, t.prototype.toString = function() {
        var t = this.path.J();
        return null !== this.collectionGroup && (t += " collectionGroup=" + this.collectionGroup), 
        this.filters.length > 0 && (t += ", filters: [" + this.filters.join(", ") + "]"), 
        J(this.limit) || (t += ", limit: " + this.limit), this.orderBy.length > 0 && (t += ", orderBy: [" + this.orderBy.join(", ") + "]"), 
        this.startAt && (t += ", startAt: " + this.startAt.canonicalId()), this.endAt && (t += ", endAt: " + this.endAt.canonicalId()), 
        "Target(" + t + ")";
    }, t.prototype.isEqual = function(t) {
        if (this.limit !== t.limit) return !1;
        if (this.orderBy.length !== t.orderBy.length) return !1;
        for (var n = 0; n < this.orderBy.length; n++) if (!this.orderBy[n].isEqual(t.orderBy[n])) return !1;
        if (this.filters.length !== t.filters.length) return !1;
        for (n = 0; n < this.filters.length; n++) if (!this.filters[n].isEqual(t.filters[n])) return !1;
        return this.collectionGroup === t.collectionGroup && (!!this.path.isEqual(t.path) && (!!(null !== this.startAt ? this.startAt.isEqual(t.startAt) : null === t.startAt) && (null !== this.endAt ? this.endAt.isEqual(t.endAt) : null === t.endAt)));
    }, t.prototype.Tn = function() {
        return j.nt(this.path) && null === this.collectionGroup && 0 === this.filters.length;
    }, t;
}(), Bt = /** @class */ function() {
    /**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */
    function t(t, n, i, e, r, u, s, o) {
        void 0 === n && (n = null), void 0 === i && (i = []), void 0 === e && (e = []), 
        void 0 === r && (r = null), void 0 === u && (u = "F" /* First */), void 0 === s && (s = null), 
        void 0 === o && (o = null), this.path = t, this.collectionGroup = n, this.En = i, 
        this.filters = e, this.limit = r, this.Dn = u, this.startAt = s, this.endAt = o, 
        this.Rn = null, 
        // The corresponding `Target` of this `Query` instance.
        this.Sn = null, this.startAt && this.An(this.startAt), this.endAt && this.An(this.endAt);
    }
    return t.Cn = function(n) {
        return new t(n);
    }, Object.defineProperty(t.prototype, "orderBy", {
        get: function() {
            if (null === this.Rn) {
                var t = this.Pn(), n = this.Vn();
                if (null !== t && null === n) 
                // In order to implicitly add key ordering, we must also add the
                // inequality filter field for it to be a valid query.
                // Note that the default inequality field and key ordering is ascending.
                t.$() ? this.Rn = [ tn ] : this.Rn = [ new Zt(t), tn ]; else {
                    Wn(null === t || null !== n && t.isEqual(n), "First orderBy should match inequality field."), 
                    this.Rn = [];
                    for (var i = !1, e = 0, r = this.En; e < r.length; e++) {
                        var u = r[e];
                        this.Rn.push(u), u.field.$() && (i = !0);
                    }
                    if (!i) {
                        // The order of the implicit key ordering always matches the last
                        // explicit order by
                        var s = this.En.length > 0 ? this.En[this.En.length - 1].dir : Xt.ASCENDING;
                        this.Rn.push(s === Xt.ASCENDING ? tn : nn);
                    }
                }
            }
            return this.Rn;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.kn = function(n) {
        Wn(null == this.Pn() || !(n instanceof Wt) || !n.Nn() || n.field.isEqual(this.Pn()), "Query must only have one inequality field."), 
        Wn(!this.Tn(), "No filtering allowed for document query");
        var i = this.filters.concat([ n ]);
        return new t(this.path, this.collectionGroup, this.En.slice(), i, this.limit, this.Dn, this.startAt, this.endAt);
    }, t.prototype.On = function(n) {
        Wn(!this.startAt && !this.endAt, "Bounds must be set after orderBy");
        // TODO(dimond): validate that orderBy does not list the same key twice.
        var i = this.En.concat([ n ]);
        return new t(this.path, this.collectionGroup, i, this.filters.slice(), this.limit, this.Dn, this.startAt, this.endAt);
    }, t.prototype.Fn = function(n) {
        return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), n, "F" /* First */ , this.startAt, this.endAt);
    }, t.prototype.Un = function(n) {
        return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), n, "L" /* Last */ , this.startAt, this.endAt);
    }, t.prototype.jn = function(n) {
        return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), this.limit, this.Dn, n, this.endAt);
    }, t.prototype.xn = function(n) {
        return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), this.limit, this.Dn, this.startAt, n);
    }, 
    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */
    t.prototype.Ln = function(n) {
        return new t(n, 
        /*collectionGroup=*/ null, this.En.slice(), this.filters.slice(), this.limit, this.Dn, this.startAt, this.endAt);
    }, 
    /**
     * Returns true if this query does not specify any query constraints that
     * could remove results.
     */
    t.prototype.Mn = function() {
        return 0 === this.filters.length && null === this.limit && null == this.startAt && null == this.endAt && (0 === this.En.length || 1 === this.En.length && this.En[0].field.$());
    }, 
    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    t.prototype.canonicalId = function() {
        return this.qn().canonicalId() + "|lt:" + this.Dn;
    }, t.prototype.toString = function() {
        return "Query(target=" + this.qn().toString() + "; limitType=" + this.Dn + ")";
    }, t.prototype.isEqual = function(t) {
        return this.qn().isEqual(t.qn()) && this.Dn === t.Dn;
    }, t.prototype.Bn = function(t, n) {
        for (var i = !1, e = 0, r = this.orderBy; e < r.length; e++) {
            var u = r[e], s = u.compare(t, n);
            if (0 !== s) return s;
            i = i || u.field.$();
        }
        // Assert that we actually compared by key
                return Wn(i, "orderBy used that doesn't compare on key field"), 0;
    }, t.prototype.matches = function(t) {
        return this.Qn(t) && this.Gn(t) && this.Wn(t) && this.zn(t);
    }, t.prototype.Kn = function() {
        return !J(this.limit) && "F" /* First */ === this.Dn;
    }, t.prototype.Jn = function() {
        return !J(this.limit) && "L" /* Last */ === this.Dn;
    }, t.prototype.Vn = function() {
        return this.En.length > 0 ? this.En[0].field : null;
    }, t.prototype.Pn = function() {
        for (var t = 0, n = this.filters; t < n.length; t++) {
            var i = n[t];
            if (i instanceof Wt && i.Nn()) return i.field;
        }
        return null;
    }, 
    // Checks if any of the provided Operators are included in the query and
    // returns the first one that is, or null if none are.
    t.prototype.Hn = function(t) {
        for (var n = 0, i = this.filters; n < i.length; n++) {
            var e = i[n];
            if (e instanceof Wt && t.indexOf(e.op) >= 0) return e.op;
        }
        return null;
    }, t.prototype.Tn = function() {
        return this.qn().Tn();
    }, t.prototype.Yn = function() {
        return null !== this.collectionGroup;
    }, 
    /**
     * Converts this `Query` instance to it's corresponding `Target`
     * representation.
     */
    t.prototype.qn = function() {
        if (!this.Sn) if ("F" /* First */ === this.Dn) this.Sn = new qt(this.path, this.collectionGroup, this.orderBy, this.filters, this.limit, this.startAt, this.endAt); else {
            for (
            // Flip the orderBy directions since we want the last results
            var t = [], n = 0, i = this.orderBy; n < i.length; n++) {
                var e = i[n], r = e.dir === Xt.DESCENDING ? Xt.ASCENDING : Xt.DESCENDING;
                t.push(new Zt(e.field, r));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                        var u = this.endAt ? new $t(this.endAt.position, !this.endAt.before) : null, s = this.startAt ? new $t(this.startAt.position, !this.startAt.before) : null;
            // Now return as a LimitType.First query.
            this.Sn = new qt(this.path, this.collectionGroup, t, this.filters, this.limit, u, s);
        }
        return this.Sn;
    }, t.prototype.Qn = function(t) {
        var n = t.key.path;
        return null !== this.collectionGroup ? t.key.et(this.collectionGroup) && this.path.G(n) : j.nt(this.path) ? this.path.isEqual(n) : this.path.W(n);
    }, 
    /**
     * A document must have a value for every ordering clause in order to show up
     * in the results.
     */
    t.prototype.Gn = function(t) {
        for (var n = 0, i = this.En; n < i.length; n++) {
            var e = i[n];
            // order by key always matches
                        if (!e.field.$() && null === t.field(e.field)) return !1;
        }
        return !0;
    }, t.prototype.Wn = function(t) {
        for (var n = 0, i = this.filters; n < i.length; n++) {
            if (!i[n].matches(t)) return !1;
        }
        return !0;
    }, 
    /**
     * Makes sure a document is within the bounds, if provided.
     */
    t.prototype.zn = function(t) {
        return !(this.startAt && !this.startAt.Xn(this.orderBy, t)) && (!this.endAt || !this.endAt.Xn(this.orderBy, t));
    }, t.prototype.An = function(t) {
        Wn(t.position.length <= this.orderBy.length, "Bound is longer than orderBy");
    }, t;
}(), Qt = function() {}, Gt = /** @class */ function() {
    function t(t) {
        this.name = t;
    }
    return t.H = function(n) {
        switch (n) {
          case "<":
            return t.LESS_THAN;

          case "<=":
            return t.LESS_THAN_OR_EQUAL;

          case "==":
            return t.EQUAL;

          case ">=":
            return t.GREATER_THAN_OR_EQUAL;

          case ">":
            return t.GREATER_THAN;

          case "array-contains":
            return t.ARRAY_CONTAINS;

          case "in":
            return t.IN;

          case "array-contains-any":
            return t.ARRAY_CONTAINS_ANY;

          default:
            return Gn("Unknown FieldFilter operator: " + n);
        }
    }, t.prototype.toString = function() {
        return this.name;
    }, t.prototype.isEqual = function(t) {
        return this.name === t.name;
    }, t.LESS_THAN = new t("<"), t.LESS_THAN_OR_EQUAL = new t("<="), t.EQUAL = new t("=="), 
    t.GREATER_THAN = new t(">"), t.GREATER_THAN_OR_EQUAL = new t(">="), t.ARRAY_CONTAINS = new t("array-contains"), 
    t.IN = new t("in"), t.ARRAY_CONTAINS_ANY = new t("array-contains-any"), t;
}(), Wt = /** @class */ function(t) {
    function i(n, i, e) {
        var r = t.call(this) || this;
        return r.field = n, r.op = i, r.value = e, r;
    }
    /**
     * Creates a filter based on the provided arguments.
     */    return tslib.__extends(i, t), i.create = function(t, n, e) {
        if (t.$()) return n === Gt.IN ? (Wn(dt(e), "Comparing on key with IN, but filter value not an ArrayValue"), 
        Wn((e.arrayValue.values || []).every((function(t) {
            return vt(t);
        })), "Comparing on key with IN, but an array value was not a RefValue"), new Kt(t, e)) : (Wn(vt(e), "Comparing on key, but filter value not a RefValue"), 
        Wn(n !== Gt.ARRAY_CONTAINS && n !== Gt.ARRAY_CONTAINS_ANY, "'" + n.toString() + "' queries don't make sense on document keys."), 
        new zt(t, n, e));
        if (wt(e)) {
            if (n !== Gt.EQUAL) throw new E(T.INVALID_ARGUMENT, "Invalid query. Null supports only equality comparisons.");
            return new i(t, n, e);
        }
        if (mt(e)) {
            if (n !== Gt.EQUAL) throw new E(T.INVALID_ARGUMENT, "Invalid query. NaN supports only equality comparisons.");
            return new i(t, n, e);
        }
        return n === Gt.ARRAY_CONTAINS ? new Jt(t, e) : n === Gt.IN ? (Wn(dt(e), "IN filter has invalid value: " + e.toString()), 
        new Ht(t, e)) : n === Gt.ARRAY_CONTAINS_ANY ? (Wn(dt(e), "ARRAY_CONTAINS_ANY filter has invalid value: " + e.toString()), 
        new Yt(t, e)) : new i(t, n, e);
    }, i.prototype.matches = function(t) {
        var n = t.field(this.field);
        // Only compare types with matching backend order (such as double and int).
                return null !== n && tt(this.value) === tt(n) && this.$n(et(n, this.value));
    }, i.prototype.$n = function(t) {
        switch (this.op) {
          case Gt.LESS_THAN:
            return t < 0;

          case Gt.LESS_THAN_OR_EQUAL:
            return t <= 0;

          case Gt.EQUAL:
            return 0 === t;

          case Gt.GREATER_THAN:
            return t > 0;

          case Gt.GREATER_THAN_OR_EQUAL:
            return t >= 0;

          default:
            return Gn("Unknown FieldFilter operator: " + this.op);
        }
    }, i.prototype.Nn = function() {
        return [ Gt.LESS_THAN, Gt.LESS_THAN_OR_EQUAL, Gt.GREATER_THAN, Gt.GREATER_THAN_OR_EQUAL ].indexOf(this.op) >= 0;
    }, i.prototype.canonicalId = function() {
        // TODO(b/29183165): Technically, this won't be unique if two values have
        // the same description, such as the int 3 and the string "3". So we should
        // add the types in here somehow, too.
        return this.field.J() + this.op.toString() + ut(this.value);
    }, i.prototype.isEqual = function(t) {
        return t instanceof i && (this.op.isEqual(t.op) && this.field.isEqual(t.field) && nt(this.value, t.value));
    }, i.prototype.toString = function() {
        return this.field.J() + " " + this.op + " " + ut(this.value);
    }, i;
}(Qt), zt = /** @class */ function(t) {
    function i(n, i, e) {
        var r = t.call(this, n, i, e) || this;
        return Wn(vt(e), "KeyFieldFilter expects a ReferenceValue"), r.key = j.it(e.referenceValue), 
        r;
    }
    return tslib.__extends(i, t), i.prototype.matches = function(t) {
        var n = j.F(t.key, this.key);
        return this.$n(n);
    }, i;
}(Wt), Kt = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this, n, Gt.IN, i) || this;
        return Wn(dt(i), "KeyFieldInFilter expects an ArrayValue"), e.keys = (i.arrayValue.values || []).map((function(t) {
            return Wn(vt(t), "Comparing on key with IN, but an array value was not a ReferenceValue"), 
            j.it(t.referenceValue);
        })), e;
    }
    return tslib.__extends(i, t), i.prototype.matches = function(t) {
        return this.keys.some((function(n) {
            return n.isEqual(t.key);
        }));
    }, i;
}(Wt), Jt = /** @class */ function(t) {
    function i(n, i) {
        return t.call(this, n, Gt.ARRAY_CONTAINS, i) || this;
    }
    return tslib.__extends(i, t), i.prototype.matches = function(t) {
        var n = t.field(this.field);
        return dt(n) && it(n.arrayValue, this.value);
    }, i;
}(Wt), Ht = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this, n, Gt.IN, i) || this;
        return Wn(dt(i), "InFilter expects an ArrayValue"), e;
    }
    return tslib.__extends(i, t), i.prototype.matches = function(t) {
        var n = t.field(this.field);
        return null !== n && it(this.value.arrayValue, n);
    }, i;
}(Wt), Yt = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this, n, Gt.ARRAY_CONTAINS_ANY, i) || this;
        return Wn(dt(i), "ArrayContainsAnyFilter expects an ArrayValue"), e;
    }
    return tslib.__extends(i, t), i.prototype.matches = function(t) {
        var n = this, i = t.field(this.field);
        return !(!dt(i) || !i.arrayValue.values) && i.arrayValue.values.some((function(t) {
            return it(n.value.arrayValue, t);
        }));
    }, i;
}(Wt), Xt = /** @class */ function() {
    function t(t) {
        this.name = t;
    }
    return t.prototype.toString = function() {
        return this.name;
    }, t.ASCENDING = new t("asc"), t.DESCENDING = new t("desc"), t;
}(), $t = /** @class */ function() {
    function t(t, n) {
        this.position = t, this.before = n;
    }
    return t.prototype.canonicalId = function() {
        // TODO(b/29183165): Make this collision robust.
        return (this.before ? "b" : "a") + ":" + this.position.map((function(t) {
            return ut(t);
        })).join(",");
    }, 
    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */
    t.prototype.Xn = function(t, n) {
        Wn(this.position.length <= t.length, "Bound has more components than query's orderBy");
        for (var i = 0, e = 0; e < this.position.length; e++) {
            var r = t[e], u = this.position[e];
            if (r.field.$()) Wn(vt(u), "Bound has a non-key value where the key path is being used."), 
            i = j.F(j.it(u.referenceValue), n.key); else {
                var s = n.field(r.field);
                Wn(null !== s, "Field should exist since document matched the orderBy already."), 
                i = et(u, s);
            }
            if (r.dir === Xt.DESCENDING && (i *= -1), 0 !== i) break;
        }
        return this.before ? i <= 0 : i < 0;
    }, t.prototype.isEqual = function(t) {
        if (null === t) return !1;
        if (this.before !== t.before || this.position.length !== t.position.length) return !1;
        for (var n = 0; n < this.position.length; n++) {
            if (!nt(this.position[n], t.position[n])) return !1;
        }
        return !0;
    }, t;
}(), Zt = /** @class */ function() {
    function t(t, n) {
        this.field = t, void 0 === n && (n = Xt.ASCENDING), this.dir = n, this.Zn = t.$();
    }
    return t.prototype.compare = function(t, n) {
        var i = this.Zn ? xt.bn(t, n) : xt._n(this.field, t, n);
        switch (this.dir) {
          case Xt.ASCENDING:
            return i;

          case Xt.DESCENDING:
            return -1 * i;

          default:
            return Gn("Unknown direction: " + this.dir);
        }
    }, t.prototype.canonicalId = function() {
        // TODO(b/29183165): Make this collision robust.
        return this.field.J() + this.dir.toString();
    }, t.prototype.toString = function() {
        return this.field.J() + " (" + this.dir + ")";
    }, t.prototype.isEqual = function(t) {
        return this.dir === t.dir && this.field.isEqual(t.field);
    }, t;
}(), tn = new Zt(U.Z(), Xt.ASCENDING), nn = new Zt(U.Z(), Xt.DESCENDING), en = /** @class */ function() {
    function t(
    /** The target being listened to. */
    t, 
    /**
     * The target ID to which the target corresponds; Assigned by the
     * LocalStore for user listens and by the SyncEngine for limbo watches.
     */
    n, 
    /** The purpose of the target. */
    i, 
    /**
     * The sequence number of the last transaction during which this target data
     * was modified.
     */
    e, 
    /** The latest snapshot version seen for this target. */
    r, 
    /**
     * The maximum snapshot version at which the associated view
     * contained no limbo documents.
     */
    u, 
    /**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */
    s) {
        void 0 === r && (r = k.MIN), void 0 === u && (u = k.MIN), void 0 === s && (s = K.Mt), 
        this.target = t, this.targetId = n, this.ti = i, this.sequenceNumber = e, this.ni = r, 
        this.lastLimboFreeSnapshotVersion = u, this.resumeToken = s;
    }
    /** Creates a new target data instance with an updated sequence number. */    return t.prototype.ii = function(n) {
        return new t(this.target, this.targetId, this.ti, n, this.ni, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }, 
    /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */
    t.prototype.ei = function(n, i) {
        return new t(this.target, this.targetId, this.ti, this.sequenceNumber, i, this.lastLimboFreeSnapshotVersion, n);
    }, 
    /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */
    t.prototype.ri = function(n) {
        return new t(this.target, this.targetId, this.ti, this.sequenceNumber, this.ni, n, this.resumeToken);
    }, t.prototype.isEqual = function(t) {
        return this.targetId === t.targetId && this.ti === t.ti && this.sequenceNumber === t.sequenceNumber && this.ni.isEqual(t.ni) && this.lastLimboFreeSnapshotVersion.isEqual(t.lastLimboFreeSnapshotVersion) && this.resumeToken.isEqual(t.resumeToken) && this.target.isEqual(t.target);
    }, t;
}(), rn = /** @class */ function() {
    // TODO(b/33078163): just use simplest form of existence filter for now
    function t(t) {
        this.count = t;
    }
    return t.prototype.isEqual = function(t) {
        return t && t.count === this.count;
    }, t;
}();

/** A field path and the TransformOperation to perform upon it. */
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */
function un(t) {
    switch (t) {
      case T.OK:
        return Gn("Treated status OK as error");

      case T.CANCELLED:
      case T.UNKNOWN:
      case T.DEADLINE_EXCEEDED:
      case T.RESOURCE_EXHAUSTED:
      case T.INTERNAL:
      case T.UNAVAILABLE:
 // Unauthenticated means something went wrong with our token and we need
        // to retry with new credentials which will happen automatically.
              case T.UNAUTHENTICATED:
        return !1;

      case T.INVALID_ARGUMENT:
      case T.NOT_FOUND:
      case T.ALREADY_EXISTS:
      case T.PERMISSION_DENIED:
      case T.FAILED_PRECONDITION:
 // Aborted might be retried in some scenarios, but that is dependant on
        // the context and should handled individually by the calling code.
        // See https://cloud.google.com/apis/design/errors.
              case T.ABORTED:
      case T.OUT_OF_RANGE:
      case T.UNIMPLEMENTED:
      case T.DATA_LOSS:
        return !0;

      default:
        return Gn("Unknown status code: " + t);
    }
}

/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */
/**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */
function sn(t) {
    if (void 0 === t) 
    // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return Bn("GRPC error has no .code"), T.UNKNOWN;
    switch (t) {
      case Tt.OK:
        return T.OK;

      case Tt.CANCELLED:
        return T.CANCELLED;

      case Tt.UNKNOWN:
        return T.UNKNOWN;

      case Tt.DEADLINE_EXCEEDED:
        return T.DEADLINE_EXCEEDED;

      case Tt.RESOURCE_EXHAUSTED:
        return T.RESOURCE_EXHAUSTED;

      case Tt.INTERNAL:
        return T.INTERNAL;

      case Tt.UNAVAILABLE:
        return T.UNAVAILABLE;

      case Tt.UNAUTHENTICATED:
        return T.UNAUTHENTICATED;

      case Tt.INVALID_ARGUMENT:
        return T.INVALID_ARGUMENT;

      case Tt.NOT_FOUND:
        return T.NOT_FOUND;

      case Tt.ALREADY_EXISTS:
        return T.ALREADY_EXISTS;

      case Tt.PERMISSION_DENIED:
        return T.PERMISSION_DENIED;

      case Tt.FAILED_PRECONDITION:
        return T.FAILED_PRECONDITION;

      case Tt.ABORTED:
        return T.ABORTED;

      case Tt.OUT_OF_RANGE:
        return T.OUT_OF_RANGE;

      case Tt.UNIMPLEMENTED:
        return T.UNIMPLEMENTED;

      case Tt.DATA_LOSS:
        return T.DATA_LOSS;

      default:
        return Gn("Unknown status code: " + t);
    }
}

/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */ (Et = Tt || (Tt = {}))[Et.OK = 0] = "OK", Et[Et.CANCELLED = 1] = "CANCELLED", 
Et[Et.UNKNOWN = 2] = "UNKNOWN", Et[Et.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
Et[Et.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Et[Et.NOT_FOUND = 5] = "NOT_FOUND", 
Et[Et.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Et[Et.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
Et[Et.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Et[Et.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
Et[Et.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Et[Et.ABORTED = 10] = "ABORTED", 
Et[Et.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Et[Et.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
Et[Et.INTERNAL = 13] = "INTERNAL", Et[Et.UNAVAILABLE = 14] = "UNAVAILABLE", Et[Et.DATA_LOSS = 15] = "DATA_LOSS";

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var on = new x(j.F);

function hn() {
    return on;
}

function cn() {
    return hn();
}

var an = new x(j.F);

function fn() {
    return an;
}

var ln = new x(j.F);

function dn() {
    return ln;
}

var vn = new B(j.F);

function wn() {
    for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
    for (var i = vn, e = 0, r = t; e < r.length; e++) {
        var u = r[e];
        i = i.add(u);
    }
    return i;
}

var mn = new B(Kn);

function pn() {
    return mn;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */ var bn = /** @class */ function() {
    /** The default ordering is by key if the comparator is omitted */
    function t(t) {
        // We are adding document key comparator to the end as it's the only
        // guaranteed unique property of a document.
        this.F = t ? function(n, i) {
            return t(n, i) || j.F(n.key, i.key);
        } : function(t, n) {
            return j.F(t.key, n.key);
        }, this.ui = fn(), this.si = new x(this.F);
    }
    /**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */    return t.oi = function(n) {
        return new t(n.F);
    }, t.prototype.has = function(t) {
        return null != this.ui.get(t);
    }, t.prototype.get = function(t) {
        return this.ui.get(t);
    }, t.prototype.first = function() {
        return this.si.ot();
    }, t.prototype.last = function() {
        return this.si.ht();
    }, t.prototype.M = function() {
        return this.si.M();
    }, 
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */
    t.prototype.indexOf = function(t) {
        var n = this.ui.get(t);
        return n ? this.si.indexOf(n) : -1;
    }, Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.si.size;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /** Iterates documents in order defined by "comparator" */
    t.prototype.forEach = function(t) {
        this.si.ct((function(n, i) {
            return t(n), !1;
        }));
    }, 
    /** Inserts or updates a document with the same key */
    t.prototype.add = function(t) {
        // First remove the element if we have it.
        var n = this.delete(t.key);
        return n.copy(n.ui.ut(t.key, t), n.si.ut(t, null));
    }, 
    /** Deletes a document with a given key */
    t.prototype.delete = function(t) {
        var n = this.get(t);
        return n ? this.copy(this.ui.remove(t), this.si.remove(n)) : this;
    }, t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) return !1;
        if (this.size !== n.size) return !1;
        for (var i = this.si.ft(), e = n.si.ft(); i.gt(); ) {
            var r = i.bt().key, u = e.bt().key;
            if (!r.isEqual(u)) return !1;
        }
        return !0;
    }, t.prototype.toString = function() {
        var t = [];
        return this.forEach((function(n) {
            t.push(n.toString());
        })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
    }, t.prototype.copy = function(n, i) {
        var e = new t;
        return e.F = this.F, e.ui = n, e.si = i, e;
    }, t;
}(), gn = /** @class */ function() {
    function t() {
        this.hi = new x(j.F);
    }
    return t.prototype.track = function(t) {
        var n = t.doc.key, i = this.hi.get(n);
        i ? 
        // Merge the new change with the existing change.
        0 /* Added */ !== t.type && 3 /* Metadata */ === i.type ? this.hi = this.hi.ut(n, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== i.type ? this.hi = this.hi.ut(n, {
            type: i.type,
            doc: t.doc
        }) : 2 /* Modified */ === t.type && 2 /* Modified */ === i.type ? this.hi = this.hi.ut(n, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : 2 /* Modified */ === t.type && 0 /* Added */ === i.type ? this.hi = this.hi.ut(n, {
            type: 0 /* Added */ ,
            doc: t.doc
        }) : 1 /* Removed */ === t.type && 0 /* Added */ === i.type ? this.hi = this.hi.remove(n) : 1 /* Removed */ === t.type && 2 /* Modified */ === i.type ? this.hi = this.hi.ut(n, {
            type: 1 /* Removed */ ,
            doc: i.doc
        }) : 0 /* Added */ === t.type && 1 /* Removed */ === i.type ? this.hi = this.hi.ut(n, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : 
        // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        Gn("unsupported combination of changes: " + JSON.stringify(t) + " after " + JSON.stringify(i)) : this.hi = this.hi.ut(n, t);
    }, t.prototype.ci = function() {
        var t = [];
        return this.hi.ct((function(n, i) {
            t.push(i);
        })), t;
    }, t;
}(), yn = /** @class */ function() {
    function t(t, n, i, e, r, u, s, o) {
        this.query = t, this.docs = n, this.ai = i, this.docChanges = e, this.fi = r, this.fromCache = u, 
        this.li = s, this.di = o;
    }
    /** Returns a view snapshot as if all documents in the snapshot were added. */    return t.vi = function(n, i, e, r) {
        var u = [];
        return i.forEach((function(t) {
            u.push({
                type: 0 /* Added */ ,
                doc: t
            });
        })), new t(n, i, bn.oi(i), u, e, r, 
        /* syncStateChanged= */ !0, 
        /* excludesMetadataChanges= */ !1);
    }, Object.defineProperty(t.prototype, "hasPendingWrites", {
        get: function() {
            return !this.fi.M();
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(t) {
        if (!(this.fromCache === t.fromCache && this.li === t.li && this.fi.isEqual(t.fi) && this.query.isEqual(t.query) && this.docs.isEqual(t.docs) && this.ai.isEqual(t.ai))) return !1;
        var n = this.docChanges, i = t.docChanges;
        if (n.length !== i.length) return !1;
        for (var e = 0; e < n.length; e++) if (n[e].type !== i[e].type || !n[e].doc.isEqual(i[e].doc)) return !1;
        return !0;
    }, t;
}(), _n = /** @class */ function() {
    function t(
    /**
     * The snapshot version this event brings us up to, or MIN if not set.
     */
    t, 
    /**
     * A map from target to changes to the target. See TargetChange.
     */
    n, 
    /**
     * A set of targets that is known to be inconsistent. Listens for these
     * targets should be re-established without resume tokens.
     */
    i, 
    /**
     * A set of which documents have changed or been deleted, along with the
     * doc's new values (if not deleted).
     */
    e, 
    /**
     * A set of which document updates are due only to limbo resolution targets.
     */
    r) {
        this.ni = t, this.wi = n, this.mi = i, this.pi = e, this.bi = r;
    }
    /**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */
    // PORTING NOTE: Multi-tab only
        return t.gi = function(n, i) {
        var e = new Map;
        return e.set(n, In.yi(n, i)), new t(k.MIN, e, pn(), hn(), wn());
    }, t;
}(), In = /** @class */ function() {
    function t(
    /**
     * An opaque, server-assigned token that allows watching a query to be resumed
     * after disconnecting without retransmitting all the data that matches the
     * query. The resume token essentially identifies a point in time from which
     * the server should resume sending results.
     */
    t, 
    /**
     * The "current" (synced) status of this target. Note that "current"
     * has special meaning in the RPC protocol that implies that a target is
     * both up-to-date and consistent with the rest of the watch stream.
     */
    n, 
    /**
     * The set of documents that were newly assigned to this target as part of
     * this remote event.
     */
    i, 
    /**
     * The set of documents that were already assigned to this target but received
     * an update during this remote event.
     */
    e, 
    /**
     * The set of documents that were removed from this target as part of this
     * remote event.
     */
    r) {
        this.resumeToken = t, this._i = n, this.Ii = i, this.Ti = e, this.Ei = r;
    }
    /**
     * This method is used to create a synthesized TargetChanges that can be used to
     * apply a CURRENT status change to a View (for queries executed in a different
     * tab) or for new queries (to raise snapshots with correct CURRENT status).
     */    return t.yi = function(n, i) {
        return new t(K.Mt, i, wn(), wn(), wn());
    }, t;
}(), Tn = function(
/** The new document applies to all of these targets. */
t, 
/** The new document is removed from all of these targets. */
n, 
/** The key of the document for this change. */
i, 
/**
     * The new document or NoDocument if it was deleted. Is null if the
     * document went out of view without the server sending a new document.
     */
e) {
    this.Di = t, this.removedTargetIds = n, this.key = i, this.Ri = e;
}, En = function(t, n) {
    this.targetId = t, this.Si = n;
}, Dn = function(
/** What kind of change occurred to the watch target. */
t, 
/** The target IDs that were added/removed/set. */
n, 
/**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */
i, 
/** An RPC error indicating why the watch failed. */
e) {
    void 0 === i && (i = K.Mt), void 0 === e && (e = null), this.state = t, this.targetIds = n, 
    this.resumeToken = i, this.cause = e;
}, Rn = /** @class */ function() {
    function t() {
        /**
         * The number of pending responses (adds or removes) that we are waiting on.
         * We only consider targets active that have no pending responses.
         */
        this.Ai = 0, 
        /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */
        this.Ci = Cn(), 
        /** See public getters for explanations of these fields. */
        this.Pi = K.Mt, this.Vi = !1, 
        /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */
        this.ki = !0;
    }
    return Object.defineProperty(t.prototype, "_i", {
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */
        get: function() {
            return this.Vi;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "resumeToken", {
        /** The last resume token sent to us for this target. */
        get: function() {
            return this.Pi;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "Ni", {
        /** Whether this target has pending target adds or target removes. */
        get: function() {
            return 0 !== this.Ai;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "Oi", {
        /** Whether we have modified any state that should trigger a snapshot. */
        get: function() {
            return this.ki;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */
    t.prototype.Fi = function(t) {
        t.Lt() > 0 && (this.ki = !0, this.Pi = t);
    }, 
    /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */
    t.prototype.Ui = function() {
        var t = wn(), n = wn(), i = wn();
        return this.Ci.forEach((function(e, r) {
            switch (r) {
              case 0 /* Added */ :
                t = t.add(e);
                break;

              case 2 /* Modified */ :
                n = n.add(e);
                break;

              case 1 /* Removed */ :
                i = i.add(e);
                break;

              default:
                Gn("Encountered invalid change type: " + r);
            }
        })), new In(this.Pi, this.Vi, t, n, i);
    }, 
    /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */
    t.prototype.ji = function() {
        this.ki = !1, this.Ci = Cn();
    }, t.prototype.xi = function(t, n) {
        this.ki = !0, this.Ci = this.Ci.ut(t, n);
    }, t.prototype.Li = function(t) {
        this.ki = !0, this.Ci = this.Ci.remove(t);
    }, t.prototype.Mi = function() {
        this.Ai += 1;
    }, t.prototype.qi = function() {
        this.Ai -= 1;
    }, t.prototype.Bi = function() {
        this.ki = !0, this.Vi = !0;
    }, t;
}(), Sn = /** @class */ function() {
    function t(t) {
        this.Qi = t, 
        /** The internal state of all tracked targets. */
        this.Gi = new Map, 
        /** Keeps track of the documents to update since the last raised snapshot. */
        this.Wi = hn(), 
        /** A mapping of document keys to their set of target IDs. */
        this.zi = An(), 
        /**
         * A list of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */
        this.Ki = new B(Kn);
    }
    /**
     * Processes and adds the DocumentWatchChange to the current set of changes.
     */    return t.prototype.Ji = function(t) {
        for (var n = 0, i = t.Di; n < i.length; n++) {
            var e = i[n];
            t.Ri instanceof xt ? this.Hi(e, t.Ri) : t.Ri instanceof Lt && this.Yi(e, t.key, t.Ri);
        }
        for (var r = 0, u = t.removedTargetIds; r < u.length; r++) {
            e = u[r];
            this.Yi(e, t.key, t.Ri);
        }
    }, 
    /** Processes and adds the WatchTargetChange to the current set of changes. */
    t.prototype.Xi = function(t) {
        var n = this;
        this.$i(t, (function(i) {
            var e = n.Zi(i);
            switch (t.state) {
              case 0 /* NoChange */ :
                n.te(i) && e.Fi(t.resumeToken);
                break;

              case 1 /* Added */ :
                // We need to decrement the number of pending acks needed from watch
                // for this targetId.
                e.qi(), e.Ni || 
                // We have a freshly added target, so we need to reset any state
                // that we had previously. This can happen e.g. when remove and add
                // back a target for existence filter mismatches.
                e.ji(), e.Fi(t.resumeToken);
                break;

              case 2 /* Removed */ :
                // We need to keep track of removed targets to we can post-filter and
                // remove any target changes.
                // We need to decrement the number of pending acks needed from watch
                // for this targetId.
                e.qi(), e.Ni || n.removeTarget(i), Wn(!t.cause, "WatchChangeAggregator does not handle errored targets");
                break;

              case 3 /* Current */ :
                n.te(i) && (e.Bi(), e.Fi(t.resumeToken));
                break;

              case 4 /* Reset */ :
                n.te(i) && (
                // Reset the target and synthesizes removes for all existing
                // documents. The backend will re-add any documents that still
                // match the target before it sends the next global snapshot.
                n.ne(i), e.Fi(t.resumeToken));
                break;

              default:
                Gn("Unknown target watch change state: " + t.state);
            }
        }));
    }, 
    /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */
    t.prototype.$i = function(t, n) {
        t.targetIds.length > 0 ? t.targetIds.forEach(n) : this.Gi.forEach((function(t, i) {
            return n(i);
        }));
    }, 
    /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */
    t.prototype.ie = function(t) {
        var n = t.targetId, i = t.Si.count, e = this.ee(n);
        if (e) {
            var r = e.target;
            if (r.Tn()) if (0 === i) {
                // The existence filter told us the document does not exist. We deduce
                // that this document does not exist and apply a deleted document to
                // our updates. Without applying this deleted document there might be
                // another query that will raise this document as part of a snapshot
                // until it is resolved, essentially exposing inconsistency between
                // queries.
                var u = new j(r.path);
                this.Yi(n, u, new Lt(u, k.V()));
            } else Wn(1 === i, "Single document existence filter with count: " + i); else this.re(n) !== i && (
            // Existence filter mismatch: We reset the mapping and raise a new
            // snapshot with `isFromCache:true`.
            this.ne(n), this.Ki = this.Ki.add(n));
        }
    }, 
    /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */
    t.prototype.ue = function(t) {
        var n = this, i = new Map;
        this.Gi.forEach((function(e, r) {
            var u = n.ee(r);
            if (u) {
                if (e._i && u.target.Tn()) {
                    // Document queries for document that don't exist can produce an empty
                    // result set. To update our local cache, we synthesize a document
                    // delete if we have not previously received the document. This
                    // resolves the limbo state of the document, removing it from
                    // limboDocumentRefs.
                    // TODO(dimond): Ideally we would have an explicit lookup target
                    // instead resulting in an explicit delete message and we could
                    // remove this special logic.
                    var s = new j(u.target.path);
                    null !== n.Wi.get(s) || n.se(r, s) || n.Yi(r, s, new Lt(s, t));
                }
                e.Oi && (i.set(r, e.Ui()), e.ji());
            }
        }));
        var e = wn();
        // We extract the set of limbo-only document updates as the GC logic
        // special-cases documents that do not appear in the target cache.
        
        // TODO(gsoltis): Expand on this comment once GC is available in the JS
        // client.
                this.zi.forEach((function(t, i) {
            var r = !0;
            i.Nt((function(t) {
                var i = n.ee(t);
                return !i || 2 /* LimboResolution */ === i.ti || (r = !1, !1);
            })), r && (e = e.add(t));
        }));
        var r = new _n(t, i, this.Ki, this.Wi, e);
        return this.Wi = hn(), this.zi = An(), this.Ki = new B(Kn), r;
    }, 
    /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */
    // Visible for testing.
    t.prototype.Hi = function(t, n) {
        if (this.te(t)) {
            var i = this.se(t, n.key) ? 2 /* Modified */ : 0 /* Added */;
            this.Zi(t).xi(n.key, i), this.Wi = this.Wi.ut(n.key, n), this.zi = this.zi.ut(n.key, this.oe(n.key).add(t));
        }
    }, 
    /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */
    // Visible for testing.
    t.prototype.Yi = function(t, n, i) {
        if (this.te(t)) {
            var e = this.Zi(t);
            this.se(t, n) ? e.xi(n, 1 /* Removed */) : 
            // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            e.Li(n), this.zi = this.zi.ut(n, this.oe(n).delete(t)), i && (this.Wi = this.Wi.ut(n, i));
        }
    }, t.prototype.removeTarget = function(t) {
        this.Gi.delete(t);
    }, 
    /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */
    t.prototype.re = function(t) {
        var n = this.Zi(t).Ui();
        return this.Qi.he(t).size + n.Ii.size - n.Ei.size;
    }, 
    /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */
    t.prototype.Mi = function(t) {
        this.Zi(t).Mi();
    }, t.prototype.Zi = function(t) {
        var n = this.Gi.get(t);
        return n || (n = new Rn, this.Gi.set(t, n)), n;
    }, t.prototype.oe = function(t) {
        var n = this.zi.get(t);
        return n || (n = new B(Kn), this.zi = this.zi.ut(t, n)), n;
    }, 
    /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */
    t.prototype.te = function(t) {
        var n = null !== this.ee(t);
        return n || qn("WatchChangeAggregator", "Detected inactive target", t), n;
    }, 
    /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */
    t.prototype.ee = function(t) {
        var n = this.Gi.get(t);
        return n && n.Ni ? null : this.Qi.ce(t);
    }, 
    /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */
    t.prototype.ne = function(t) {
        var n = this;
        Wn(!this.Gi.get(t).Ni, "Should only reset active targets"), this.Gi.set(t, new Rn), 
        this.Qi.he(t).forEach((function(i) {
            n.Yi(t, i, /*updatedDocument=*/ null);
        }));
    }, 
    /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */
    t.prototype.se = function(t, n) {
        return this.Qi.he(t).has(n);
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */ function An() {
    return new x(j.F);
}

function Cn() {
    return new x(j.F);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Pn, Vn, kn = ((Pn = {})[Xt.ASCENDING.name] = "ASCENDING", Pn[Xt.DESCENDING.name] = "DESCENDING", 
Pn), Nn = ((Vn = {})[Gt.LESS_THAN.name] = "LESS_THAN", Vn[Gt.LESS_THAN_OR_EQUAL.name] = "LESS_THAN_OR_EQUAL", 
Vn[Gt.GREATER_THAN.name] = "GREATER_THAN", Vn[Gt.GREATER_THAN_OR_EQUAL.name] = "GREATER_THAN_OR_EQUAL", 
Vn[Gt.EQUAL.name] = "EQUAL", Vn[Gt.ARRAY_CONTAINS.name] = "ARRAY_CONTAINS", Vn[Gt.IN.name] = "IN", 
Vn[Gt.ARRAY_CONTAINS_ANY.name] = "ARRAY_CONTAINS_ANY", Vn);

function On(t, n) {
    Wn(!J(t), n + " is missing");
}

/**
 * Generates JsonObject values for the Datastore API suitable for sending to
 * either GRPC stub methods or via the JSON/HTTP REST API.
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */ var Fn = /** @class */ function() {
    function t(t, n) {
        this.ae = t, this.options = n;
    }
    return t.prototype.fe = function(t) {
        var n = void 0 === t.code ? T.UNKNOWN : sn(t.code);
        return new E(n, t.message || "");
    }, 
    /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */
    t.prototype.le = function(t) {
        return this.options.de || J(t) ? t : {
            value: t
        };
    }, 
    /**
     * Returns a number (or null) from a google.protobuf.Int32Value proto.
     */
    t.prototype.ve = function(t) {
        var n;
        return J(n = "object" == typeof t ? t.value : t) ? null : n;
    }, 
    /**
     * Returns an IntegerValue for `value`.
     */
    t.prototype.Wt = function(t) {
        return {
            integerValue: "" + t
        };
    }, 
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */
    t.prototype.zt = function(t) {
        if (this.options.de) {
            if (isNaN(t)) return {
                doubleValue: "NaN"
            };
            if (t === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (t === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: H(t) ? "-0" : t
        };
    }, 
    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */
    t.prototype.we = function(t) {
        return Y(t) ? this.Wt(t) : this.zt(t);
    }, 
    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    t.prototype.O = function(t) {
        return this.options.de ? new Date(1e3 * t.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + t.nanoseconds).slice(-9) + "Z" : {
            seconds: "" + t.seconds,
            nanos: t.nanoseconds
        };
    }, t.prototype.P = function(t) {
        var n = ot(t);
        return new V(n.seconds, n.nanos);
    }, 
    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    t.prototype.me = function(t) {
        return this.options.de ? t.toBase64() : t.toUint8Array();
    }, 
    /**
     * Returns a ByteString based on the proto string value.
     */
    t.prototype.pe = function(t) {
        return this.options.de ? (Wn(void 0 === t || "string" == typeof t, "value must be undefined or a string when using proto3 Json"), 
        K.fromBase64String(t || "")) : (Wn(void 0 === t || t instanceof Uint8Array, "value must be undefined or Uint8Array"), 
        K.fromUint8Array(t || new Uint8Array));
    }, t.prototype.toVersion = function(t) {
        return this.O(t.O());
    }, t.prototype.fromVersion = function(t) {
        return Wn(!!t, "Trying to deserialize version that isn't set"), k.P(this.P(t));
    }, t.prototype.be = function(t, n) {
        return this.ge(n || this.ae).child("documents").child(t).J();
    }, t.prototype.ye = function(t) {
        var n = O.H(t);
        return Wn(Un(n), "Tried to deserialize invalid key " + n.toString()), n;
    }, t.prototype._e = function(t) {
        return this.be(t.path);
    }, t.prototype.it = function(t) {
        var n = this.ye(t);
        return Wn(n.get(1) === this.ae.projectId, "Tried to deserialize key from different project: " + n.get(1) + " vs " + this.ae.projectId), 
        Wn(!n.get(3) && !this.ae.database || n.get(3) === this.ae.database, "Tried to deserialize key from different database: " + n.get(3) + " vs " + this.ae.database), 
        new j(this.Ie(n));
    }, t.prototype.Te = function(t) {
        return this.be(t);
    }, t.prototype.Ee = function(t) {
        var n = this.ye(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
                return 4 === n.length ? O.Y : this.Ie(n);
    }, Object.defineProperty(t.prototype, "De", {
        get: function() {
            return new O([ "projects", this.ae.projectId, "databases", this.ae.database ]).J();
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.ge = function(t) {
        return new O([ "projects", t.projectId, "databases", t.database ]);
    }, t.prototype.Ie = function(t) {
        return Wn(t.length > 4 && "documents" === t.get(4), "tried to deserialize invalid key " + t.toString()), 
        t.j(5);
    }, 
    /** Creates an api.Document from key and fields (but no create/update time) */
    t.prototype.Re = function(t, n) {
        return {
            name: this._e(t),
            fields: n.proto.mapValue.fields
        };
    }, t.prototype.Se = function(t) {
        return Wn(!t.nn, "Can't serialize documents with mutations."), {
            name: this._e(t.key),
            fields: t.yn().mapValue.fields,
            updateTime: this.O(t.version.O())
        };
    }, t.prototype.Ae = function(t, n) {
        var i = this.it(t.name), e = this.fromVersion(t.updateTime), r = new Ft({
            mapValue: {
                fields: t.fields
            }
        });
        return new xt(i, e, r, {
            hasCommittedMutations: !!n
        });
    }, t.prototype.Ce = function(t) {
        Wn(!!t.found, "Tried to deserialize a found document from a missing document."), 
        On(t.found.name, "doc.found.name"), On(t.found.updateTime, "doc.found.updateTime");
        var n = this.it(t.found.name), i = this.fromVersion(t.found.updateTime), e = new Ft({
            mapValue: {
                fields: t.found.fields
            }
        });
        return new xt(n, i, e, {});
    }, t.prototype.Pe = function(t) {
        Wn(!!t.missing, "Tried to deserialize a missing document from a found document."), 
        Wn(!!t.readTime, "Tried to deserialize a missing document without a read time.");
        var n = this.it(t.missing), i = this.fromVersion(t.readTime);
        return new Lt(n, i);
    }, t.prototype.Ve = function(t) {
        return "found" in t ? this.Ce(t) : "missing" in t ? this.Pe(t) : Gn("invalid batch get response: " + JSON.stringify(t));
    }, t.prototype.ke = function(t) {
        var n;
        if ("targetChange" in t) {
            On(t.targetChange, "targetChange");
            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
            // if unset
            var i = this.Ne(t.targetChange.targetChangeType || "NO_CHANGE"), e = t.targetChange.targetIds || [], r = this.pe(t.targetChange.resumeToken), u = t.targetChange.cause, s = u && this.fe(u);
            n = new Dn(i, e, r, s || null);
        } else if ("documentChange" in t) {
            On(t.documentChange, "documentChange");
            var o = t.documentChange;
            On(o.document, "documentChange.name"), On(o.document.name, "documentChange.document.name"), 
            On(o.document.updateTime, "documentChange.document.updateTime");
            var h = this.it(o.document.name), c = this.fromVersion(o.document.updateTime), a = new Ft({
                mapValue: {
                    fields: o.document.fields
                }
            }), f = new xt(h, c, a, {}), l = o.targetIds || [], d = o.removedTargetIds || [];
            n = new Tn(l, d, f.key, f);
        } else if ("documentDelete" in t) {
            On(t.documentDelete, "documentDelete");
            var v = t.documentDelete;
            On(v.document, "documentDelete.document");
            h = this.it(v.document), c = v.readTime ? this.fromVersion(v.readTime) : k.V(), 
            f = new Lt(h, c), d = v.removedTargetIds || [];
            n = new Tn([], d, f.key, f);
        } else if ("documentRemove" in t) {
            On(t.documentRemove, "documentRemove");
            var w = t.documentRemove;
            On(w.document, "documentRemove");
            h = this.it(w.document), d = w.removedTargetIds || [];
            n = new Tn([], d, h, null);
        } else {
            if (!("filter" in t)) return Gn("Unknown change type " + JSON.stringify(t));
            // TODO(dimond): implement existence filter parsing with strategy.
            On(t.filter, "filter");
            var m = t.filter;
            On(m.targetId, "filter.targetId");
            var p = m.count || 0, b = new rn(p), g = m.targetId;
            n = new En(g, b);
        }
        return n;
    }, t.prototype.Ne = function(t) {
        return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : Gn("Got unexpected TargetChange.state: " + t);
    }, t.prototype.Oe = function(t) {
        // We have only reached a consistent snapshot for the entire stream if there
        // is a read_time set and it applies to all targets (i.e. the list of
        // targets is empty). The backend is guaranteed to send such responses.
        if (!("targetChange" in t)) return k.MIN;
        var n = t.targetChange;
        return n.targetIds && n.targetIds.length ? k.MIN : n.readTime ? this.fromVersion(n.readTime) : k.MIN;
    }, t.prototype.Fe = function(t) {
        var n, i = this;
        if (t instanceof Pt) n = {
            update: this.Re(t.key, t.value)
        }; else if (t instanceof Nt) n = {
            delete: this._e(t.key)
        }; else if (t instanceof Vt) n = {
            update: this.Re(t.key, t.data),
            updateMask: this.Ue(t.en)
        }; else if (t instanceof kt) n = {
            transform: {
                document: this._e(t.key),
                fieldTransforms: t.fieldTransforms.map((function(t) {
                    return i.je(t);
                }))
            }
        }; else {
            if (!(t instanceof Ot)) return Gn("Unknown mutation type " + t.type);
            n = {
                verify: this._e(t.key)
            };
        }
        return t.tn.Yt || (n.currentDocument = this.xe(t.tn)), n;
    }, t.prototype.Le = function(t) {
        var n = this, i = t.currentDocument ? this.Me(t.currentDocument) : At.NONE;
        if (t.update) {
            On(t.update.name, "name");
            var e = this.it(t.update.name), r = new Ft({
                mapValue: {
                    fields: t.update.fields
                }
            });
            if (t.updateMask) {
                var u = this.qe(t.updateMask);
                return new Vt(e, r, u, i);
            }
            return new Pt(e, r, i);
        }
        if (t.delete) {
            e = this.it(t.delete);
            return new Nt(e, i);
        }
        if (t.transform) {
            e = this.it(t.transform.document);
            var s = t.transform.fieldTransforms.map((function(t) {
                return n.Be(t);
            }));
            return Wn(!0 === i.exists, 'Transforms only support precondition "exists == true"'), 
            new kt(e, s);
        }
        if (t.verify) {
            e = this.it(t.verify);
            return new Ot(e, i);
        }
        return Gn("unknown mutation proto: " + JSON.stringify(t));
    }, t.prototype.xe = function(t) {
        return Wn(!t.Yt, "Can't serialize an empty precondition"), void 0 !== t.updateTime ? {
            updateTime: this.toVersion(t.updateTime)
        } : void 0 !== t.exists ? {
            exists: t.exists
        } : Gn("Unknown precondition");
    }, t.prototype.Me = function(t) {
        return void 0 !== t.updateTime ? At.updateTime(this.fromVersion(t.updateTime)) : void 0 !== t.exists ? At.exists(t.exists) : At.NONE;
    }, t.prototype.Qe = function(t, n) {
        // NOTE: Deletes don't have an updateTime.
        var i = t.updateTime ? this.fromVersion(t.updateTime) : this.fromVersion(n);
        i.isEqual(k.MIN) && (
        // The Firestore Emulator currently returns an update time of 0 for
        // deletes of non-existing documents (rather than null). This breaks the
        // test "get deleted doc while offline with source=cache" as NoDocuments
        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
        // TODO(#2149): Remove this when Emulator is fixed
        i = this.fromVersion(n));
        var e = null;
        return t.transformResults && t.transformResults.length > 0 && (e = t.transformResults), 
        new St(i, e);
    }, t.prototype.Ge = function(t, n) {
        var i = this;
        return t && t.length > 0 ? (Wn(void 0 !== n, "Received a write result without a commit time"), 
        t.map((function(t) {
            return i.Qe(t, n);
        }))) : [];
    }, t.prototype.je = function(t) {
        var n = t.transform;
        if (n instanceof bt) return {
            fieldPath: t.field.J(),
            setToServerValue: "REQUEST_TIME"
        };
        if (n instanceof gt) return {
            fieldPath: t.field.J(),
            appendMissingElements: {
                values: n.elements
            }
        };
        if (n instanceof yt) return {
            fieldPath: t.field.J(),
            removeAllFromArray: {
                values: n.elements
            }
        };
        if (n instanceof _t) return {
            fieldPath: t.field.J(),
            increment: n.Gt
        };
        throw Gn("Unknown transform: " + t.transform);
    }, t.prototype.Be = function(t) {
        var n = null;
        if ("setToServerValue" in t) Wn("REQUEST_TIME" === t.setToServerValue, "Unknown server value transform proto: " + JSON.stringify(t)), 
        n = bt.instance; else if ("appendMissingElements" in t) {
            var i = t.appendMissingElements.values || [];
            n = new gt(i);
        } else if ("removeAllFromArray" in t) {
            i = t.removeAllFromArray.values || [];
            n = new yt(i);
        } else "increment" in t ? n = new _t(this, t.increment) : Gn("Unknown transform proto: " + JSON.stringify(t));
        var e = U.tt(t.fieldPath);
        return new Rt(e, n);
    }, t.prototype.We = function(t) {
        return {
            documents: [ this.Te(t.path) ]
        };
    }, t.prototype.ze = function(t) {
        var n = t.documents.length;
        Wn(1 === n, "DocumentsTarget contained other than 1 document: " + n);
        var i = t.documents[0];
        return Bt.Cn(this.Ee(i)).qn();
    }, t.prototype.Ke = function(t) {
        // Dissect the path into parent, collectionId, and optional key filter.
        var n = {
            structuredQuery: {}
        }, i = t.path;
        null !== t.collectionGroup ? (Wn(i.length % 2 == 0, "Collection Group queries should be within a document path or root."), 
        n.parent = this.Te(i), n.structuredQuery.from = [ {
            collectionId: t.collectionGroup,
            allDescendants: !0
        } ]) : (Wn(i.length % 2 != 0, "Document queries with filters are not supported."), 
        n.parent = this.Te(i.L()), n.structuredQuery.from = [ {
            collectionId: i.B()
        } ]);
        var e = this.Je(t.filters);
        e && (n.structuredQuery.where = e);
        var r = this.He(t.orderBy);
        r && (n.structuredQuery.orderBy = r);
        var u = this.le(t.limit);
        return null !== u && (n.structuredQuery.limit = u), t.startAt && (n.structuredQuery.startAt = this.Ye(t.startAt)), 
        t.endAt && (n.structuredQuery.endAt = this.Ye(t.endAt)), n;
    }, t.prototype.Xe = function(t) {
        var n = this.Ee(t.parent), i = t.structuredQuery, e = i.from ? i.from.length : 0, r = null;
        if (e > 0) {
            Wn(1 === e, "StructuredQuery.from with more than one collection is not supported.");
            var u = i.from[0];
            u.allDescendants ? r = u.collectionId : n = n.child(u.collectionId);
        }
        var s = [];
        i.where && (s = this.$e(i.where));
        var o = [];
        i.orderBy && (o = this.Ze(i.orderBy));
        var h = null;
        i.limit && (h = this.ve(i.limit));
        var c = null;
        i.startAt && (c = this.tr(i.startAt));
        var a = null;
        return i.endAt && (a = this.tr(i.endAt)), new Bt(n, r, o, s, h, "F" /* First */ , c, a).qn();
    }, t.prototype.nr = function(t) {
        var n = this.ir(t.ti);
        return null == n ? null : {
            "goog-listen-tags": n
        };
    }, t.prototype.ir = function(t) {
        switch (t) {
          case 0 /* Listen */ :
            return null;

          case 1 /* ExistenceFilterMismatch */ :
            return "existence-filter-mismatch";

          case 2 /* LimboResolution */ :
            return "limbo-document";

          default:
            return Gn("Unrecognized query purpose: " + t);
        }
    }, t.prototype.qn = function(t) {
        var n, i = t.target;
        return (n = i.Tn() ? {
            documents: this.We(i)
        } : {
            query: this.Ke(i)
        }).targetId = t.targetId, t.resumeToken.Lt() > 0 && (n.resumeToken = this.me(t.resumeToken)), 
        n;
    }, t.prototype.Je = function(t) {
        var n = this;
        if (0 !== t.length) {
            var i = t.map((function(t) {
                return t instanceof Wt ? n.er(t) : Gn("Unrecognized filter: " + JSON.stringify(t));
            }));
            return 1 === i.length ? i[0] : {
                compositeFilter: {
                    op: "AND",
                    filters: i
                }
            };
        }
    }, t.prototype.$e = function(t) {
        var n = this;
        return t ? void 0 !== t.unaryFilter ? [ this.rr(t) ] : void 0 !== t.fieldFilter ? [ this.ur(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((function(t) {
            return n.$e(t);
        })).reduce((function(t, n) {
            return t.concat(n);
        })) : Gn("Unknown filter: " + JSON.stringify(t)) : [];
    }, t.prototype.He = function(t) {
        var n = this;
        if (0 !== t.length) return t.map((function(t) {
            return n.sr(t);
        }));
    }, t.prototype.Ze = function(t) {
        var n = this;
        return t.map((function(t) {
            return n.or(t);
        }));
    }, t.prototype.Ye = function(t) {
        return {
            before: t.before,
            values: t.position
        };
    }, t.prototype.tr = function(t) {
        var n = !!t.before, i = t.values || [];
        return new $t(i, n);
    }, 
    // visible for testing
    t.prototype.hr = function(t) {
        return kn[t.name];
    }, 
    // visible for testing
    t.prototype.cr = function(t) {
        switch (t) {
          case "ASCENDING":
            return Xt.ASCENDING;

          case "DESCENDING":
            return Xt.DESCENDING;

          default:
            return;
        }
    }, 
    // visible for testing
    t.prototype.ar = function(t) {
        return Nn[t.name];
    }, t.prototype.lr = function(t) {
        switch (t) {
          case "EQUAL":
            return Gt.EQUAL;

          case "GREATER_THAN":
            return Gt.GREATER_THAN;

          case "GREATER_THAN_OR_EQUAL":
            return Gt.GREATER_THAN_OR_EQUAL;

          case "LESS_THAN":
            return Gt.LESS_THAN;

          case "LESS_THAN_OR_EQUAL":
            return Gt.LESS_THAN_OR_EQUAL;

          case "ARRAY_CONTAINS":
            return Gt.ARRAY_CONTAINS;

          case "IN":
            return Gt.IN;

          case "ARRAY_CONTAINS_ANY":
            return Gt.ARRAY_CONTAINS_ANY;

          case "OPERATOR_UNSPECIFIED":
            return Gn("Unspecified operator");

          default:
            return Gn("Unknown operator");
        }
    }, t.prototype.dr = function(t) {
        return {
            fieldPath: t.J()
        };
    }, t.prototype.vr = function(t) {
        return U.tt(t.fieldPath);
    }, 
    // visible for testing
    t.prototype.sr = function(t) {
        return {
            field: this.dr(t.field),
            direction: this.hr(t.dir)
        };
    }, t.prototype.or = function(t) {
        return new Zt(this.vr(t.field), this.cr(t.direction));
    }, t.prototype.ur = function(t) {
        return Wt.create(this.vr(t.fieldFilter.field), this.lr(t.fieldFilter.op), t.fieldFilter.value);
    }, 
    // visible for testing
    t.prototype.er = function(t) {
        if (t.op === Gt.EQUAL) {
            if (mt(t.value)) return {
                unaryFilter: {
                    field: this.dr(t.field),
                    op: "IS_NAN"
                }
            };
            if (wt(t.value)) return {
                unaryFilter: {
                    field: this.dr(t.field),
                    op: "IS_NULL"
                }
            };
        }
        return {
            fieldFilter: {
                field: this.dr(t.field),
                op: this.ar(t.op),
                value: t.value
            }
        };
    }, t.prototype.rr = function(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            var n = this.vr(t.unaryFilter.field);
            return Wt.create(n, Gt.EQUAL, {
                doubleValue: NaN
            });

          case "IS_NULL":
            var i = this.vr(t.unaryFilter.field);
            return Wt.create(i, Gt.EQUAL, {
                nullValue: "NULL_VALUE"
            });

          case "OPERATOR_UNSPECIFIED":
            return Gn("Unspecified filter");

          default:
            return Gn("Unknown filter");
        }
    }, t.prototype.Ue = function(t) {
        var n = [];
        return t.fields.forEach((function(t) {
            return n.push(t.J());
        })), {
            fieldPaths: n
        };
    }, t.prototype.qe = function(t) {
        var n = (t.fieldPaths || []).map((function(t) {
            return U.tt(t);
        }));
        return Dt.Jt(n);
    }, t;
}();

function Un(t) {
    // Resource names have at least 4 components (project ID, database ID)
    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provides singleton helpers where setup code can inject a platform at runtime.
 * setPlatform needs to be set before Firestore is used and must be set exactly
 * once.
 */ var jn = /** @class */ function() {
    function t() {}
    return t.wr = function(n) {
        t.platform && Gn("Platform already defined"), t.platform = n;
    }, t.xt = function() {
        return t.platform || Gn("Platform not set"), t.platform;
    }, t;
}(), xn = new logger.Logger("@firebase/firestore");

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Helper methods are needed because variables can't be exported as read/write
function Ln() {
    return xn.logLevel;
}

function Mn(t) {
    xn.logLevel = t;
}

function qn(t) {
    for (var n = [], i = 1; i < arguments.length; i++) n[i - 1] = arguments[i];
    if (xn.logLevel <= logger.LogLevel.DEBUG) {
        var r = n.map(Qn);
        xn.error.apply(xn, tslib.__spreadArrays([ "Firestore (" + _ + "): " + t ], r));
    }
}

function Bn(t) {
    for (var n = [], i = 1; i < arguments.length; i++) n[i - 1] = arguments[i];
    if (xn.logLevel <= logger.LogLevel.ERROR) {
        var r = n.map(Qn);
        xn.error.apply(xn, tslib.__spreadArrays([ "Firestore (" + _ + "): " + t ], r));
    }
}

/**
 * Converts an additional log parameter to a string representation.
 */ function Qn(t) {
    if ("string" == typeof t) return t;
    var n = jn.xt();
    try {
        return n.mr(t);
    } catch (n) {
        // Converting to JSON failed, just log the object directly
        return t;
    }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Unconditionally fails, throwing an Error with the given message.
 *
 * Returns any so it can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */ function Gn(t) {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    var n = "FIRESTORE (" + _ + ") INTERNAL ASSERTION FAILED: " + t;
    // NOTE: We don't use FirestoreError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw Bn(n), new Error(n);
}

/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 */ function Wn(t, n) {
    t || Gn(n);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var zn = /** @class */ function() {
    function t() {}
    return t.pr = function() {
        for (
        // Alphanumeric characters
        var t = ""; t.length < 20; ) for (var n = jn.xt().randomBytes(40), i = 0, e = Array.from(n); i < e.length; i++) {
            var r = e[i];
            // Length of `chars` is 62. We only take bytes between 0 and 62*4-1
            // (both inclusive). The value is then evenly mapped to indices of `char`
            // via a modulo operation.
                        t.length < 20 && r <= 247 && (t += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(r % 62));
        }
        return Wn(20 === t.length, "Invalid auto ID: " + t), t;
    }, t;
}();

function Kn(t, n) {
    return t < n ? -1 : t > n ? 1 : 0;
}

function Jn(t, n, i) {
    return t.length === n.length && t.every((function(t, e) {
        return i(t, n[e]);
    }));
}

/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */ function Hn(t) {
    // Return the input string, with an additional NUL byte appended.
    return t + "\0";
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Yn = 
/**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId The database to use.
     * @param persistenceKey A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host The Firestore backend host to connect to.
     * @param ssl Whether to use SSL when connecting.
     * @param forceLongPolling Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     */
function(t, n, i, e, r) {
    this.ae = t, this.persistenceKey = n, this.host = i, this.ssl = e, this.forceLongPolling = r;
}, Xn = /** @class */ function() {
    function t(t, n) {
        this.projectId = t, this.database = n || "(default)";
    }
    return Object.defineProperty(t.prototype, "br", {
        get: function() {
            return "(default)" === this.database;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(n) {
        return n instanceof t && n.projectId === this.projectId && n.database === this.database;
    }, t.prototype.k = function(t) {
        return Kn(this.projectId, t.projectId) || Kn(this.database, t.database);
    }, t;
}(), $n = /** @class */ function() {
    /**
     * @param batchId The unique ID of this mutation batch.
     * @param localWriteTime The original write time of this mutation.
     * @param baseMutations Mutations that are used to populate the base
     * values when this mutation is applied locally. This can be used to locally
     * overwrite values that are persisted in the remote document cache. Base
     * mutations are never sent to the backend.
     * @param mutations The user-provided mutations in this mutation batch.
     * User-provided mutations are applied both locally and remotely on the
     * backend.
     */
    function t(t, n, i, e) {
        this.batchId = t, this.gr = n, this.baseMutations = i, this.mutations = e, Wn(e.length > 0, "Cannot create an empty mutation batch");
    }
    /**
     * Applies all the mutations in this MutationBatch to the specified document
     * to create a new remote document
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     * @param batchResult The result of applying the MutationBatch to the
     * backend.
     */    return t.prototype.Bt = function(t, n, i) {
        n && Wn(n.key.isEqual(t), "applyToRemoteDocument: key " + t + " should match maybeDoc key\n        " + n.key);
        var e = i.yr;
        Wn(e.length === this.mutations.length, "Mismatch between mutations length\n      (" + this.mutations.length + ") and mutation results length\n      (" + e.length + ").");
        for (var r = 0; r < this.mutations.length; r++) {
            var u = this.mutations[r];
            if (u.key.isEqual(t)) {
                var s = e[r];
                n = u.Bt(n, s);
            }
        }
        return n;
    }, 
    /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     */
    t.prototype.qt = function(t, n) {
        n && Wn(n.key.isEqual(t), "applyToLocalDocument: key " + t + " should match maybeDoc key\n        " + n.key);
        // First, apply the base state. This allows us to apply non-idempotent
        // transform against a consistent set of values.
                for (var i = 0, e = this.baseMutations; i < e.length; i++) {
            (o = e[i]).key.isEqual(t) && (n = o.qt(n, n, this.gr));
        }
        // Second, apply all user-provided mutations.
        for (var r = n, u = 0, s = this.mutations; u < s.length; u++) {
            var o;
            (o = s[u]).key.isEqual(t) && (n = o.qt(n, r, this.gr));
        }
        return n;
    }, 
    /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */
    t.prototype._r = function(t) {
        var n = this, i = t;
        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
        // directly (as done in `applyToLocalView()`), we can reduce the complexity
        // to O(n).
                return this.mutations.forEach((function(e) {
            var r = n.qt(e.key, t.get(e.key));
            r && (i = i.ut(e.key, r));
        })), i;
    }, t.prototype.keys = function() {
        return this.mutations.reduce((function(t, n) {
            return t.add(n.key);
        }), wn());
    }, t.prototype.isEqual = function(t) {
        return this.batchId === t.batchId && Jn(this.mutations, t.mutations, (function(t, n) {
            return t.isEqual(n);
        })) && Jn(this.baseMutations, t.baseMutations, (function(t, n) {
            return t.isEqual(n);
        }));
    }, t;
}(), Zn = /** @class */ function() {
    function t(t, n, i, e, 
    /**
     * A pre-computed mapping from each mutated document to the resulting
     * version.
     */
    r) {
        this.batch = t, this.Ir = n, this.yr = i, this.streamToken = e, this.Tr = r;
    }
    /**
     * Creates a new MutationBatchResult for the given batch and results. There
     * must be one result for each mutation in the batch. This static factory
     * caches a document=>version mapping (docVersions).
     */    return t.from = function(n, i, e, r) {
        Wn(n.mutations.length === e.length, "Mutations sent " + n.mutations.length + " must equal results received " + e.length);
        for (var u = dn(), s = n.mutations, o = 0; o < s.length; o++) u = u.ut(s[o].key, e[o].version);
        return new t(n, i, e, r, u);
    }, t;
}(), ti = /** @class */ function() {
    function t(t) {
        this.Er = t, 
        /**
         * The inner map for a key -> value pair. Due to the possibility of
         * collisions we keep a list of entries that we do a linear search through
         * to find an actual match. Note that collisions should be rare, so we still
         * expect near constant time lookups in practice.
         */
        this.Dr = {};
    }
    /** Get a value for this key, or undefined if it does not exist. */    return t.prototype.get = function(t) {
        var n = this.Er(t), i = this.Dr[n];
        if (void 0 !== i) for (var e = 0, r = i; e < r.length; e++) {
            var u = r[e], s = u[0], o = u[1];
            if (s.isEqual(t)) return o;
        }
    }, t.prototype.has = function(t) {
        return void 0 !== this.get(t);
    }, 
    /** Put this key and value in the map. */
    t.prototype.set = function(t, n) {
        var i = this.Er(t), e = this.Dr[i];
        if (void 0 !== e) {
            for (var r = 0; r < e.length; r++) if (e[r][0].isEqual(t)) return void (e[r] = [ t, n ]);
            e.push([ t, n ]);
        } else this.Dr[i] = [ [ t, n ] ];
    }, 
    /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */
    t.prototype.delete = function(t) {
        var n = this.Er(t), i = this.Dr[n];
        if (void 0 === i) return !1;
        for (var e = 0; e < i.length; e++) if (i[e][0].isEqual(t)) return 1 === i.length ? delete this.Dr[n] : i.splice(e, 1), 
        !0;
        return !1;
    }, t.prototype.forEach = function(t) {
        W(this.Dr, (function(n, i) {
            for (var e = 0, r = i; e < r.length; e++) {
                var u = r[e], s = u[0], o = u[1];
                t(s, o);
            }
        }));
    }, t.prototype.M = function() {
        return z(this.Dr);
    }, t;
}(), ni = /** @class */ function() {
    function t(t, n, i, e) {
        this.targetId = t, this.fromCache = n, this.Rr = i, this.Sr = e;
    }
    return t.Ar = function(n, i) {
        for (var e = wn(), r = wn(), u = 0, s = i.docChanges; u < s.length; u++) {
            var o = s[u];
            switch (o.type) {
              case 0 /* Added */ :
                e = e.add(o.doc.key);
                break;

              case 1 /* Removed */ :
                r = r.add(o.doc.key);
 // do nothing
                        }
        }
        return new t(n, i.fromCache, e, r);
    }, t;
}(), ii = /** @class */ function() {
    function t(t, n) {
        var i = this;
        this.previousValue = t, n && (n.Cr = function(t) {
            return i.Pr(t);
        }, this.Vr = function(t) {
            return n.kr(t);
        });
    }
    return t.prototype.Pr = function(t) {
        return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
    }, t.prototype.next = function() {
        var t = ++this.previousValue;
        return this.Vr && this.Vr(t), t;
    }, t.Nr = -1, t;
}(), ei = function() {
    var t = this;
    this.promise = new Promise((function(n, i) {
        t.resolve = n, t.reject = i;
    }));
}, ri = /** @class */ function() {
    function t(t, n, i, e, r) {
        this.Or = t, this.Fr = n, this.Ur = i, this.op = e, this.jr = r, this.xr = new ei, 
        this.then = this.xr.promise.then.bind(this.xr.promise), this.catch = this.xr.promise.catch.bind(this.xr.promise), 
        // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.xr.promise.catch((function(t) {}));
    }
    /**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue The queue to schedule the operation on.
     * @param id A Timer ID identifying the type of operation this is.
     * @param delayMs The delay (ms) before the operation should be scheduled.
     * @param op The operation to run.
     * @param removalCallback A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */    return t.Lr = function(n, i, e, r, u) {
        var s = new t(n, i, Date.now() + e, r, u);
        return s.start(e), s;
    }, 
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */
    t.prototype.start = function(t) {
        var n = this;
        this.Mr = setTimeout((function() {
            return n.qr();
        }), t);
    }, 
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */
    t.prototype.Br = function() {
        return this.qr();
    }, 
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */
    t.prototype.cancel = function(t) {
        null !== this.Mr && (this.clearTimeout(), this.xr.reject(new E(T.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
    }, t.prototype.qr = function() {
        var t = this;
        this.Or.Qr((function() {
            return null !== t.Mr ? (t.clearTimeout(), t.op().then((function(n) {
                return t.xr.resolve(n);
            }))) : Promise.resolve();
        }));
    }, t.prototype.clearTimeout = function() {
        null !== this.Mr && (this.jr(this), clearTimeout(this.Mr), this.Mr = null);
    }, t;
}(), ui = /** @class */ function() {
    function t() {
        // The last promise in the queue.
        this.Gr = Promise.resolve(), 
        // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.Wr = !1, 
        // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.zr = [], 
        // visible for testing
        this.Kr = null, 
        // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.Jr = !1, 
        // List of TimerIds to fast-forward delays for.
        this.Hr = [];
    }
    return Object.defineProperty(t.prototype, "Yr", {
        // Is this AsyncQueue being shut down? If true, this instance will not enqueue
        // any new operations, Promises from enqueue requests will not resolve.
        get: function() {
            return this.Wr;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */
    t.prototype.Qr = function(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.enqueue(t);
    }, 
    /**
     * Regardless if the queue has initialized shutdown, adds a new operation to the
     * queue without waiting for it to complete (i.e. we ignore the Promise result).
     */
    t.prototype.Xr = function(t) {
        this.$r(), 
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.Zr(t);
    }, 
    /**
     * Regardless if the queue has initialized shutdown, adds a new operation to the
     * queue.
     */
    t.prototype.tu = function(t) {
        return this.$r(), this.Zr(t);
    }, 
    /**
     * Adds a new operation to the queue and initialize the shut down of this queue.
     * Returns a promise that will be resolved when the promise returned by the new
     * operation is (with its value).
     * Once this method is called, the only possible way to request running an operation
     * is through `enqueueAndForgetEvenAfterShutdown`.
     */
    t.prototype.nu = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return this.$r(), this.Wr ? [ 3 /*break*/ , 2 ] : (this.Wr = !0, [ 4 /*yield*/ , this.tu(t) ]);

                  case 1:
                    n.sent(), n.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Adds a new operation to the queue. Returns a promise that will be resolved
     * when the promise returned by the new operation is (with its value).
     */
    t.prototype.enqueue = function(t) {
        return this.$r(), this.Wr ? new Promise((function(t) {})) : this.Zr(t);
    }, t.prototype.Zr = function(t) {
        var n = this, i = this.Gr.then((function() {
            return n.Jr = !0, t().catch((function(t) {
                n.Kr = t, n.Jr = !1;
                var i = t.stack || t.message || "";
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw Bn("INTERNAL UNHANDLED ERROR: ", i), 
                // Escape the promise chain and throw the error globally so that
                // e.g. any global crash reporting library detects and reports it.
                // (but not for simulated errors in our tests since this breaks mocha)
                i.indexOf("Firestore Test Simulated Error") < 0 && setTimeout((function() {
                    throw t;
                }), 0), t;
            })).then((function(t) {
                return n.Jr = !1, t;
            }));
        }));
        return this.Gr = i, i;
    }, 
    /**
     * Schedules an operation to be queued on the AsyncQueue once the specified
     * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel
     * the operation prior to its running.
     */
    t.prototype.iu = function(t, n, i) {
        var e = this;
        this.$r(), Wn(n >= 0, "Attempted to schedule an operation with a negative delay of " + n), 
        // Fast-forward delays for timerIds that have been overriden.
        this.Hr.indexOf(t) > -1 && (n = 0);
        var r = ri.Lr(this, t, n, i, (function(t) {
            return e.eu(t);
        }));
        return this.zr.push(r), r;
    }, t.prototype.$r = function() {
        this.Kr && Gn("AsyncQueue is already failed: " + (this.Kr.stack || this.Kr.message));
    }, 
    /**
     * Verifies there's an operation currently in-progress on the AsyncQueue.
     * Unfortunately we can't verify that the running code is in the promise chain
     * of that operation, so this isn't a foolproof check, but it should be enough
     * to catch some bugs.
     */
    t.prototype.ru = function() {
        Wn(this.Jr, "verifyOpInProgress() called when no op in progress on this queue.");
    }, 
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */
    t.prototype.uu = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t;
            return tslib.__generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return [ 4 /*yield*/ , t = this.Gr ];

                  case 1:
                    n.sent(), n.label = 2;

                  case 2:
                    if (t !== this.Gr) return [ 3 /*break*/ , 0 ];
                    n.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */
    t.prototype.su = function(t) {
        for (var n = 0, i = this.zr; n < i.length; n++) {
            if (i[n].Fr === t) return !0;
        }
        return !1;
    }, 
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId Delayed operations up to and including this TimerId will
     *  be drained. Throws if no such operation exists. Pass TimerId.All to run
     *  all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */
    t.prototype.ou = function(t) {
        var n = this;
        // Note that draining may generate more delayed ops, so we do that first.
                return this.uu().then((function() {
            Wn("all" /* All */ === t || n.su(t), "Attempted to drain to missing operation " + t), 
            // Run ops in the same order they'd run if they ran naturally.
            n.zr.sort((function(t, n) {
                return t.Ur - n.Ur;
            }));
            for (var i = 0, e = n.zr; i < e.length; i++) {
                var r = e[i];
                if (r.Br(), "all" /* All */ !== t && r.Fr === t) break;
            }
            return n.uu();
        }));
    }, 
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */
    t.prototype.hu = function(t) {
        this.Hr.push(t);
    }, 
    /** Called once a DelayedOperation is run or canceled. */
    t.prototype.eu = function(t) {
        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
        var n = this.zr.indexOf(t);
        Wn(n >= 0, "Delayed operation not found."), this.zr.splice(n, 1);
    }, t;
}(), si = /** @class */ function() {
    function t(t) {
        var n = this;
        // NOTE: next/catchCallback will always point to our own wrapper functions,
        // not the user's raw next() or catch() callbacks.
                this.cu = null, this.au = null, 
        // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.fu = !1, 
        // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.lu = !1, t((function(t) {
            n.fu = !0, n.result = t, n.cu && 
            // value should be defined unless T is Void, but we can't express
            // that in the type system.
            n.cu(t);
        }), (function(t) {
            n.fu = !0, n.error = t, n.au && n.au(t);
        }));
    }
    return t.prototype.catch = function(t) {
        return this.next(void 0, t);
    }, t.prototype.next = function(n, i) {
        var e = this;
        return this.lu && Gn("Called next() or catch() twice for PersistencePromise"), this.lu = !0, 
        this.fu ? this.error ? this.du(i, this.error) : this.vu(n, this.result) : new t((function(t, r) {
            e.cu = function(i) {
                e.vu(n, i).next(t, r);
            }, e.au = function(n) {
                e.du(i, n).next(t, r);
            };
        }));
    }, t.prototype.wu = function() {
        var t = this;
        return new Promise((function(n, i) {
            t.next(n, i);
        }));
    }, t.prototype.mu = function(n) {
        try {
            var i = n();
            return i instanceof t ? i : t.resolve(i);
        } catch (n) {
            return t.reject(n);
        }
    }, t.prototype.vu = function(n, i) {
        return n ? this.mu((function() {
            return n(i);
        })) : t.resolve(i);
    }, t.prototype.du = function(n, i) {
        return n ? this.mu((function() {
            return n(i);
        })) : t.reject(i);
    }, t.resolve = function(n) {
        return new t((function(t, i) {
            t(n);
        }));
    }, t.reject = function(n) {
        return new t((function(t, i) {
            i(n);
        }));
    }, t.pu = function(
    // Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n) {
        return new t((function(t, i) {
            var e = 0, r = 0, u = !1;
            n.forEach((function(n) {
                ++e, n.next((function() {
                    ++r, u && r === e && t();
                }), (function(t) {
                    return i(t);
                }));
            })), u = !0, r === e && t();
        }));
    }, 
    /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */
    t.bu = function(n) {
        for (var i = t.resolve(!1), e = function(n) {
            i = i.next((function(i) {
                return i ? t.resolve(i) : n();
            }));
        }, r = 0, u = n; r < u.length; r++) {
            e(u[r]);
        }
        return i;
    }, t.forEach = function(t, n) {
        var i = this, e = [];
        return t.forEach((function(t, r) {
            e.push(n.call(i, t, r));
        })), this.pu(e);
    }, t;
}();

/** The default database name for a project. */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function oi(t, n) {
    var i = t[0], e = t[1], r = n[0], u = n[1], s = Kn(i, r);
    return 0 === s ? Kn(e, u) : s;
}

/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */ var hi = /** @class */ function() {
    function t(t) {
        this.gu = t, this.buffer = new B(oi), this.yu = 0;
    }
    return t.prototype._u = function() {
        return ++this.yu;
    }, t.prototype.Iu = function(t) {
        var n = [ t, this._u() ];
        if (this.buffer.size < this.gu) this.buffer = this.buffer.add(n); else {
            var i = this.buffer.last();
            oi(n, i) < 0 && (this.buffer = this.buffer.delete(i).add(n));
        }
    }, Object.defineProperty(t.prototype, "maxValue", {
        get: function() {
            // Guaranteed to be non-empty. If we decide we are not collecting any
            // sequence numbers, nthSequenceNumber below short-circuits. If we have
            // decided that we are collecting n sequence numbers, it's because n is some
            // percentage of the existing sequence numbers. That means we should never
            // be in a situation where we are collecting sequence numbers but don't
            // actually have any.
            return this.buffer.last()[0];
        },
        enumerable: !0,
        configurable: !0
    }), t;
}(), ci = {
    Tu: !1,
    Eu: 0,
    Du: 0,
    Ru: 0
}, ai = /** @class */ function() {
    function t(
    // When we attempt to collect, we will only do so if the cache size is greater than this
    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
    t, 
    // The percentage of sequence numbers that we will attempt to collect
    n, 
    // A cap on the total number of sequence numbers that will be collected. This prevents
    // us from collecting a huge number of sequence numbers if the cache has grown very large.
    i) {
        this.Su = t, this.Au = n, this.Cu = i;
    }
    return t.Pu = function(n) {
        return new t(n, t.Vu, t.ku);
    }, t.Nu = -1, t.Ou = 1048576, t.Fu = 41943040, t.Vu = 10, t.ku = 1e3, t.Uu = new t(t.Fu, t.Vu, t.ku), 
    t.DISABLED = new t(t.Nu, 0, 0), t;
}(), fi = /** @class */ function() {
    function t(t, n) {
        this.ju = t, this.Or = n, this.xu = !1, this.Lu = null;
    }
    return t.prototype.start = function(t) {
        Wn(null === this.Lu, "Cannot start an already started LruScheduler"), this.ju.params.Su !== ai.Nu && this.Mu(t);
    }, t.prototype.stop = function() {
        this.Lu && (this.Lu.cancel(), this.Lu = null);
    }, Object.defineProperty(t.prototype, "qu", {
        get: function() {
            return null !== this.Lu;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.Mu = function(t) {
        var n = this;
        Wn(null === this.Lu, "Cannot schedule GC while a task is pending");
        var i = this.xu ? 3e5 : 6e4;
        qn("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.Lu = this.Or.iu("lru_garbage_collection" /* LruGarbageCollection */ , i, (function() {
            return n.Lu = null, n.xu = !0, t.Bu(n.ju).then((function() {
                return n.Mu(t);
            })).catch(pi);
        }));
    }, t;
}(), li = /** @class */ function() {
    function t(t, n) {
        this.Qu = t, this.params = n;
    }
    /** Given a percentile of target to collect, returns the number of targets to collect. */    return t.prototype.Gu = function(t, n) {
        return this.Qu.Wu(t).next((function(t) {
            return Math.floor(n / 100 * t);
        }));
    }, 
    /** Returns the nth sequence number, counting in order from the smallest. */
    t.prototype.zu = function(t, n) {
        var i = this;
        if (0 === n) return si.resolve(ii.Nr);
        var e = new hi(n);
        return this.Qu.$i(t, (function(t) {
            return e.Iu(t.sequenceNumber);
        })).next((function() {
            return i.Qu.Ku(t, (function(t) {
                return e.Iu(t);
            }));
        })).next((function() {
            return e.maxValue;
        }));
    }, 
    /**
     * Removes targets with a sequence number equal to or less than the given upper bound, and removes
     * document associations with those targets.
     */
    t.prototype.Ju = function(t, n, i) {
        return this.Qu.Ju(t, n, i);
    }, 
    /**
     * Removes documents that have a sequence number equal to or less than the upper bound and are not
     * otherwise pinned.
     */
    t.prototype.Hu = function(t, n) {
        return this.Qu.Hu(t, n);
    }, t.prototype.Yu = function(t, n) {
        var i = this;
        return this.params.Su === ai.Nu ? (qn("LruGarbageCollector", "Garbage collection skipped; disabled"), 
        si.resolve(ci)) : this.Xu(t).next((function(e) {
            return e < i.params.Su ? (qn("LruGarbageCollector", "Garbage collection skipped; Cache size " + e + " is lower than threshold " + i.params.Su), 
            ci) : i.$u(t, n);
        }));
    }, t.prototype.Xu = function(t) {
        return this.Qu.Xu(t);
    }, t.prototype.$u = function(t, n) {
        var i, e, r, u, s, h, c, a = this, f = Date.now();
        return this.Gu(t, this.params.Au).next((function(n) {
            // Cap at the configured max
            return n > a.params.Cu ? (qn("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + a.params.Cu + " from " + n), 
            e = a.params.Cu) : e = n, u = Date.now(), a.zu(t, e);
        })).next((function(e) {
            return i = e, s = Date.now(), a.Ju(t, i, n);
        })).next((function(n) {
            return r = n, h = Date.now(), a.Hu(t, i);
        })).next((function(t) {
            (c = Date.now(), Ln() <= logger.LogLevel.DEBUG) && qn("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (u - f) + "ms\n\tDetermined least recently used " + e + " in " + (s - u) + "ms\n\tRemoved " + r + " targets in " + (h - s) + "ms\n\tRemoved " + t + " documents in " + (c - h) + "ms\nTotal Duration: " + (c - f) + "ms");
            return si.resolve({
                Tu: !0,
                Eu: e,
                Du: r,
                Ru: t
            });
        }));
    }, t;
}(), di = /** @class */ function() {
    function t() {
        // A set of outstanding references to a document sorted by key.
        this.Zu = new B(vi.bn), 
        // A set of outstanding references to a document sorted by target id.
        this.ts = new B(vi.ns);
    }
    /** Returns true if the reference set contains no references. */    return t.prototype.M = function() {
        return this.Zu.M();
    }, 
    /** Adds a reference to the given document key for the given ID. */
    t.prototype.es = function(t, n) {
        var i = new vi(t, n);
        this.Zu = this.Zu.add(i), this.ts = this.ts.add(i);
    }, 
    /** Add references to the given document keys for the given ID. */
    t.prototype.rs = function(t, n) {
        var i = this;
        t.forEach((function(t) {
            return i.es(t, n);
        }));
    }, 
    /**
     * Removes a reference to the given document key for the given
     * ID.
     */
    t.prototype.us = function(t, n) {
        this.ss(new vi(t, n));
    }, t.prototype.os = function(t, n) {
        var i = this;
        t.forEach((function(t) {
            return i.us(t, n);
        }));
    }, 
    /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */
    t.prototype.hs = function(t) {
        var n = this, i = j.EMPTY, e = new vi(i, t), r = new vi(i, t + 1), u = [];
        return this.ts.kt([ e, r ], (function(t) {
            n.ss(t), u.push(t.key);
        })), u;
    }, t.prototype.cs = function() {
        var t = this;
        this.Zu.forEach((function(n) {
            return t.ss(n);
        }));
    }, t.prototype.ss = function(t) {
        this.Zu = this.Zu.delete(t), this.ts = this.ts.delete(t);
    }, t.prototype.as = function(t) {
        var n = j.EMPTY, i = new vi(n, t), e = new vi(n, t + 1), r = wn();
        return this.ts.kt([ i, e ], (function(t) {
            r = r.add(t.key);
        })), r;
    }, t.prototype.fs = function(t) {
        var n = new vi(t, 0), i = this.Zu.Ot(n);
        return null !== i && t.isEqual(i.key);
    }, t;
}(), vi = /** @class */ function() {
    function t(t, n) {
        this.key = t, this.ls = n;
    }
    /** Compare by key then by ID */    return t.bn = function(t, n) {
        return j.F(t.key, n.key) || Kn(t.ls, n.ls);
    }, 
    /** Compare by ID then by key */
    t.ns = function(t, n) {
        return Kn(t.ls, n.ls) || j.F(t.key, n.key);
    }, t;
}(), wi = /** @class */ function() {
    function t() {
        // A mapping of document key to the new cache entry that should be written (or null if any
        // existing cache entry should be removed).
        this.ds = new ti((function(t) {
            return t.toString();
        })), this.vs = !1;
    }
    return Object.defineProperty(t.prototype, "readTime", {
        get: function() {
            return Wn(void 0 !== this.ws, "Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used."), 
            this.ws;
        },
        set: function(t) {
            // Right now (for simplicity) we just track a single readTime for all the
            // added entries since we expect them to all be the same, but we could
            // rework to store per-entry readTimes if necessary.
            Wn(void 0 === this.ws || this.ws.isEqual(t), "All changes in a RemoteDocumentChangeBuffer must have the same read time"), 
            this.ws = t;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */
    t.prototype.ms = function(t, n) {
        this.ps(), this.readTime = n, this.ds.set(t.key, t);
    }, 
    /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */
    t.prototype.bs = function(t, n) {
        this.ps(), n && (this.readTime = n), this.ds.set(t, null);
    }, 
    /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction The transaction in which to perform any persistence
     *     operations.
     * @param documentKey The key of the entry to look up.
     * @return The cached Document or NoDocument entry, or null if we have nothing
     * cached.
     */
    t.prototype.gs = function(t, n) {
        this.ps();
        var i = this.ds.get(n);
        return void 0 !== i ? si.resolve(i) : this.ys(t, n);
    }, 
    /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys The keys of the entries to look up.
     * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
     *     entry cannot be found, the corresponding key will be mapped to a null
     *     value.
     */
    t.prototype.getEntries = function(t, n) {
        return this._s(t, n);
    }, 
    /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */
    t.prototype.apply = function(t) {
        return this.ps(), this.vs = !0, this.Is(t);
    }, 
    /** Helper to assert this.changes is not null  */
    t.prototype.ps = function() {
        Wn(!this.vs, "Changes have already been applied.");
    }, t;
}(), mi = /** @class */ function() {
    function t(
    /** Manages our in-memory or durable persistence. */
    t, n, i) {
        this.persistence = t, this.Ts = n, 
        /**
         * The set of document references maintained by any local views.
         */
        this.Es = new di, 
        /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */
        this.Ds = new x(Kn), 
        /** Maps a target to its targetID. */
        // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Rs = new ti((function(t) {
            return t.canonicalId();
        })), 
        /**
         * The read time of the last entry processed by `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */
        this.Ss = k.MIN, Wn(t.qu, "LocalStore was passed an unstarted persistence implementation"), 
        this.persistence.Cs.As(this.Es), this.Ps = t.Vs(i), this.ks = t.Ns(), this.Os = t.Fs(), 
        this.Us = new Pi(this.ks, this.Ps, this.persistence.js()), this.Ts.xs(this.Us);
    }
    /** Starts the LocalStore. */    return t.prototype.start = function() {
        return this.Ls();
    }, 
    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    t.prototype.Ms = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i, e, r = this;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return n = this.Ps, i = this.Us, [ 4 /*yield*/ , this.persistence.runTransaction("Handle user change", "readonly", (function(e) {
                        // Swap out the mutation queue, grabbing the pending mutation batches
                        // before and after.
                        var u;
                        return r.Ps.qs(e).next((function(s) {
                            return u = s, n = r.persistence.Vs(t), 
                            // Recreate our LocalDocumentsView using the new
                            // MutationQueue.
                            i = new Pi(r.ks, n, r.persistence.js()), n.qs(e);
                        })).next((function(t) {
                            for (var n = [], r = [], s = wn(), o = 0, h = u; o < h.length; o++) {
                                var c = h[o];
                                n.push(c.batchId);
                                for (var a = 0, f = c.mutations; a < f.length; a++) {
                                    var l = f[a];
                                    s = s.add(l.key);
                                }
                            }
                            for (var d = 0, v = t; d < v.length; d++) {
                                c = v[d];
                                r.push(c.batchId);
                                for (var w = 0, m = c.mutations; w < m.length; w++) {
                                    l = m[w];
                                    s = s.add(l.key);
                                }
                            }
                            // Return the set of all (potentially) changed documents and the list
                            // of mutation batch IDs that were affected by change.
                                                        return i.Bs(e, s).next((function(t) {
                                return {
                                    Qs: t,
                                    Gs: n,
                                    Ws: r
                                };
                            }));
                        }));
                    })) ];

                  case 1:
                    return e = u.sent(), this.Ps = n, this.Us = i, this.Ts.xs(this.Us), [ 2 /*return*/ , e ];
                }
            }));
        }));
    }, 
    /* Accept locally generated Mutations and commit them to storage. */
    t.prototype.zs = function(t) {
        var n, i = this, e = V.now(), r = t.reduce((function(t, n) {
            return t.add(n.key);
        }), wn());
        return this.persistence.runTransaction("Locally write mutations", "readwrite", (function(u) {
            // Load and apply all existing mutations. This lets us compute the
            // current base state for all non-idempotent transforms before applying
            // any additional user-provided writes.
            return i.Us.Bs(u, r).next((function(r) {
                n = r;
                for (
                // For non-idempotent mutations (such as `FieldValue.increment()`),
                // we record the base state in a separate patch mutation. This is
                // later used to guarantee consistent values and prevents flicker
                // even if the backend sends us an update that already includes our
                // transform.
                var s = [], o = 0, h = t; o < h.length; o++) {
                    var c = h[o], a = c.in(n.get(c.key));
                    null != a && 
                    // NOTE: The base state should only be applied if there's some
                    // existing document to override, so use a Precondition of
                    // exists=true
                    s.push(new Vt(c.key, a, a.en(), At.exists(!0)));
                }
                return i.Ps.Ks(u, e, s, t);
            }));
        })).then((function(t) {
            var i = t._r(n);
            return {
                batchId: t.batchId,
                ds: i
            };
        }));
    }, 
    /** Returns the local view of the documents affected by a mutation batch. */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Js = function(t) {
        var n = this;
        return this.persistence.runTransaction("Lookup mutation documents", "readonly", (function(i) {
            return n.Ps.Hs(i, t).next((function(t) {
                return t ? n.Us.Bs(i, t) : si.resolve(null);
            }));
        }));
    }, 
    /**
     * Acknowledge the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */
    t.prototype.Ys = function(t) {
        var n = this;
        return this.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(i) {
            var e = t.batch.keys(), r = n.ks.Xs({
                $s: !0
            });
            return n.Ps.Ys(i, t.batch, t.streamToken).next((function() {
                return n.Zs(i, t, r);
            })).next((function() {
                return r.apply(i);
            })).next((function() {
                return n.Ps.to(i);
            })).next((function() {
                return n.Us.Bs(i, e);
            }));
        }));
    }, 
    /**
     * Remove mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    t.prototype.no = function(t) {
        var n = this;
        return this.persistence.runTransaction("Reject batch", "readwrite-primary", (function(i) {
            var e;
            return n.Ps.io(i, t).next((function(t) {
                return Wn(null !== t, "Attempt to reject nonexistent batch!"), e = t.keys(), n.Ps.eo(i, t);
            })).next((function() {
                return n.Ps.to(i);
            })).next((function() {
                return n.Us.Bs(i, e);
            }));
        }));
    }, 
    /**
     * Returns the largest (latest) batch id in mutation queue that is pending server response.
     * Returns `BATCHID_UNKNOWN` if the queue is empty.
     */
    t.prototype.ro = function() {
        var t = this;
        return this.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(n) {
            return t.Ps.ro(n);
        }));
    }, 
    /** Returns the last recorded stream token for the current user. */
    t.prototype.uo = function() {
        var t = this;
        return this.persistence.runTransaction("Get last stream token", "readonly", (function(n) {
            return t.Ps.uo(n);
        }));
    }, 
    /**
     * Sets the stream token for the current user without acknowledging any
     * mutation batch. This is usually only useful after a stream handshake or in
     * response to an error that requires clearing the stream token.
     */
    t.prototype.so = function(t) {
        var n = this;
        return this.persistence.runTransaction("Set last stream token", "readwrite-primary", (function(i) {
            return n.Ps.so(i, t);
        }));
    }, 
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */
    t.prototype.oo = function() {
        var t = this;
        return this.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(n) {
            return t.Os.oo(n);
        }));
    }, 
    /**
     * Update the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */
    t.prototype.ho = function(n) {
        var i = this, e = n.ni, r = this.Ds;
        return this.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(u) {
            var s = i.ks.Xs({
                $s: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                        r = i.Ds;
            var o = [];
            n.wi.forEach((function(n, s) {
                var h = r.get(s);
                if (h) {
                    // Only update the remote keys if the target is still active. This
                    // ensures that we can persist the updated target data along with
                    // the updated assignment.
                    o.push(i.Os.co(u, n.Ei, s).next((function() {
                        return i.Os.ao(u, n.Ii, s);
                    })));
                    var c = n.resumeToken;
                    // Update the resume token if the change includes one.
                                        if (c.Lt() > 0) {
                        var a = h.ei(c, e).ii(u.fo);
                        r = r.ut(s, a), 
                        // Update the target data if there are target changes (or if
                        // sufficient time has passed since the last update).
                        t.lo(h, a, n) && o.push(i.Os.do(u, a));
                    }
                }
            }));
            var h = hn(), c = wn();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
            if (n.pi.forEach((function(t, n) {
                c = c.add(t);
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            o.push(s.getEntries(u, c).next((function(t) {
                n.pi.forEach((function(r, c) {
                    var a = t.get(r);
                    // Note: The order of the steps below is important, since we want
                    // to ensure that rejected limbo resolutions (which fabricate
                    // NoDocuments with SnapshotVersion.MIN) never add documents to
                    // cache.
                                        c instanceof Lt && c.version.isEqual(k.MIN) ? (
                    // NoDocuments with SnapshotVersion.MIN are used in manufactured
                    // events. We remove these documents from cache since we lost
                    // access.
                    s.bs(r, e), h = h.ut(r, c)) : null == a || c.version.k(a.version) > 0 || 0 === c.version.k(a.version) && a.hasPendingWrites ? (Wn(!k.MIN.isEqual(e), "Cannot add a document when the remote version is zero"), 
                    s.ms(c, e), h = h.ut(r, c)) : qn("LocalStore", "Ignoring outdated watch update for ", r, ". Current version:", a.version, " Watch version:", c.version), 
                    n.bi.has(r) && o.push(i.persistence.Cs.vo(u, r));
                }));
            }))), !e.isEqual(k.MIN)) {
                var a = i.Os.oo(u).next((function(t) {
                    return Wn(e.k(t) >= 0, "Watch stream reverted to previous snapshot?? " + e + " < " + t), 
                    i.Os.wo(u, u.fo, e);
                }));
                o.push(a);
            }
            return si.pu(o).next((function() {
                return s.apply(u);
            })).next((function() {
                return i.Us.mo(u, h);
            }));
        })).then((function(t) {
            return i.Ds = r, t;
        }));
    }, 
    /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */
    t.lo = function(t, n, i) {
        // Always persist target data if we don't already have a resume token.
        return Wn(n.resumeToken.Lt() > 0, "Attempted to persist target data with no resume token"), 
        0 === t.resumeToken.Lt() || (n.ni.N() - t.ni.N() >= this.po || i.Ii.size + i.Ti.size + i.Ei.size > 0);
        // Don't allow resume token changes to be buffered indefinitely. This
        // allows us to be reasonably up-to-date after a crash and avoids needing
        // to loop over all active queries on shutdown. Especially in the browser
        // we may not get time to do anything interesting while the current tab is
        // closing.
        }, 
    /**
     * Notify local store of the changed views to locally pin documents.
     */
    t.prototype.bo = function(t) {
        for (var n = this, i = 0, e = t; i < e.length; i++) {
            var r = e[i], u = r.targetId;
            if (this.Es.rs(r.Rr, u), this.Es.os(r.Sr, u), !r.fromCache) {
                var s = this.Ds.get(u);
                Wn(null !== s, "Can't set limbo-free snapshot version for unknown target: " + u);
                // Advance the last limbo free snapshot version
                var o = s.ni, h = s.ri(o);
                this.Ds = this.Ds.ut(u, h);
            }
        }
        return this.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(i) {
            return si.forEach(t, (function(t) {
                return si.forEach(t.Sr, (function(t) {
                    return n.persistence.Cs.us(i, t);
                }));
            }));
        }));
    }, 
    /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */
    t.prototype.yo = function(t) {
        var n = this;
        return this.persistence.runTransaction("Get next mutation batch", "readonly", (function(i) {
            return void 0 === t && (t = -1), n.Ps._o(i, t);
        }));
    }, 
    /**
     * Read the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    t.prototype.Io = function(t) {
        var n = this;
        return this.persistence.runTransaction("read document", "readonly", (function(i) {
            return n.Us.To(i, t);
        }));
    }, 
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */
    t.prototype.Eo = function(t) {
        var n = this;
        return this.persistence.runTransaction("Allocate target", "readwrite", (function(i) {
            var e;
            return n.Os.Do(i, t).next((function(r) {
                return r ? (
                // This target has been listened to previously, so reuse the
                // previous targetID.
                // TODO(mcg): freshen last accessed date?
                e = r, si.resolve(e)) : n.Os.Ro(i).next((function(r) {
                    return e = new en(t, r, 0 /* Listen */ , i.fo), n.Os.So(i, e).next((function() {
                        return e;
                    }));
                }));
            }));
        })).then((function(i) {
            return null === n.Ds.get(i.targetId) && (n.Ds = n.Ds.ut(i.targetId, i), n.Rs.set(t, i.targetId)), 
            i;
        }));
    }, 
    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    t.prototype.Do = function(t, n) {
        var i = this.Rs.get(n);
        return void 0 !== i ? si.resolve(this.Ds.get(i)) : this.Os.Do(t, n);
    }, 
    /**
     * Unpin all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    t.prototype.Ao = function(t, n) {
        var i = this, e = this.Ds.get(t);
        Wn(null !== e, "Tried to release nonexistent target: " + t);
        var r = n ? "readwrite" : "readwrite-primary";
        return this.persistence.runTransaction("Release target", r, (function(r) {
            // References for documents sent via Watch are automatically removed
            // when we delete a target's data from the reference delegate.
            // Since this does not remove references for locally mutated documents,
            // we have to remove the target associations for these documents
            // manually.
            // This operation needs to be run inside the transaction since EagerGC
            // uses the local view references during the transaction's commit.
            // Fortunately, the operation is safe to be re-run in case the
            // transaction fails since there are no side effects if the target has
            // already been removed.
            var u = i.Es.hs(t);
            return n ? si.resolve() : si.forEach(u, (function(t) {
                return i.persistence.Cs.us(r, t);
            })).next((function() {
                i.persistence.Cs.removeTarget(r, e);
            }));
        })).then((function() {
            i.Ds = i.Ds.remove(t), i.Rs.delete(e.target);
        }));
    }, 
    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults Whether results from previous executions can
     * be used to optimize this query execution.
     */
    t.prototype.Co = function(t, n) {
        var i = this, e = k.MIN, r = wn();
        return this.persistence.runTransaction("Execute query", "readonly", (function(u) {
            return i.Do(u, t.qn()).next((function(t) {
                if (t) return e = t.lastLimboFreeSnapshotVersion, i.Os.Po(u, t.targetId).next((function(t) {
                    r = t;
                }));
            })).next((function() {
                return i.Ts.Vo(u, t, n ? e : k.MIN, n ? r : wn());
            })).next((function(t) {
                return {
                    documents: t,
                    ko: r
                };
            }));
        }));
    }, 
    /**
     * Returns the keys of the documents that are associated with the given
     * target id in the remote table.
     */
    t.prototype.No = function(t) {
        var n = this;
        return this.persistence.runTransaction("Remote document keys", "readonly", (function(i) {
            return n.Os.Po(i, t);
        }));
    }, 
    // PORTING NOTE: Multi-tab only.
    t.prototype.Oo = function() {
        return this.persistence.Oo();
    }, 
    // PORTING NOTE: Multi-tab only.
    t.prototype.Fo = function(t) {
        this.Ps.Uo(t);
    }, 
    // PORTING NOTE: Multi-tab only.
    t.prototype.jo = function(t) {
        this.persistence.jo(t);
    }, t.prototype.Zs = function(t, n, i) {
        var e = this, r = n.batch, u = r.keys(), s = si.resolve();
        return u.forEach((function(e) {
            s = s.next((function() {
                return i.gs(t, e);
            })).next((function(t) {
                var u = t, s = n.Tr.get(e);
                Wn(null !== s, "ackVersions should contain every doc in the write."), (!u || u.version.k(s) < 0) && ((u = r.Bt(e, u, n)) ? 
                // We use the commitVersion as the readTime rather than the
                // document's updateTime since the updateTime is not advanced
                // for updates that do not modify the underlying document.
                i.ms(u, n.Ir) : Wn(!t, "Mutation batch " + r + " applied to document " + t + " resulted in null"));
            }));
        })), s.next((function() {
            return e.Ps.eo(t, r);
        }));
    }, t.prototype.Bu = function(t) {
        var n = this;
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(i) {
            return t.Yu(i, n.Ds);
        }));
    }, 
    // PORTING NOTE: Multi-tab only.
    t.prototype.xo = function(t) {
        var n = this, i = this.Ds.get(t);
        return i ? Promise.resolve(i.target) : this.persistence.runTransaction("Get target data", "readonly", (function(i) {
            return n.Os.ce(i, t).next((function(t) {
                return t ? t.target : null;
            }));
        }));
    }, 
    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document changes since
     * the point of rejection.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Lo = function() {
        var t = this;
        return this.persistence.runTransaction("Get new document changes", "readonly", (function(n) {
            return t.ks.Lo(n, t.Ss);
        })).then((function(n) {
            var i = n.Mo, e = n.readTime;
            return t.Ss = e, i;
        }));
    }, 
    /**
     * Reads the newest document change from persistence and forwards the internal
     * synchronization marker so that calls to `getNewDocumentChanges()`
     * only return changes that happened after client initialization.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Ls = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t, n = this;
            return tslib.__generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return t = this, [ 4 /*yield*/ , this.persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                        return n.ks.qo(t);
                    })) ];

                  case 1:
                    return t.Ss = i.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * The maximum time to leave a resume token buffered without writing it out.
     * This value is arbitrary: it's long enough to avoid several writes
     * (possibly indefinitely if updates come more frequently than this) but
     * short enough that restarting after crashing will still have a pretty
     * recent resume token.
     */
    t.po = 3e8, t;
}();

/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err An error returned by a LocalStore operation.
 * @return A Promise that resolves after we recovered, or the original error.
 */
function pi(t) {
    return tslib.__awaiter(this, void 0, void 0, (function() {
        return tslib.__generator(this, (function(n) {
            if (t.code !== T.FAILED_PRECONDITION || t.message !== Ai) throw t;
            return qn("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
        }));
    }));
}

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>
/** Assembles the key for a client state in WebStorage */
function bi(t, n) {
    return Wn(-1 === n.indexOf("_"), "Client key cannot contain '_', but was '" + n + "'"), 
    "firestore_clients_" + t + "_" + n;
}

// The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>

// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage */
function gi(t, n, i) {
    var e = "firestore_mutations_" + t + "_" + i;
    return n.t() && (e += "_" + n.uid), e;
}

// The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage */
function yi(t, n) {
    return "firestore_targets_" + t + "_" + n;
}

// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _i = /** @class */ function() {
    function t(t, n, i, e) {
        this.user = t, this.batchId = n, this.state = i, this.error = e, Wn(void 0 !== e == ("rejected" === i), "MutationMetadata must contain an error iff state is 'rejected'");
    }
    /**
     * Parses a MutationMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */    return t.Bo = function(n, i, e) {
        var r = JSON.parse(e), u = "object" == typeof r && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(r.state) && (void 0 === r.error || "object" == typeof r.error), s = void 0;
        return u && r.error && (u = "string" == typeof r.error.message && "string" == typeof r.error.code) && (s = new E(r.error.code, r.error.message)), 
        u ? new t(n, i, r.state, s) : (Bn("SharedClientState", "Failed to parse mutation state for ID '" + i + "': " + e), 
        null);
    }, t.prototype.Qo = function() {
        var t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }, t;
}(), Ii = /** @class */ function() {
    function t(t, n, i) {
        this.targetId = t, this.state = n, this.error = i, Wn(void 0 !== i == ("rejected" === n), "QueryTargetMetadata must contain an error iff state is 'rejected'");
    }
    /**
     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */    return t.Bo = function(n, i) {
        var e = JSON.parse(i), r = "object" == typeof e && -1 !== [ "not-current", "current", "rejected" ].indexOf(e.state) && (void 0 === e.error || "object" == typeof e.error), u = void 0;
        return r && e.error && (r = "string" == typeof e.error.message && "string" == typeof e.error.code) && (u = new E(e.error.code, e.error.message)), 
        r ? new t(n, e.state, u) : (Bn("SharedClientState", "Failed to parse target state for ID '" + n + "': " + i), 
        null);
    }, t.prototype.Qo = function() {
        var t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }, t;
}(), Ti = /** @class */ function() {
    function t(t, n) {
        this.clientId = t, this.activeTargetIds = n;
    }
    /**
     * Parses a RemoteClientState from the JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */    return t.Bo = function(n, i) {
        for (var e = JSON.parse(i), r = "object" == typeof e && e.activeTargetIds instanceof Array, u = pn(), s = 0; r && s < e.activeTargetIds.length; ++s) r = Y(e.activeTargetIds[s]), 
        u = u.add(e.activeTargetIds[s]);
        return r ? new t(n, u) : (Bn("SharedClientState", "Failed to parse client data for instance '" + n + "': " + i), 
        null);
    }, t;
}(), Ei = /** @class */ function() {
    function t(t, n) {
        this.clientId = t, this.onlineState = n;
    }
    /**
     * Parses a SharedOnlineState from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */    return t.Bo = function(n) {
        var i = JSON.parse(n);
        return "object" == typeof i && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(i.onlineState) && "string" == typeof i.clientId ? new t(i.clientId, i.onlineState) : (Bn("SharedClientState", "Failed to parse online state: " + n), 
        null);
    }, t;
}(), Di = /** @class */ function() {
    function t() {
        this.activeTargetIds = pn();
    }
    return t.prototype.Go = function(t) {
        this.activeTargetIds = this.activeTargetIds.add(t);
    }, t.prototype.Wo = function(t) {
        this.activeTargetIds = this.activeTargetIds.delete(t);
    }, 
    /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */
    t.prototype.Qo = function() {
        var t = {
            activeTargetIds: this.activeTargetIds.K(),
            updateTimeMs: Date.now()
        };
        return JSON.stringify(t);
    }, t;
}(), Ri = /** @class */ function() {
    function t(n, i, e, r, u) {
        if (this.zo = n, this.platform = i, this.persistenceKey = e, this.Ko = r, this.Jo = null, 
        this.Ho = null, this.Cr = null, this.Yo = {}, this.Xo = this.$o.bind(this), this.qu = !1, 
        /**
         * Captures WebStorage events that occur before `start()` is called. These
         * events are replayed once `WebStorageSharedClientState` is started.
         */
        this.Zo = [], !t.th(this.platform)) throw new E(T.UNIMPLEMENTED, "LocalStorage is not available on this platform.");
        // Escape the special characters mentioned here:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
                var s = e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.platform.window.localStorage, this.currentUser = u, this.nh = bi(this.persistenceKey, this.Ko), 
        this.ih = 
        /** Assembles the key for the current sequence number. */
        function(t) {
            return "firestore_sequence_number_" + t;
        }(this.persistenceKey), this.Yo[this.Ko] = new Di, this.eh = new RegExp("^firestore_clients_" + s + "_([^_]*)$"), 
        this.rh = new RegExp("^firestore_mutations_" + s + "_(\\d+)(?:_(.*))?$"), this.uh = new RegExp("^firestore_targets_" + s + "_(\\d+)$"), 
        this.sh = 
        /** Assembles the key for the online state of the primary tab. */
        function(t) {
            return "firestore_online_state_" + t;
        }
        // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
        // looks like 'firestore_sequence_number_<persistence_prefix>'.
        (this.persistenceKey), 
        // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.platform.window.addEventListener("storage", this.Xo);
    }
    /** Returns 'true' if WebStorage is available in the current environment. */    return t.th = function(t) {
        return !(!t.window || null == t.window.localStorage);
    }, t.prototype.start = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t, n, i, e, r, s, o, h, c, a, f, l = this;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return Wn(!this.qu, "WebStorageSharedClientState already started"), Wn(null !== this.Jo, "syncEngine property must be set before calling start()"), 
                    Wn(null !== this.Ho, "onlineStateHandler property must be set before calling start()"), 
                    [ 4 /*yield*/ , this.Jo.Oo() ];

                  case 1:
                    for (t = u.sent(), n = 0, i = t; n < i.length; n++) (e = i[n]) !== this.Ko && (r = this.getItem(bi(this.persistenceKey, e))) && (s = Ti.Bo(e, r)) && (this.Yo[s.clientId] = s);
                    for (this.oh(), (o = this.storage.getItem(this.sh)) && (h = this.hh(o)) && this.ah(h), 
                    c = 0, a = this.Zo; c < a.length; c++) f = a[c], this.$o(f);
                    return this.Zo = [], 
                    // Register a window unload hook to remove the client metadata entry from
                    // WebStorage even if `shutdown()` was not called.
                    this.platform.window.addEventListener("unload", (function() {
                        return l.shutdown();
                    })), this.qu = !0, [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.kr = function(t) {
        this.setItem(this.ih, JSON.stringify(t));
    }, t.prototype.fh = function() {
        var t = pn();
        return W(this.Yo, (function(n, i) {
            t = t.Ft(i.activeTargetIds);
        })), t;
    }, t.prototype.lh = function(t) {
        // This is not using `obj.forEach` since `forEach` doesn't support early
        // return.
        for (var n in this.Yo) if (this.Yo.hasOwnProperty(n) && this.Yo[n].activeTargetIds.has(t)) return !0;
        return !1;
    }, t.prototype.dh = function(t) {
        this.vh(t, "pending");
    }, t.prototype.wh = function(t, n, i) {
        this.vh(t, n, i), 
        // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.mh(t);
    }, t.prototype.ph = function(t) {
        var n = "not-current";
        // Lookup an existing query state if the target ID was already registered
        // by another tab
                if (this.lh(t)) {
            var i = this.storage.getItem(yi(this.persistenceKey, t));
            if (i) {
                var e = Ii.Bo(t, i);
                e && (n = e.state);
            }
        }
        return this.bh.Go(t), this.oh(), n;
    }, t.prototype.gh = function(t) {
        this.bh.Wo(t), this.oh();
    }, t.prototype.yh = function(t) {
        return this.bh.activeTargetIds.has(t);
    }, t.prototype._h = function(t) {
        this.removeItem(yi(this.persistenceKey, t));
    }, t.prototype.Ih = function(t, n, i) {
        this.Th(t, n, i);
    }, t.prototype.Ms = function(t, n, i) {
        var e = this;
        n.forEach((function(t) {
            e.mh(t);
        })), this.currentUser = t, i.forEach((function(t) {
            e.dh(t);
        }));
    }, t.prototype.Eh = function(t) {
        this.Dh(t);
    }, t.prototype.shutdown = function() {
        this.qu && (this.platform.window.removeEventListener("storage", this.Xo), this.removeItem(this.nh), 
        this.qu = !1);
    }, t.prototype.getItem = function(t) {
        var n = this.storage.getItem(t);
        return qn("SharedClientState", "READ", t, n), n;
    }, t.prototype.setItem = function(t, n) {
        qn("SharedClientState", "SET", t, n), this.storage.setItem(t, n);
    }, t.prototype.removeItem = function(t) {
        qn("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
    }, t.prototype.$o = function(t) {
        var n = this;
        if (t.storageArea === this.storage) {
            if (qn("SharedClientState", "EVENT", t.key, t.newValue), t.key === this.nh) return void Bn("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            this.zo.Qr((function() {
                return tslib.__awaiter(n, void 0, void 0, (function() {
                    var n, i, e, r, s, o;
                    return tslib.__generator(this, (function(u) {
                        if (!this.qu) return this.Zo.push(t), [ 2 /*return*/ ];
                        if (null === t.key) return [ 2 /*return*/ ];
                        if (this.eh.test(t.key)) {
                            if (null == t.newValue) return i = this.Rh(t.key), [ 2 /*return*/ , this.Sh(i, null) ];
                            if (n = this.Ah(t.key, t.newValue)) return [ 2 /*return*/ , this.Sh(n.clientId, n) ];
                        } else if (this.rh.test(t.key)) {
                            if (null !== t.newValue && (e = this.Ch(t.key, t.newValue))) return [ 2 /*return*/ , this.Ph(e) ];
                        } else if (this.uh.test(t.key)) {
                            if (null !== t.newValue && (r = this.Vh(t.key, t.newValue))) return [ 2 /*return*/ , this.kh(r) ];
                        } else if (t.key === this.sh) {
                            if (null !== t.newValue && (s = this.hh(t.newValue))) return [ 2 /*return*/ , this.ah(s) ];
                        } else t.key === this.ih && (Wn(!!this.Cr, "Missing sequenceNumberHandler"), (o = function(t) {
                            var n = ii.Nr;
                            if (null != t) try {
                                var i = JSON.parse(t);
                                Wn("number" == typeof i, "Found non-numeric sequence number"), n = i;
                            } catch (t) {
                                Bn("SharedClientState", "Failed to read sequence number from WebStorage", t);
                            }
                            return n;
                        }
                        /**
 * `MemorySharedClientState` is a simple implementation of SharedClientState for
 * clients using memory persistence. The state in this class remains fully
 * isolated and no synchronization is performed.
 */ (t.newValue)) !== ii.Nr && this.Cr(o));
                        return [ 2 /*return*/ ];
                    }));
                }));
            }));
        }
    }, Object.defineProperty(t.prototype, "bh", {
        get: function() {
            return this.Yo[this.Ko];
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.oh = function() {
        this.setItem(this.nh, this.bh.Qo());
    }, t.prototype.vh = function(t, n, i) {
        var e = new _i(this.currentUser, t, n, i), r = gi(this.persistenceKey, this.currentUser, t);
        this.setItem(r, e.Qo());
    }, t.prototype.mh = function(t) {
        var n = gi(this.persistenceKey, this.currentUser, t);
        this.removeItem(n);
    }, t.prototype.Dh = function(t) {
        var n = {
            clientId: this.Ko,
            onlineState: t
        };
        this.storage.setItem(this.sh, JSON.stringify(n));
    }, t.prototype.Th = function(t, n, i) {
        var e = yi(this.persistenceKey, t), r = new Ii(t, n, i);
        this.setItem(e, r.Qo());
    }, 
    /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */
    t.prototype.Rh = function(t) {
        var n = this.eh.exec(t);
        return n ? n[1] : null;
    }, 
    /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */
    t.prototype.Ah = function(t, n) {
        var i = this.Rh(t);
        return Wn(null !== i, "Cannot parse client state key '" + t + "'"), Ti.Bo(i, n);
    }, 
    /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t.prototype.Ch = function(t, n) {
        var i = this.rh.exec(t);
        Wn(null !== i, "Cannot parse mutation batch key '" + t + "'");
        var e = Number(i[1]), r = void 0 !== i[2] ? i[2] : null;
        return _i.Bo(new I(r), e, n);
    }, 
    /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t.prototype.Vh = function(t, n) {
        var i = this.uh.exec(t);
        Wn(null !== i, "Cannot parse query target key '" + t + "'");
        var e = Number(i[1]);
        return Ii.Bo(e, n);
    }, 
    /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t.prototype.hh = function(t) {
        return Ei.Bo(t);
    }, t.prototype.Ph = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(n) {
                return t.user.uid !== this.currentUser.uid ? (qn("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                [ 2 /*return*/ ]) : [ 2 /*return*/ , this.Jo.Nh(t.batchId, t.state, t.error) ];
            }));
        }));
    }, t.prototype.kh = function(t) {
        return this.Jo.Oh(t.targetId, t.state, t.error);
    }, t.prototype.Sh = function(t, n) {
        var i = this, e = this.fh();
        n ? this.Yo[t] = n : delete this.Yo[t];
        var s = this.fh(), o = [], h = [];
        return s.forEach((function(t) {
            return tslib.__awaiter(i, void 0, void 0, (function() {
                return tslib.__generator(this, (function(n) {
                    return e.has(t) || o.push(t), [ 2 /*return*/ ];
                }));
            }));
        })), e.forEach((function(t) {
            return tslib.__awaiter(i, void 0, void 0, (function() {
                return tslib.__generator(this, (function(n) {
                    return s.has(t) || h.push(t), [ 2 /*return*/ ];
                }));
            }));
        })), this.Jo.Fh(o, h);
    }, t.prototype.ah = function(t) {
        // We check whether the client that wrote this online state is still active
        // by comparing its client ID to the list of clients kept active in
        // IndexedDb. If a client does not update their IndexedDb client state
        // within 5 seconds, it is considered inactive and we don't emit an online
        // state event.
        this.Yo[t.clientId] && this.Ho(t.onlineState);
    }, t;
}();

/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */
// Visible for testing
var Si = /** @class */ function() {
    function t() {
        this.Uh = new Di, this.jh = {}, this.Jo = null, this.Ho = null, this.Cr = null;
    }
    return t.prototype.dh = function(t) {
        // No op.
    }, t.prototype.wh = function(t, n, i) {
        // No op.
    }, t.prototype.ph = function(t) {
        return this.Uh.Go(t), this.jh[t] || "not-current";
    }, t.prototype.Ih = function(t, n, i) {
        this.jh[t] = n;
    }, t.prototype.gh = function(t) {
        this.Uh.Wo(t);
    }, t.prototype.yh = function(t) {
        return this.Uh.activeTargetIds.has(t);
    }, t.prototype._h = function(t) {
        delete this.jh[t];
    }, t.prototype.fh = function() {
        return this.Uh.activeTargetIds;
    }, t.prototype.lh = function(t) {
        return this.Uh.activeTargetIds.has(t);
    }, t.prototype.start = function() {
        return this.Uh = new Di, Promise.resolve();
    }, t.prototype.Ms = function(t, n, i) {
        // No op.
    }, t.prototype.Eh = function(t) {
        // No op.
    }, t.prototype.shutdown = function() {}, t.prototype.kr = function(t) {}, t;
}(), Ai = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", Ci = /** @class */ function() {
    function t() {
        this.xh = [];
    }
    return t.prototype.Lh = function(t) {
        this.xh.push(t);
    }, t.prototype.Mh = function() {
        this.xh.forEach((function(t) {
            return t();
        }));
    }, t;
}(), Pi = /** @class */ function() {
    function t(t, n, i) {
        this.qh = t, this.Ps = n, this.Bh = i;
    }
    /**
     * Get the local view of the document identified by `key`.
     *
     * @return Local view of the document or null if we don't have any cached
     * state for it.
     */    return t.prototype.To = function(t, n) {
        var i = this;
        return this.Ps.Qh(t, n).next((function(e) {
            return i.Gh(t, n, e);
        }));
    }, 
    /** Internal version of `getDocument` that allows reusing batches. */
    t.prototype.Gh = function(t, n, i) {
        return this.qh.gs(t, n).next((function(t) {
            for (var e = 0, r = i; e < r.length; e++) {
                t = r[e].qt(n, t);
            }
            return t;
        }));
    }, 
    // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.
    t.prototype.Wh = function(t, n, i) {
        var e = cn();
        return n.forEach((function(t, n) {
            for (var r = 0, u = i; r < u.length; r++) {
                n = u[r].qt(t, n);
            }
            e = e.ut(t, n);
        })), e;
    }, 
    /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */
    t.prototype.Bs = function(t, n) {
        var i = this;
        return this.qh.getEntries(t, n).next((function(n) {
            return i.mo(t, n);
        }));
    }, 
    /**
     * Similar to `getDocuments`, but creates the local view from the given
     * `baseDocs` without retrieving documents from the local store.
     */
    t.prototype.mo = function(t, n) {
        var i = this;
        return this.Ps.zh(t, n).next((function(e) {
            var r = i.Wh(t, n, e), u = hn();
            return r.forEach((function(t, n) {
                // TODO(http://b/32275378): Don't conflate missing / deleted.
                n || (n = new Lt(t, k.V())), u = u.ut(t, n);
            })), u;
        }));
    }, 
    /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction The persistence transaction.
     * @param query The query to match documents against.
     * @param sinceReadTime If not set to SnapshotVersion.MIN, return only
     *     documents that have been read since this snapshot version (exclusive).
     */
    t.prototype.Vo = function(t, n, i) {
        return n.Tn() ? this.Kh(t, n.path) : n.Yn() ? this.Jh(t, n, i) : this.Hh(t, n, i);
    }, t.prototype.Kh = function(t, n) {
        // Just do a simple document lookup.
        return this.To(t, new j(n)).next((function(t) {
            var n = fn();
            return t instanceof xt && (n = n.ut(t.key, t)), n;
        }));
    }, t.prototype.Jh = function(t, n, i) {
        var e = this;
        Wn(n.path.M(), "Currently we only support collection group queries at the root.");
        var r = n.collectionGroup, u = fn();
        return this.Bh.Yh(t, r).next((function(s) {
            // Perform a collection query against each parent that contains the
            // collectionId and aggregate the results.
            return si.forEach(s, (function(s) {
                var o = n.Ln(s.child(r));
                return e.Hh(t, o, i).next((function(t) {
                    t.forEach((function(t, n) {
                        u = u.ut(t, n);
                    }));
                }));
            })).next((function() {
                return u;
            }));
        }));
    }, t.prototype.Hh = function(t, n, i) {
        var e, r, u = this;
        // Query the remote documents and overlay mutations.
                return this.qh.Vo(t, n, i).next((function(i) {
            return e = i, u.Ps.Xh(t, n);
        })).next((function(n) {
            // It is possible that a PatchMutation can make a document match a query, even if
            // the version in the RemoteDocumentCache is not a match yet (waiting for server
            // to ack). To handle this, we find all document keys affected by the PatchMutations
            // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,
            // otherwise those `PatchMutations` will be ignored because no base document can be found,
            // and lead to missing result for the query.
            return r = n, u.$h(t, r, e).next((function(t) {
                e = t;
                for (var n = 0, i = r; n < i.length; n++) for (var u = i[n], s = 0, o = u.mutations; s < o.length; s++) {
                    var h = o[s], c = h.key, a = e.get(c), f = h.qt(a, a, u.gr);
                    e = f instanceof xt ? e.ut(c, f) : e.remove(c);
                }
            }));
        })).next((function() {
            // Finally, filter out any documents that don't actually match
            // the query.
            return e.forEach((function(t, i) {
                n.matches(i) || (e = e.remove(t));
            })), e;
        }));
    }, t.prototype.$h = function(t, n, i) {
        for (var e = wn(), r = 0, u = n; r < u.length; r++) for (var s = 0, o = u[r].mutations; s < o.length; s++) {
            var h = o[s];
            h instanceof Vt && null === i.get(h.key) && (e = e.add(h.key));
        }
        var c = i;
        return this.qh.getEntries(t, e).next((function(t) {
            return t.forEach((function(t, n) {
                null !== n && n instanceof xt && (c = c.ut(t, n));
            })), c;
        }));
    }, t;
}(), Vi = /** @class */ function() {
    function t() {}
    return t.prototype.xs = function(t) {
        this.Zh = t;
    }, t.prototype.Vo = function(t, n, i, e) {
        var r = this;
        // Queries that match all documents don't benefit from using
        // IndexFreeQueries. It is more efficient to scan all documents in a
        // collection, rather than to perform individual lookups.
        return Wn(void 0 !== this.Zh, "setLocalDocumentsView() not called"), n.Mn() || i.isEqual(k.MIN) ? this.tc(t, n) : this.Zh.Bs(t, e).next((function(u) {
            var s = r.nc(n, u);
            return (n.Kn() || n.Jn()) && r.ic(n.Dn, s, e, i) ? r.tc(t, n) : (Ln() <= logger.LogLevel.DEBUG && qn("IndexFreeQueryEngine", "Re-using previous result from %s to execute query: %s", i.toString(), n.toString()), 
            r.Zh.Vo(t, n, i).next((function(t) {
                // We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                return s.forEach((function(n) {
                    t = t.ut(n.key, n);
                })), t;
            })));
        }));
        // Queries that have never seen a snapshot without limbo free documents
        // should also be run as a full collection scan.
        }, 
    /** Applies the query filter and sorting to the provided documents.  */
    t.prototype.nc = function(t, n) {
        // Sort the documents and re-apply the query filter since previously
        // matching documents do not necessarily still match the query.
        var i = new B((function(n, i) {
            return t.Bn(n, i);
        }));
        return n.forEach((function(n, e) {
            e instanceof xt && t.matches(e) && (i = i.add(e));
        })), i;
    }, 
    /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion The version of the snapshot when the query
     * was last synchronized.
     */
    t.prototype.ic = function(t, n, i, e) {
        // The query needs to be refilled if a previously matching document no
        // longer matches.
        if (i.size !== n.size) return !0;
        // Limit queries are not eligible for index-free query execution if there is
        // a potential that an older document from cache now sorts before a document
        // that was previously part of the limit. This, however, can only happen if
        // the document at the edge of the limit goes out of limit.
        // If a document that is not the limit boundary sorts differently,
        // the boundary of the limit itself did not change and documents from cache
        // will continue to be "rejected" by this boundary. Therefore, we can ignore
        // any modifications that don't affect the last document.
                var r = "F" /* First */ === t ? n.last() : n.first();
        return !!r && (r.hasPendingWrites || r.version.k(e) > 0);
    }, t.prototype.tc = function(t, n) {
        return Ln() <= logger.LogLevel.DEBUG && qn("IndexFreeQueryEngine", "Using full collection scan to execute query: %s", n.toString()), 
        this.Zh.Vo(t, n, k.MIN);
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */
function ki(t) {
    for (var n = "", i = 0; i < t.length; i++) n.length > 0 && (n = Oi(n)), n = Ni(t.get(i), n);
    return Oi(n);
}

/** Encodes a single segment of a resource path into the given result */ function Ni(t, n) {
    for (var i = n, e = t.length, r = 0; r < e; r++) {
        var u = t.charAt(r);
        switch (u) {
          case "\0":
            i += "";
            break;

          case "":
            i += "";
            break;

          default:
            i += u;
        }
    }
    return i;
}

/** Encodes a path separator into the given result */ function Oi(t) {
    return t + "";
}

/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */ function Fi(t) {
    // Event the empty path must encode as a path of at least length 2. A path
    // with exactly 2 must be the empty path.
    var n = t.length;
    if (Wn(n >= 2, "Invalid path " + t), 2 === n) return Wn("" === t.charAt(0) && "" === t.charAt(1), "Non-empty path " + t + " had length 2"), 
    O.Y;
    // Escape characters cannot exist past the second-to-last position in the
    // source value.
        for (var i = n - 2, e = [], r = "", u = 0; u < n; ) {
        // The last two characters of a valid encoded path must be a separator, so
        // there must be an end to this segment.
        var s = t.indexOf("", u);
        switch ((s < 0 || s > i) && Gn('Invalid encoded resource path: "' + t + '"'), t.charAt(s + 1)) {
          case "":
            var o = t.substring(u, s), h = void 0;
            0 === r.length ? 
            // Avoid copying for the common case of a segment that excludes \0
            // and \001
            h = o : (h = r += o, r = ""), e.push(h);
            break;

          case "":
            r += t.substring(u, s), r += "\0";
            break;

          case "":
            // The escape character can be used in the output to encode itself.
            r += t.substring(u, s + 1);
            break;

          default:
            Gn('Invalid encoded resource path: "' + t + '"');
        }
        u = s + 2;
    }
    return new O(e);
}

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * An in-memory implementation of IndexManager.
 */ var Ui = /** @class */ function() {
    function t() {
        this.ec = new ji;
    }
    return t.prototype.rc = function(t, n) {
        return this.ec.add(n), si.resolve();
    }, t.prototype.Yh = function(t, n) {
        return si.resolve(this.ec.getEntries(n));
    }, t;
}(), ji = /** @class */ function() {
    function t() {
        this.index = {};
    }
    // Returns false if the entry already existed.
        return t.prototype.add = function(t) {
        Wn(t.length % 2 == 1, "Expected a collection path.");
        var n = t.B(), i = t.L(), e = this.index[n] || new B(O.F), r = !e.has(i);
        return this.index[n] = e.add(i), r;
    }, t.prototype.has = function(t) {
        var n = t.B(), i = t.L(), e = this.index[n];
        return e && e.has(i);
    }, t.prototype.getEntries = function(t) {
        return (this.index[t] || new B(O.F)).K();
    }, t;
}(), xi = /** @class */ function() {
    function t(t, n) {
        this.Bh = t, this.Cs = n, 
        /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */
        this.Ps = [], 
        /** Next value to use when assigning sequential IDs to each mutation batch. */
        this.uc = 1, 
        /** The last received stream token from the server, used to acknowledge which
         * responses the client has processed. Stream tokens are opaque checkpoint
         * markers whose only real value is their inclusion in the next request.
         */
        this.lastStreamToken = K.Mt, 
        /** An ordered mapping between documents and the mutations batch IDs. */
        this.sc = new B(vi.bn);
    }
    return t.prototype.oc = function(t) {
        return si.resolve(0 === this.Ps.length);
    }, t.prototype.Ys = function(t, n, i) {
        var e = n.batchId, r = this.hc(e, "acknowledged");
        Wn(0 === r, "Can only acknowledge the first batch in the mutation queue");
        // Verify that the batch in the queue is the one to be acknowledged.
        var u = this.Ps[r];
        return Wn(e === u.batchId, "Queue ordering failure: expected batch " + e + ", got batch " + u.batchId), 
        this.lastStreamToken = i, si.resolve();
    }, t.prototype.uo = function(t) {
        return si.resolve(this.lastStreamToken);
    }, t.prototype.so = function(t, n) {
        return this.lastStreamToken = n, si.resolve();
    }, t.prototype.Ks = function(t, n, i, e) {
        Wn(0 !== e.length, "Mutation batches should not be empty");
        var r = this.uc;
        (this.uc++, this.Ps.length > 0) && Wn(this.Ps[this.Ps.length - 1].batchId < r, "Mutation batchIDs must be monotonically increasing order");
        var u = new $n(r, n, i, e);
        this.Ps.push(u);
        // Track references by document key and index collection parents.
        for (var s = 0, o = e; s < o.length; s++) {
            var h = o[s];
            this.sc = this.sc.add(new vi(h.key, r)), this.Bh.rc(t, h.key.path.L());
        }
        return si.resolve(u);
    }, t.prototype.io = function(t, n) {
        return si.resolve(this.cc(n));
    }, t.prototype.Hs = function(t, n) {
        var i = this.cc(n);
        return Wn(null != i, "Failed to find local mutation batch."), si.resolve(i.keys());
    }, t.prototype._o = function(t, n) {
        var i = n + 1, e = this.ac(i), r = e < 0 ? 0 : e;
        // The requested batchId may still be out of range so normalize it to the
        // start of the queue.
                return si.resolve(this.Ps.length > r ? this.Ps[r] : null);
    }, t.prototype.ro = function() {
        return si.resolve(0 === this.Ps.length ? -1 : this.uc - 1);
    }, t.prototype.qs = function(t) {
        return si.resolve(this.Ps.slice());
    }, t.prototype.Qh = function(t, n) {
        var i = this, e = new vi(n, 0), r = new vi(n, Number.POSITIVE_INFINITY), u = [];
        return this.sc.kt([ e, r ], (function(t) {
            Wn(n.isEqual(t.key), "Should only iterate over a single key's batches");
            var e = i.cc(t.ls);
            Wn(null !== e, "Batches in the index must exist in the main table"), u.push(e);
        })), si.resolve(u);
    }, t.prototype.zh = function(t, n) {
        var i = this, e = new B(Kn);
        return n.forEach((function(t) {
            var n = new vi(t, 0), r = new vi(t, Number.POSITIVE_INFINITY);
            i.sc.kt([ n, r ], (function(n) {
                Wn(t.isEqual(n.key), "For each key, should only iterate over a single key's batches"), 
                e = e.add(n.ls);
            }));
        })), si.resolve(this.fc(e));
    }, t.prototype.Xh = function(t, n) {
        Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        // Use the query path as a prefix for testing if a document matches the
        // query.
        var i = n.path, e = i.length + 1, r = i;
        j.nt(r) || (r = r.child(""));
        var u = new vi(new j(r), 0), s = new B(Kn);
        // Find unique batchIDs referenced by all documents potentially matching the
        // query.
                return this.sc.Nt((function(t) {
            var n = t.key.path;
            return !!i.G(n) && (
            // Rows with document keys more than one segment longer than the query
            // path can't be matches. For example, a query on 'rooms' can't match
            // the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            n.length === e && (s = s.add(t.ls)), !0);
        }), u), si.resolve(this.fc(s));
    }, t.prototype.fc = function(t) {
        var n = this, i = [];
        // Construct an array of matching batches, sorted by batchID to ensure that
        // multiple mutations affecting the same document key are applied in order.
                return t.forEach((function(t) {
            var e = n.cc(t);
            null !== e && i.push(e);
        })), i;
    }, t.prototype.eo = function(t, n) {
        var i = this;
        // Find the position of the first batch for removal. This need not be the
        // first entry in the queue.
                Wn(0 === this.hc(n.batchId, "removed"), "Can only remove the first entry of the mutation queue"), 
        this.Ps.shift();
        var e = this.sc;
        return si.forEach(n.mutations, (function(r) {
            var u = new vi(r.key, n.batchId);
            return e = e.delete(u), i.Cs.lc(t, r.key);
        })).next((function() {
            i.sc = e;
        }));
    }, t.prototype.Uo = function(t) {
        // No-op since the memory mutation queue does not maintain a separate cache.
    }, t.prototype.fs = function(t, n) {
        var i = new vi(n, 0), e = this.sc.Ot(i);
        return si.resolve(n.isEqual(e && e.key));
    }, t.prototype.to = function(t) {
        return 0 === this.Ps.length && Wn(this.sc.M(), "Document leak -- detected dangling mutation references when queue is empty."), 
        si.resolve();
    }, 
    /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId The batchId to search for
     * @param action A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */
    t.prototype.hc = function(t, n) {
        var i = this.ac(t);
        return Wn(i >= 0 && i < this.Ps.length, "Batches must exist to be " + n), i;
    }, 
    /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @return The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */
    t.prototype.ac = function(t) {
        return 0 === this.Ps.length ? 0 : t - this.Ps[0].batchId;
        // Examine the front of the queue to figure out the difference between the
        // batchId and indexes in the array. Note that since the queue is ordered
        // by batchId, if the first batch has a larger batchId then the requested
        // batchId doesn't exist in the queue.
        }, 
    /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */
    t.prototype.cc = function(t) {
        var n = this.ac(t);
        if (n < 0 || n >= this.Ps.length) return null;
        var i = this.Ps[n];
        return Wn(i.batchId === t, "If found batch must match"), i;
    }, t;
}();

/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */ var Li = /** @class */ function() {
    /**
     * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
     * return 0 to avoid unnecessarily doing the work of calculating the size.
     */
    function t(t, n) {
        this.Bh = t, this.dc = n, 
        /** Underlying cache of documents and their read times. */
        this.docs = new x(j.F), 
        /** Size of all cached documents. */
        this.size = 0;
    }
    /**
     * Adds the supplied entry to the cache and updates the cache size as appropriate.
     *
     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */    return t.prototype.ms = function(t, n, i) {
        Wn(!i.isEqual(k.MIN), "Cannot add a document with a read time of zero");
        var e = n.key, r = this.docs.get(e), u = r ? r.size : 0, s = this.dc(n);
        return this.docs = this.docs.ut(e, {
            vc: n,
            size: s,
            readTime: i
        }), this.size += s - u, this.Bh.rc(t, e.path.L());
    }, 
    /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */
    t.prototype.bs = function(t) {
        var n = this.docs.get(t);
        n && (this.docs = this.docs.remove(t), this.size -= n.size);
    }, t.prototype.gs = function(t, n) {
        var i = this.docs.get(n);
        return si.resolve(i ? i.vc : null);
    }, t.prototype.getEntries = function(t, n) {
        var i = this, e = cn();
        return n.forEach((function(t) {
            var n = i.docs.get(t);
            e = e.ut(t, n ? n.vc : null);
        })), si.resolve(e);
    }, t.prototype.Vo = function(t, n, i) {
        Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        for (var e = fn(), r = new j(n.path.child("")), u = this.docs.lt(r)
        // Documents are ordered by key, so we can use a prefix scan to narrow down
        // the documents we need to match the query against.
        ; u.gt(); ) {
            var s = u.bt(), o = s.key, h = s.value, c = h.vc, a = h.readTime;
            if (!n.path.G(o.path)) break;
            a.k(i) <= 0 || c instanceof xt && n.matches(c) && (e = e.ut(c.key, c));
        }
        return si.resolve(e);
    }, t.prototype.wc = function(t, n) {
        return si.forEach(this.docs, (function(t) {
            return n(t);
        }));
    }, t.prototype.Lo = function(t, n) {
        throw new Error("getNewDocumentChanges() is not supported with MemoryPersistence");
    }, t.prototype.qo = function(t) {
        return si.resolve(k.MIN);
    }, t.prototype.Xs = function(n) {
        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
        // a separate changelog and does not need special handling for removals.
        return new t.mc(this);
    }, t.prototype.pc = function(t) {
        return si.resolve(this.size);
    }, 
    /**
     * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
     */
    t.mc = /** @class */ function(t) {
        function i(n) {
            var i = t.call(this) || this;
            return i.bc = n, i;
        }
        return tslib.__extends(i, t), i.prototype.Is = function(t) {
            var n = this, i = [];
            return this.ds.forEach((function(e, r) {
                r ? i.push(n.bc.ms(t, r, n.readTime)) : n.bc.bs(e);
            })), si.pu(i);
        }, i.prototype.ys = function(t, n) {
            return this.bc.gs(t, n);
        }, i.prototype._s = function(t, n) {
            return this.bc.getEntries(t, n);
        }, i;
    }(wi), t;
}(), Mi = /** @class */ function() {
    /**
     * Instantiates a new TargetIdGenerator. If a seed is provided, the generator
     * will use the seed value as the next target ID.
     */
    function t(t, n) {
        this.gc = t, Wn((1 & t) === t, "Generator ID " + t + " contains more than 1 reserved bits"), 
        this.yc(void 0 !== n ? n : this.gc);
    }
    return t.prototype.next = function() {
        var t = this._c;
        return this._c += 2, t;
    }, 
    /**
     * Returns the ID that follows the given ID. Subsequent calls to `next()`
     * use the newly returned target ID as their base.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.after = function(t) {
        return this.yc(t + 2), this.next();
    }, t.prototype.yc = function(t) {
        Wn((1 & t) === this.gc, "Cannot supply target ID from different generator ID"), 
        this._c = t;
    }, t.Ic = function() {
        return new t(0 /* QueryCache */ , 2);
    }, t.Tc = function() {
        // Sync engine assigns target IDs for limbo document detection.
        return new t(1 /* SyncEngine */);
    }, t;
}(), qi = /** @class */ function() {
    function t(t) {
        this.persistence = t, 
        /**
         * Maps a target to the data about that target
         */
        this.Ec = new ti((function(t) {
            return t.canonicalId();
        })), 
        /** The last received snapshot version. */
        this.lastRemoteSnapshotVersion = k.MIN, 
        /** The highest numbered target ID encountered. */
        this.highestTargetId = 0, 
        /** The highest sequence number encountered. */
        this.Dc = 0, 
        /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */
        this.Rc = new di, this.targetCount = 0, this.Sc = Mi.Ic();
    }
    return t.prototype.$i = function(t, n) {
        return this.Ec.forEach((function(t, i) {
            return n(i);
        })), si.resolve();
    }, t.prototype.oo = function(t) {
        return si.resolve(this.lastRemoteSnapshotVersion);
    }, t.prototype.Ac = function(t) {
        return si.resolve(this.Dc);
    }, t.prototype.Ro = function(t) {
        var n = this.Sc.after(this.highestTargetId);
        return this.highestTargetId = n, si.resolve(n);
    }, t.prototype.wo = function(t, n, i) {
        return i && (this.lastRemoteSnapshotVersion = i), n > this.Dc && (this.Dc = n), 
        si.resolve();
    }, t.prototype.Cc = function(t) {
        this.Ec.set(t.target, t);
        var n = t.targetId;
        n > this.highestTargetId && (this.highestTargetId = n), t.sequenceNumber > this.Dc && (this.Dc = t.sequenceNumber);
    }, t.prototype.So = function(t, n) {
        return Wn(!this.Ec.has(n.target), "Adding a target that already exists"), this.Cc(n), 
        this.targetCount += 1, si.resolve();
    }, t.prototype.do = function(t, n) {
        return Wn(this.Ec.has(n.target), "Updating a non-existent target"), this.Cc(n), 
        si.resolve();
    }, t.prototype.Pc = function(t, n) {
        return Wn(this.targetCount > 0, "Removing a target from an empty cache"), Wn(this.Ec.has(n.target), "Removing a non-existent target from the cache"), 
        this.Ec.delete(n.target), this.Rc.hs(n.targetId), this.targetCount -= 1, si.resolve();
    }, t.prototype.Ju = function(t, n, i) {
        var e = this, r = 0, u = [];
        return this.Ec.forEach((function(s, o) {
            o.sequenceNumber <= n && null === i.get(o.targetId) && (e.Ec.delete(s), u.push(e.Vc(t, o.targetId)), 
            r++);
        })), si.pu(u).next((function() {
            return r;
        }));
    }, t.prototype.kc = function(t) {
        return si.resolve(this.targetCount);
    }, t.prototype.Do = function(t, n) {
        var i = this.Ec.get(n) || null;
        return si.resolve(i);
    }, t.prototype.ce = function(t, n) {
        // This method is only needed for multi-tab and we can't implement it
        // efficiently without additional data structures.
        return Gn("Not yet implemented.");
    }, t.prototype.ao = function(t, n, i) {
        this.Rc.rs(n, i);
        var e = this.persistence.Cs, r = [];
        return e && n.forEach((function(n) {
            r.push(e.es(t, n));
        })), si.pu(r);
    }, t.prototype.co = function(t, n, i) {
        this.Rc.os(n, i);
        var e = this.persistence.Cs, r = [];
        return e && n.forEach((function(n) {
            r.push(e.us(t, n));
        })), si.pu(r);
    }, t.prototype.Vc = function(t, n) {
        return this.Rc.hs(n), si.resolve();
    }, t.prototype.Po = function(t, n) {
        var i = this.Rc.as(n);
        return si.resolve(i);
    }, t.prototype.fs = function(t, n) {
        return si.resolve(this.Rc.fs(n));
    }, t;
}(), Bi = "You are using the memory-only build of Firestore. Persistence support is only available via the @firebase/firestore bundle or the firebase-firestore.js build.", Qi = /** @class */ function() {
    /**
     * The constructor accepts a factory for creating a reference delegate. This
     * allows both the delegate and this instance to have strong references to
     * each other without having nullable fields that would then need to be
     * checked or asserted on every access.
     */
    function t(t, n) {
        var i = this;
        this.clientId = t, this.Nc = {}, this.Oc = new ii(0), this.Fc = !1, this.Fc = !0, 
        this.Cs = n(this), this.Os = new qi(this);
        this.Bh = new Ui, this.qh = new Li(this.Bh, (function(t) {
            return i.Cs.Uc(t);
        }));
    }
    return t.prototype.shutdown = function() {
        // No durable state to ensure is closed on shutdown.
        return this.Fc = !1, Promise.resolve();
    }, Object.defineProperty(t.prototype, "qu", {
        get: function() {
            return this.Fc;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.Oo = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                return [ 2 /*return*/ , [ this.clientId ] ];
            }));
        }));
    }, t.prototype.jc = function(t) {
        // All clients using memory persistence act as primary.
        return t(!0);
    }, t.prototype.xc = function() {
        // No op.
    }, t.prototype.jo = function(t) {
        // No op.
    }, t.prototype.js = function() {
        return this.Bh;
    }, t.prototype.Vs = function(t) {
        var n = this.Nc[t.i()];
        return n || (n = new xi(this.Bh, this.Cs), this.Nc[t.i()] = n), n;
    }, t.prototype.Fs = function() {
        return this.Os;
    }, t.prototype.Ns = function() {
        return this.qh;
    }, t.prototype.runTransaction = function(t, n, i) {
        var e = this;
        qn("MemoryPersistence", "Starting transaction:", t);
        var r = new Gi(this.Oc.next());
        return this.Cs.Lc(), i(r).next((function(t) {
            return e.Cs.Mc(r).next((function() {
                return t;
            }));
        })).wu().then((function(t) {
            return r.Mh(), t;
        }));
    }, t.prototype.qc = function(t, n) {
        return si.bu(Object.values(this.Nc).map((function(i) {
            return function() {
                return i.fs(t, n);
            };
        })));
    }, t;
}(), Gi = /** @class */ function(t) {
    function i(n) {
        var i = t.call(this) || this;
        return i.fo = n, i;
    }
    return tslib.__extends(i, t), i;
}(Ci), Wi = /** @class */ function() {
    function t(t) {
        this.persistence = t, this.Bc = null, this.Qc = null;
    }
    return Object.defineProperty(t.prototype, "Gc", {
        get: function() {
            if (this.Qc) return this.Qc;
            throw Gn("orphanedDocuments is only valid during a transaction.");
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.As = function(t) {
        this.Bc = t;
    }, t.prototype.es = function(t, n) {
        return this.Gc.delete(n), si.resolve();
    }, t.prototype.us = function(t, n) {
        return this.Gc.add(n), si.resolve();
    }, t.prototype.lc = function(t, n) {
        return this.Gc.add(n), si.resolve();
    }, t.prototype.removeTarget = function(t, n) {
        var i = this, e = this.persistence.Fs();
        return e.Po(t, n.targetId).next((function(t) {
            t.forEach((function(t) {
                return i.Gc.add(t);
            }));
        })).next((function() {
            return e.Pc(t, n);
        }));
    }, t.prototype.Lc = function() {
        this.Qc = new Set;
    }, t.prototype.Mc = function(t) {
        var n = this, i = this.persistence.Ns().Xs();
        // Remove newly orphaned documents.
                return si.forEach(this.Gc, (function(e) {
            return n.Wc(t, e).next((function(t) {
                t || i.bs(e);
            }));
        })).next((function() {
            return n.Qc = null, i.apply(t);
        }));
    }, t.prototype.vo = function(t, n) {
        var i = this;
        return this.Wc(t, n).next((function(t) {
            t ? i.Gc.delete(n) : i.Gc.add(n);
        }));
    }, t.prototype.Uc = function(t) {
        // For eager GC, we don't care about the document size, there are no size thresholds.
        return 0;
    }, t.prototype.Wc = function(t, n) {
        var i = this;
        return si.bu([ function() {
            return i.persistence.Fs().fs(t, n);
        }, function() {
            return i.persistence.qc(t, n);
        }, function() {
            return si.resolve(i.Bc.fs(n));
        } ]);
    }, t;
}(), zi = /** @class */ function() {
    function t() {}
    return t.prototype.initialize = function(t, n, i, e, r, u) {
        if (u.zc) throw new E(T.FAILED_PRECONDITION, Bi);
        return this.clientId = e, Promise.resolve();
    }, t.prototype.Kc = function() {
        var t = !1;
        return {
            qu: t,
            start: function() {
                return t = !0;
            },
            stop: function() {
                return t = !1;
            }
        };
    }, t.prototype.Jc = function() {
        return Wn(!!this.clientId, "initialize() not called"), new Qi(this.clientId, (function(t) {
            return new Wi(t);
        }));
    }, t.prototype.Hc = function() {
        return new Si;
    }, t.prototype.clearPersistence = function() {
        throw new E(T.FAILED_PRECONDITION, Bi);
    }, t;
}(), Ki = /** @class */ function() {
    function t(
    /**
     * The AsyncQueue to run backoff operations on.
     */
    t, 
    /**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */
    n, 
    /**
     * The initial delay (used as the base delay on the first retry attempt).
     * Note that jitter will still be applied, so the actual delay could be as
     * little as 0.5*initialDelayMs.
     */
    i, 
    /**
     * The multiplier to use to determine the extended base delay after each
     * attempt.
     */
    e, 
    /**
     * The maximum base delay after which no further backoff is performed.
     * Note that jitter will still be applied, so the actual delay could be as
     * much as 1.5*maxDelayMs.
     */
    r) {
        void 0 === i && (i = 1e3), void 0 === e && (e = 1.5), void 0 === r && (r = 6e4), 
        this.zo = t, this.Fr = n, this.Yc = i, this.Xc = e, this.$c = r, this.Zc = 0, this.ta = null, 
        /** The last backoff attempt, as epoch milliseconds. */
        this.na = Date.now(), this.reset();
    }
    /**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */    return t.prototype.reset = function() {
        this.Zc = 0;
    }, 
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */
    t.prototype.ia = function() {
        this.Zc = this.$c;
    }, 
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */
    t.prototype.ea = function(t) {
        var n = this;
        // Cancel any pending backoff operation.
                this.cancel();
        // First schedule using the current base (which may be 0 and should be
        // honored as such).
        var i = Math.floor(this.Zc + this.ra()), e = Math.max(0, Date.now() - this.na), r = Math.max(0, i - e);
        // Guard against lastAttemptTime being in the future due to a clock change.
                this.Zc > 0 && qn("ExponentialBackoff", "Backing off for " + r + " ms (base delay: " + this.Zc + " ms, delay with jitter: " + i + " ms, last attempt: " + e + " ms ago)"), 
        this.ta = this.zo.iu(this.Fr, r, (function() {
            return n.na = Date.now(), t();
        })), 
        // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.Zc *= this.Xc, this.Zc < this.Yc && (this.Zc = this.Yc), this.Zc > this.$c && (this.Zc = this.$c);
    }, t.prototype.cancel = function() {
        null !== this.ta && (this.ta.cancel(), this.ta = null);
    }, 
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
    t.prototype.ra = function() {
        return (Math.random() - .5) * this.Zc;
    }, t;
}(), Ji = /** @class */ function() {
    function t(t, n, i, e, r, u) {
        this.zo = t, this.ua = i, this.connection = e, this.sa = r, this.listener = u, this.state = 0 /* Initial */ , 
        /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */
        this.oa = 0, this.ha = null, this.stream = null, this.ca = new Ki(t, n);
    }
    /**
     * Returns true if start() has been called and no error has occurred. True
     * indicates the stream is open or in the process of opening (which
     * encompasses respecting backoff, getting auth tokens, and starting the
     * actual RPC). Use isOpen() to determine if the stream is open and ready for
     * outbound requests.
     */    return t.prototype.aa = function() {
        return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
    }, 
    /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */
    t.prototype.fa = function() {
        return 2 /* Open */ === this.state;
    }, 
    /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */
    t.prototype.start = function() {
        3 /* Error */ !== this.state ? (Wn(0 /* Initial */ === this.state, "Already started"), 
        this.auth()) : this.la();
    }, 
    /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */
    t.prototype.stop = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return this.aa() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                  case 1:
                    t.sent(), t.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */
    t.prototype.da = function() {
        Wn(!this.aa(), "Can only inhibit backoff in a stopped state"), this.state = 0 /* Initial */ , 
        this.ca.reset();
    }, 
    /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */
    t.prototype.va = function() {
        var t = this;
        // Starts the idle time if we are in state 'Open' and are not yet already
        // running a timer (in which case the previous idle timeout still applies).
                this.fa() && null === this.ha && (this.ha = this.zo.iu(this.ua, 6e4, (function() {
            return t.wa();
        })));
    }, 
    /** Sends a message to the underlying stream. */
    t.prototype.ma = function(t) {
        this.pa(), this.stream.send(t);
    }, 
    /** Called by the idle timer when the stream should close due to inactivity. */
    t.prototype.wa = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                return this.fa() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
            }));
        }));
    }, 
    /** Marks the stream as active again. */
    t.prototype.pa = function() {
        this.ha && (this.ha.cancel(), this.ha = null);
    }, 
    /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState the intended state of the stream after closing.
     * @param error the error the connection was closed with.
     */
    t.prototype.close = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    // Notify the listener that the stream closed.
                    return Wn(this.aa(), "Only started streams should be closed."), Wn(3 /* Error */ === t || J(n), "Can't provide an error when not in an error state."), 
                    // Cancel any outstanding timers (they're guaranteed not to execute).
                    this.pa(), this.ca.cancel(), 
                    // Invalidates any stream-related callbacks (e.g. from auth or the
                    // underlying stream), guaranteeing they won't execute.
                    this.oa++, 3 /* Error */ !== t ? 
                    // If this is an intentional close ensure we don't delay our next connection attempt.
                    this.ca.reset() : n && n.code === T.RESOURCE_EXHAUSTED ? (
                    // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                    Bn(n.toString()), Bn("Using maximum backoff delay to prevent overloading the backend."), 
                    this.ca.ia()) : n && n.code === T.UNAUTHENTICATED && 
                    // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                    // just expired.
                    this.sa.l(), 
                    // Clean up the underlying stream because we are no longer interested in events.
                    null !== this.stream && (this.ba(), this.stream.close(), this.stream = null), 
                    // This state must be assigned before calling onClose() to allow the callback to
                    // inhibit backoff or otherwise manipulate the state in its non-started state.
                    this.state = t, [ 4 /*yield*/ , this.listener.ga(n) ];

                  case 1:
                    // Notify the listener that the stream closed.
                    return i.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */
    t.prototype.ba = function() {}, t.prototype.auth = function() {
        var t = this;
        Wn(0 /* Initial */ === this.state, "Must be in initial state to auth"), this.state = 1 /* Starting */;
        var n = this.ya(this.oa), i = this.oa;
        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                this.sa.getToken().then((function(n) {
            // Stream can be stopped while waiting for authentication.
            // TODO(mikelehen): We really should just use dispatchIfNotClosed
            // and let this dispatch onto the queue, but that opened a spec test can
            // of worms that I don't want to deal with in this PR.
            t.oa === i && 
            // Normally we'd have to schedule the callback on the AsyncQueue.
            // However, the following calls are safe to be called outside the
            // AsyncQueue since they don't chain asynchronous calls
            t._a(n);
        }), (function(i) {
            n((function() {
                var n = new E(T.UNKNOWN, "Fetching auth token failed: " + i.message);
                return t.Ia(n);
            }));
        }));
    }, t.prototype._a = function(t) {
        var n = this;
        Wn(1 /* Starting */ === this.state, "Trying to start stream in a non-starting state");
        var i = this.ya(this.oa);
        this.stream = this.Ta(t), this.stream.Ea((function() {
            i((function() {
                return Wn(1 /* Starting */ === n.state, "Expected stream to be in state Starting, but was " + n.state), 
                n.state = 2 /* Open */ , n.listener.Ea();
            }));
        })), this.stream.ga((function(t) {
            i((function() {
                return n.Ia(t);
            }));
        })), this.stream.onMessage((function(t) {
            i((function() {
                return n.onMessage(t);
            }));
        }));
    }, t.prototype.la = function() {
        var t = this;
        Wn(3 /* Error */ === this.state, "Should only perform backoff when in Error state"), 
        this.state = 4 /* Backoff */ , this.ca.ea((function() {
            return tslib.__awaiter(t, void 0, void 0, (function() {
                return tslib.__generator(this, (function(t) {
                    return Wn(4 /* Backoff */ === this.state, "Backoff elapsed but state is now: " + this.state), 
                    this.state = 0 /* Initial */ , this.start(), Wn(this.aa(), "PersistentStream should have started"), 
                    [ 2 /*return*/ ];
                }));
            }));
        }));
    }, 
    // Visible for tests
    t.prototype.Ia = function(t) {
        // In theory the stream could close cleanly, however, in our current model
        // we never expect this to happen because if we stop a stream ourselves,
        // this callback will never be called. To prevent cases where we retry
        // without a backoff accidentally, we set the stream to error in all cases.
        return Wn(this.aa(), "Can't handle server close on non-started stream"), qn("PersistentStream", "close with error: " + t), 
        this.stream = null, this.close(3 /* Error */ , t);
    }, 
    /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */
    t.prototype.ya = function(t) {
        var n = this;
        return function(i) {
            n.zo.Qr((function() {
                return n.oa === t ? i() : (qn("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                Promise.resolve());
            }));
        };
    }, t;
}(), Hi = /** @class */ function(t) {
    function i(n, i, e, r, u) {
        var s = t.call(this, n, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , i, e, u) || this;
        return s.serializer = r, s;
    }
    return tslib.__extends(i, t), i.prototype.Ta = function(t) {
        return this.connection.Da("Listen", t);
    }, i.prototype.onMessage = function(t) {
        // A successful response means the stream is healthy
        this.ca.reset();
        var n = this.serializer.ke(t), i = this.serializer.Oe(t);
        return this.listener.Ra(n, i);
    }, 
    /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */
    i.prototype.watch = function(t) {
        var n = {};
        n.database = this.serializer.De, n.addTarget = this.serializer.qn(t);
        var i = this.serializer.nr(t);
        i && (n.labels = i), this.ma(n);
    }, 
    /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */
    i.prototype.Sa = function(t) {
        var n = {};
        n.database = this.serializer.De, n.removeTarget = t, this.ma(n);
    }, i;
}(Ji), Yi = /** @class */ function(t) {
    function i(n, i, e, r, u) {
        var s = t.call(this, n, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , i, e, u) || this;
        return s.serializer = r, s.Aa = !1, 
        /**
         * The last received stream token from the server, used to acknowledge which
         * responses the client has processed. Stream tokens are opaque checkpoint
         * markers whose only real value is their inclusion in the next request.
         *
         * PersistentWriteStream manages propagating this value from responses to the
         * next request.
         */
        s.lastStreamToken = K.Mt, s;
    }
    return tslib.__extends(i, t), Object.defineProperty(i.prototype, "Ca", {
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */
        get: function() {
            return this.Aa;
        },
        enumerable: !0,
        configurable: !0
    }), 
    // Override of PersistentStream.start
    i.prototype.start = function() {
        this.Aa = !1, t.prototype.start.call(this);
    }, i.prototype.ba = function() {
        this.Aa && this.Pa([]);
    }, i.prototype.Ta = function(t) {
        return this.connection.Da("Write", t);
    }, i.prototype.onMessage = function(t) {
        if (
        // Always capture the last stream token.
        Wn(!!t.streamToken, "Got a write response without a stream token"), this.lastStreamToken = this.serializer.pe(t.streamToken), 
        this.Aa) {
            // A successful first write response means the stream is healthy,
            // Note, that we could consider a successful handshake healthy, however,
            // the write itself might be causing an error we want to back off from.
            this.ca.reset();
            var n = this.serializer.Ge(t.writeResults, t.commitTime), i = this.serializer.fromVersion(t.commitTime);
            return this.listener.Va(i, n);
        }
        // The first response is always the handshake response
        return Wn(!t.writeResults || 0 === t.writeResults.length, "Got mutation results for handshake"), 
        this.Aa = !0, this.listener.ka();
    }, 
    /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */
    i.prototype.Na = function() {
        Wn(this.fa(), "Writing handshake requires an opened stream"), Wn(!this.Aa, "Handshake already completed");
        // TODO(dimond): Support stream resumption. We intentionally do not set the
        // stream token on the handshake, ignoring any stream token we might have.
        var t = {};
        t.database = this.serializer.De, this.ma(t);
    }, 
    /** Sends a group of mutations to the Firestore backend to apply. */
    i.prototype.Pa = function(t) {
        var n = this;
        Wn(this.fa(), "Writing mutations requires an opened stream"), Wn(this.Aa, "Handshake must be complete before writing mutations"), 
        Wn(this.lastStreamToken.Lt() > 0, "Trying to write mutation without a token");
        var i = {
            streamToken: this.serializer.me(this.lastStreamToken),
            writes: t.map((function(t) {
                return n.serializer.Fe(t);
            }))
        };
        this.ma(i);
    }, i;
}(Ji), Xi = /** @class */ function() {
    function t(t, n, i, e) {
        this.zo = t, this.connection = n, this.credentials = i, this.serializer = e;
    }
    return t.prototype.Oa = function(t) {
        return new Yi(this.zo, this.connection, this.credentials, this.serializer, t);
    }, t.prototype.Fa = function(t) {
        return new Hi(this.zo, this.connection, this.credentials, this.serializer, t);
    }, t.prototype.commit = function(t) {
        var n = this, i = {
            database: this.serializer.De,
            writes: t.map((function(t) {
                return n.serializer.Fe(t);
            }))
        };
        return this.Ua("Commit", i).then((function(t) {
            return n.serializer.Ge(t.writeResults, t.commitTime);
        }));
    }, t.prototype.lookup = function(t) {
        var n = this, i = {
            database: this.serializer.De,
            documents: t.map((function(t) {
                return n.serializer._e(t);
            }))
        };
        return this.ja("BatchGetDocuments", i).then((function(i) {
            var e = hn();
            i.forEach((function(t) {
                var i = n.serializer.Ve(t);
                e = e.ut(i.key, i);
            }));
            var r = [];
            return t.forEach((function(t) {
                var n = e.get(t);
                Wn(!!n, "Missing entity in write response for " + t), r.push(n);
            })), r;
        }));
    }, 
    /** Gets an auth token and invokes the provided RPC. */
    t.prototype.Ua = function(t, n) {
        var i = this;
        return this.credentials.getToken().then((function(e) {
            return i.connection.Ua(t, n, e);
        })).catch((function(t) {
            throw t.code === T.UNAUTHENTICATED && i.credentials.l(), t;
        }));
    }, 
    /** Gets an auth token and invokes the provided RPC with streamed results. */
    t.prototype.ja = function(t, n) {
        var i = this;
        return this.credentials.getToken().then((function(e) {
            return i.connection.ja(t, n, e);
        })).catch((function(t) {
            throw t.code === T.UNAUTHENTICATED && i.credentials.l(), t;
        }));
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Validates that no arguments were passed in the invocation of functionName.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateNoArgs('myFunction', arguments);
 */
function $i(t, n) {
    if (0 !== n.length) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() does not support arguments, but was called with " + be(n.length, "argument") + ".");
}

/**
 * Validates the invocation of functionName has the exact number of arguments.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateExactNumberOfArgs('myFunction', arguments, 2);
 */ function Zi(t, n, i) {
    if (n.length !== i) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires " + be(i, "argument") + ", but was called with " + be(n.length, "argument") + ".");
}

/**
 * Validates the invocation of functionName has at least the provided number of
 * arguments (but can have many more).
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
 */ function te(t, n, i) {
    if (n.length < i) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires at least " + be(i, "argument") + ", but was called with " + be(n.length, "argument") + ".");
}

/**
 * Validates the invocation of functionName has number of arguments between
 * the values provided.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
 */ function ne(t, n, i, e) {
    if (n.length < i || n.length > e) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires between " + i + " and " + e + " arguments, but was called with " + be(n.length, "argument") + ".");
}

/**
 * Validates the provided argument is an array and has as least the expected
 * number of elements.
 */ function ie(t, n, i, e) {
    if (!(n instanceof Array) || n.length < e) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + i + " argument to be an array with at least " + be(e, "element") + ".");
}

/**
 * Validates the provided positional argument has the native JavaScript type
 * using typeof checks.
 */ function ee(t, n, i, e) {
    ae(t, n, pe(i) + " argument", e);
}

/**
 * Validates the provided argument has the native JavaScript type using
 * typeof checks or is undefined.
 */ function re(t, n, i, e) {
    void 0 !== e && ee(t, n, i, e);
}

/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks.
 */ function ue(t, n, i, e) {
    ae(t, n, i + " option", e);
}

/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks or is undefined.
 */ function se(t, n, i, e) {
    void 0 !== e && ue(t, n, i, e);
}

function oe(t, n, i, e, r) {
    void 0 !== e && function(t, n, i, e, r) {
        if (!(e instanceof Array)) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + n + " option to be an array, but it was: " + le(e));
        for (var u = 0; u < e.length; ++u) if (!r(e[u])) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires all " + n + " elements to be " + i + ", but the value at index " + u + " was: " + le(e[u]));
    }(t, n, i, e, r);
}

/**
 * Validates that the provided named option equals one of the expected values.
 */
/**
 * Validates that the provided named option equals one of the expected values or
 * is undefined.
 */
function he(t, n, i, e, r) {
    void 0 !== e && function(t, n, i, e, r) {
        for (var u = [], s = 0, o = r; s < o.length; s++) {
            var h = o[s];
            if (h === e) return;
            u.push(le(h));
        }
        var c = le(e);
        throw new E(T.INVALID_ARGUMENT, "Invalid value " + c + " provided to function " + t + '() for option "' + i + '". Acceptable values: ' + u.join(", "));
    }(t, 0, i, e, r);
}

/**
 * Validates that the provided argument is a valid enum.
 *
 * @param functionName Function making the validation call.
 * @param enums Array containing all possible values for the enum.
 * @param position Position of the argument in `functionName`.
 * @param argument Arugment to validate.
 */ function ce(t, n, i, e) {
    if (!n.some((function(t) {
        return t === e;
    }))) throw new E(T.INVALID_ARGUMENT, "Invalid value " + le(e) + " provided to function " + t + "() for its " + pe(i) + " argument. Acceptable values: " + n.join(", "));
}

/** Helper to validate the type of a provided input. */ function ae(t, n, i, e) {
    if (!("object" === n ? fe(e) : "non-empty string" === n ? "string" == typeof e && "" !== e : typeof e === n)) {
        var r = le(e);
        throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + i + " to be of type " + n + ", but it was: " + r);
    }
}

/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */ function fe(t) {
    return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
}

/** Returns a string describing the type / value of the provided input. */ function le(t) {
    if (void 0 === t) return "undefined";
    if (null === t) return "null";
    if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
    JSON.stringify(t);
    if ("number" == typeof t || "boolean" == typeof t) return "" + t;
    if ("object" == typeof t) {
        if (t instanceof Array) return "an array";
        var n = 
        /** Hacky method to try to get the constructor name for an object. */
        function(t) {
            if (t.constructor) {
                var n = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                if (n && n.length > 1) return n[1];
            }
            return null;
        }
        /** Validates the provided argument is defined. */ (t);
        return n ? "a custom " + n + " object" : "an object";
    }
    return "function" == typeof t ? "a function" : Gn("Unknown wrong type: " + typeof t);
}

function de(t, n, i) {
    if (void 0 === i) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires a valid " + pe(n) + " argument, but it was undefined.");
}

/**
 * Validates the provided positional argument is an object, and its keys and
 * values match the expected keys and types provided in optionTypes.
 */ function ve(t, n, i) {
    W(n, (function(n, e) {
        if (i.indexOf(n) < 0) throw new E(T.INVALID_ARGUMENT, "Unknown option '" + n + "' passed to function " + t + "(). Available options: " + i.join(", "));
    }));
}

/**
 * Helper method to throw an error that the provided argument did not pass
 * an instanceof check.
 */ function we(t, n, i, e) {
    var r = le(e);
    return new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + pe(i) + " argument to be a " + n + ", but it was: " + r);
}

function me(t, n, i) {
    if (i <= 0) throw new E(T.INVALID_ARGUMENT, 'Function "' + t + '()" requires its ' + pe(n) + " argument to be a positive number, but it was: " + i + ".");
}

/** Converts a number to its english word representation */ function pe(t) {
    switch (t) {
      case 1:
        return "first";

      case 2:
        return "second";

      case 3:
        return "third";

      default:
        return t + "th";
    }
}

/**
 * Formats the given word as plural conditionally given the preceding number.
 */ function be(t, n) {
    return t + " " + n + (1 === t ? "" : "s");
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Helper function to prevent instantiation through the constructor.
 *
 * This method creates a new constructor that throws when it's invoked.
 * The prototype of that constructor is then set to the prototype of the hidden
 * "class" to expose all the prototype methods and allow for instanceof
 * checks.
 *
 * To also make all the static methods available, all properties of the
 * original constructor are copied to the new constructor.
 */ function ge(t, n) {
    function i() {
        var t = "This constructor is private.";
        throw n && (t += " ", t += n), new E(T.INVALID_ARGUMENT, t);
    }
    // Make sure instanceof checks work and all methods are exposed on the public
    // constructor
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return i.prototype = t.prototype, 
    // Copy any static methods/members
    Object.assign(i, t), i;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Helper function to assert Uint8Array is available at runtime. */ function ye() {
    if ("undefined" == typeof Uint8Array) throw new E(T.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}

/** Helper function to assert Base64 functions are available at runtime. */ function _e() {
    if (!jn.xt().xa) throw new E(T.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}

/**
 * Immutable class holding a blob (binary data).
 * This class is directly exposed in the public API.
 *
 * Note that while you can't hide the constructor in JavaScript code, we are
 * using the hack above to make sure no-one outside this module can call it.
 */ var Ie = /** @class */ function() {
    function t(t) {
        _e(), this.La = t;
    }
    return t.fromBase64String = function(n) {
        Zi("Blob.fromBase64String", arguments, 1), ee("Blob.fromBase64String", "string", 1, n), 
        _e();
        try {
            return new t(K.fromBase64String(n));
        } catch (t) {
            throw new E(T.INVALID_ARGUMENT, "Failed to construct Blob from Base64 string: " + t);
        }
    }, t.fromUint8Array = function(n) {
        if (Zi("Blob.fromUint8Array", arguments, 1), ye(), !(n instanceof Uint8Array)) throw we("Blob.fromUint8Array", "Uint8Array", 1, n);
        return new t(K.fromUint8Array(n));
    }, t.prototype.toBase64 = function() {
        return Zi("Blob.toBase64", arguments, 0), _e(), this.La.toBase64();
    }, t.prototype.toUint8Array = function() {
        return Zi("Blob.toUint8Array", arguments, 0), ye(), this.La.toUint8Array();
    }, t.prototype.toString = function() {
        return "Blob(base64: " + this.toBase64() + ")";
    }, t.prototype.isEqual = function(t) {
        return this.La.isEqual(t.La);
    }, t;
}(), Te = ge(Ie, "Use Blob.fromUint8Array() or Blob.fromBase64String() instead."), Ee = /** @class */ function() {
    /**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames A list of field names.
     */
    function t() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        ie("FieldPath", t, "fieldNames", 1);
        for (var i = 0; i < t.length; ++i) if (ee("FieldPath", "string", i, t[i]), 0 === t[i].length) throw new E(T.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this.Ma = new U(t);
    }
    return t.documentId = function() {
        return t.qa;
    }, t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) throw we("isEqual", "FieldPath", 1, n);
        return this.Ma.isEqual(n.Ma);
    }, 
    /**
     * Internal Note: The backend doesn't technically support querying by
     * document ID. Instead it queries by the entire document name (full path
     * included), but in the cases we currently support documentId(), the net
     * effect is the same.
     */
    t.qa = new t(U.Z().J()), t;
}(), De = new RegExp("[~\\*/\\[\\]]");

// Public instance that disallows construction at runtime. This constructor is
// used when exporting Blob on firebase.firestore.Blob and will be called Blob
// publicly. Internally we still use Blob which has a type checked private
// constructor. Note that Blob and PublicBlob can be used interchangeably in
// instanceof checks.
// For our internal TypeScript code PublicBlob doesn't exist as a type, and so
// we need to use Blob as type and export it too.
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * An opaque base class for FieldValue sentinel objects in our public API,
 * with public static methods for creating said sentinel objects.
 */
var Re = /** @class */ function() {
    function t(t) {
        this.Ba = t;
    }
    return t.delete = function() {
        return $i("FieldValue.delete", arguments), Se.instance;
    }, t.serverTimestamp = function() {
        return $i("FieldValue.serverTimestamp", arguments), Ae.instance;
    }, t.arrayUnion = function() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we need access to the Firestore instance.
        return te("FieldValue.arrayUnion", arguments, 1), new Ce(t);
    }, t.arrayRemove = function() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we need access to the Firestore instance.
        return te("FieldValue.arrayRemove", arguments, 1), new Pe(t);
    }, t.increment = function(t) {
        return ee("FieldValue.increment", "number", 1, t), Zi("FieldValue.increment", arguments, 1), 
        new Ve(t);
    }, t.prototype.isEqual = function(t) {
        return this === t;
    }, t;
}(), Se = /** @class */ function(t) {
    function i() {
        return t.call(this, "FieldValue.delete") || this;
    }
    /** Singleton instance. */    return tslib.__extends(i, t), i.instance = new i, i;
}(Re), Ae = /** @class */ function(t) {
    function i() {
        return t.call(this, "FieldValue.serverTimestamp") || this;
    }
    /** Singleton instance. */    return tslib.__extends(i, t), i.instance = new i, i;
}(Re), Ce = /** @class */ function(t) {
    function i(n) {
        var i = t.call(this, "FieldValue.arrayUnion") || this;
        return i.Qa = n, i;
    }
    return tslib.__extends(i, t), i;
}(Re), Pe = /** @class */ function(t) {
    function i(n) {
        var i = t.call(this, "FieldValue.arrayRemove") || this;
        return i.Qa = n, i;
    }
    return tslib.__extends(i, t), i;
}(Re), Ve = /** @class */ function(t) {
    function i(n) {
        var i = t.call(this, "FieldValue.increment") || this;
        return i.Ga = n, i;
    }
    return tslib.__extends(i, t), i;
}(Re), ke = ge(Re, "Use FieldValue.<field>() instead."), Ne = /** @class */ function() {
    function t(t, n) {
        if (Zi("GeoPoint", arguments, 2), ee("GeoPoint", "number", 1, t), ee("GeoPoint", "number", 2, n), 
        !isFinite(t) || t < -90 || t > 90) throw new E(T.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
        if (!isFinite(n) || n < -180 || n > 180) throw new E(T.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + n);
        this.Wa = t, this.za = n;
    }
    return Object.defineProperty(t.prototype, "latitude", {
        /**
         * Returns the latitude of this geo point, a number between -90 and 90.
         */
        get: function() {
            return this.Wa;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "longitude", {
        /**
         * Returns the longitude of this geo point, a number between -180 and 180.
         */
        get: function() {
            return this.za;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(t) {
        return this.Wa === t.Wa && this.za === t.za;
    }, 
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */
    t.prototype.A = function(t) {
        return Kn(this.Wa, t.Wa) || Kn(this.za, t.za);
    }, t;
}(), Oe = /^__.*__$/, Fe = /** @class */ function() {
    function t(t, n, i) {
        this.data = t, this.en = n, this.fieldTransforms = i;
    }
    return t.prototype.Ka = function(t, n) {
        var i = [];
        return null !== this.en ? i.push(new Vt(t, this.data, this.en, n)) : i.push(new Pt(t, this.data, n)), 
        this.fieldTransforms.length > 0 && i.push(new kt(t, this.fieldTransforms)), i;
    }, t;
}(), Ue = /** @class */ function() {
    function t(t, n, i) {
        this.data = t, this.en = n, this.fieldTransforms = i;
    }
    return t.prototype.Ka = function(t, n) {
        var i = [ new Vt(t, this.data, this.en, n) ];
        return this.fieldTransforms.length > 0 && i.push(new kt(t, this.fieldTransforms)), 
        i;
    }, t;
}();

function je(t) {
    switch (t) {
      case 0 /* Set */ :
 // fall through
              case 2 /* MergeSet */ :
 // fall through
              case 1 /* Update */ :
        return !0;

      case 3 /* Argument */ :
      case 4 /* ArrayArgument */ :
        return !1;

      default:
        throw Gn("Unexpected case for UserDataSource: " + t);
    }
}

/** A "context" object passed around while parsing user data. */ var xe = /** @class */ function() {
    /**
     * Initializes a ParseContext with the given source and path.
     *
     * @param dataSource Indicates what kind of API method this data came from.
     * @param methodName The name of the method the user called to create this
     *     ParseContext.
     * @param path A path within the object being parsed. This could be an empty
     *     path (in which case the context represents the root of the data being
     *     parsed), or a nonempty path (indicating the context represents a nested
     *     location within the data).
     * @param arrayElement Whether or not this context corresponds to an element
     *     of an array.
     * @param fieldTransforms A mutable list of field transforms encountered while
     *     parsing the data.
     * @param fieldMask A mutable list of field paths encountered while parsing
     *     the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */
    function t(t, n, i, e, r, u) {
        this.Ja = t, this.methodName = n, this.path = i, this.Ha = e, 
        // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === r && this.Ya(), this.Ha = void 0 !== e && e, this.fieldTransforms = r || [], 
        this.en = u || [];
    }
    return t.prototype.Xa = function(n) {
        var i = null == this.path ? null : this.path.child(n), e = new t(this.Ja, this.methodName, i, 
        /*arrayElement=*/ !1, this.fieldTransforms, this.en);
        return e.$a(n), e;
    }, t.prototype.Za = function(n) {
        var i = null == this.path ? null : this.path.child(n), e = new t(this.Ja, this.methodName, i, 
        /*arrayElement=*/ !1, this.fieldTransforms, this.en);
        return e.Ya(), e;
    }, t.prototype.tf = function(n) {
        // TODO(b/34871131): We don't support array paths right now; so make path
        // null.
        return new t(this.Ja, this.methodName, 
        /*path=*/ null, 
        /*arrayElement=*/ !0, this.fieldTransforms, this.en);
    }, t.prototype.nf = function(t) {
        var n = null === this.path || this.path.M() ? "" : " (found in field " + this.path.toString() + ")";
        return new E(T.INVALID_ARGUMENT, "Function " + this.methodName + "() called with invalid data. " + t + n);
    }, 
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
    t.prototype.contains = function(t) {
        return void 0 !== this.en.find((function(n) {
            return t.G(n);
        })) || void 0 !== this.fieldTransforms.find((function(n) {
            return t.G(n.field);
        }));
    }, t.prototype.Ya = function() {
        // TODO(b/34871131): Remove null check once we have proper paths for fields
        // within arrays.
        if (null !== this.path) for (var t = 0; t < this.path.length; t++) this.$a(this.path.get(t));
    }, t.prototype.$a = function(t) {
        if (0 === t.length) throw this.nf("Document fields must not be empty");
        if (je(this.Ja) && Oe.test(t)) throw this.nf('Document fields cannot begin and end with "__"');
    }, t;
}(), Le = function(t, n) {
    this.ae = t, this.key = n;
}, Me = /** @class */ function() {
    function t(t, n) {
        this.serializer = t, this.if = n;
    }
    /** Parse document data from a non-merge set() call. */    return t.prototype.ef = function(t, n) {
        var i = new xe(0 /* Set */ , t, U.Y);
        Be("Data must be an object, but it was:", i, n);
        var e = this.rf(n, i);
        return new Fe(new Ft(e), 
        /* fieldMask= */ null, i.fieldTransforms);
    }, 
    /** Parse document data from a set() call with '{merge:true}'. */
    t.prototype.uf = function(t, n, i) {
        var e = new xe(2 /* MergeSet */ , t, U.Y);
        Be("Data must be an object, but it was:", e, n);
        var r, u, s = this.rf(n, e);
        if (i) {
            for (var o = new B(U.F), h = 0, c = i; h < c.length; h++) {
                var a = c[h], f = void 0;
                if (a instanceof Ee) f = a.Ma; else {
                    if ("string" != typeof a) throw Gn("Expected stringOrFieldPath to be a string or a FieldPath");
                    f = Ge(t, a);
                }
                if (!e.contains(f)) throw new E(T.INVALID_ARGUMENT, "Field '" + f + "' is specified in your field mask but missing from your input data.");
                o = o.add(f);
            }
            r = Dt.Kt(o), u = e.fieldTransforms.filter((function(t) {
                return r.Ht(t.field);
            }));
        } else r = Dt.Jt(e.en), u = e.fieldTransforms;
        return new Fe(new Ft(s), r, u);
    }, 
    /** Parse update data from an update() call. */
    t.prototype.sf = function(t, n) {
        var i = this, e = new xe(1 /* Update */ , t, U.Y);
        Be("Data must be an object, but it was:", e, n);
        var r = new B(U.F), u = Ft.ln();
        W(n, (function(n, s) {
            var o = Ge(t, n), h = e.Za(o);
            if ((s = i.hf(s, h)) instanceof Se) 
            // Add it to the field mask, but don't add anything to updateData.
            r = r.add(o); else {
                var c = i.cf(s, h);
                null != c && (r = r.add(o), u.set(o, c));
            }
        }));
        var s = Dt.Kt(r);
        return new Ue(u.on(), s, e.fieldTransforms);
    }, 
    /** Parse update data from a list of field/value arguments. */
    t.prototype.af = function(t, n, i, e) {
        var r = new xe(1 /* Update */ , t, U.Y), u = [ Qe(t, n) ], s = [ i ];
        if (e.length % 2 != 0) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() needs to be called with an even number of arguments that alternate between field names and values.");
        for (var o = 0; o < e.length; o += 2) u.push(Qe(t, e[o])), s.push(e[o + 1]);
        var h = new B(U.F), c = Ft.ln();
        for (o = 0; o < u.length; ++o) {
            var a = u[o], f = r.Za(a), l = this.hf(s[o], f);
            if (l instanceof Se) 
            // Add it to the field mask, but don't add anything to updateData.
            h = h.add(a); else {
                var d = this.cf(l, f);
                null != d && (h = h.add(a), c.set(a, d));
            }
        }
        var v = Dt.Kt(h);
        return new Ue(c.on(), v, r.fieldTransforms);
    }, 
    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */
    t.prototype.ff = function(t, n, i) {
        void 0 === i && (i = !1);
        var e = new xe(i ? 4 /* ArrayArgument */ : 3 /* Argument */ , t, U.Y), r = this.cf(n, e);
        return Wn(null != r, "Parsed data should not be null."), Wn(0 === e.fieldTransforms.length, "Field transforms should have been disallowed."), 
        r;
    }, 
    /** Sends data through this.preConverter, handling any thrown errors. */
    t.prototype.hf = function(t, n) {
        try {
            return this.if(t);
        } catch (t) {
            var i = We(t);
            throw n.nf(i);
        }
    }, 
    /**
     * Internal helper for parsing user data.
     *
     * @param input Data to be parsed.
     * @param context A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @return The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */
    t.prototype.cf = function(t, n) {
        if (qe(t = this.hf(t, n))) return Be("Unsupported field value:", n, t), this.rf(t, n);
        if (t instanceof Re) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        return this.lf(t, n), null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        n.path && n.en.push(n.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (n.Ha && 4 /* ArrayArgument */ !== n.Ja) throw n.nf("Nested arrays are not supported");
            return this.df(t, n);
        }
        return this.vf(t, n);
    }, t.prototype.rf = function(t, n) {
        var i = this, e = {};
        return z(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        n.path && n.path.length > 0 && n.en.push(n.path) : W(t, (function(t, r) {
            var u = i.cf(r, n.Xa(t));
            null != u && (e[t] = u);
        })), {
            mapValue: {
                fields: e
            }
        };
    }, t.prototype.df = function(t, n) {
        for (var i = [], e = 0, r = 0, u = t; r < u.length; r++) {
            var s = u[r], o = this.cf(s, n.tf(e));
            null == o && (
            // Just include nulls in the array for fields being replaced with a
            // sentinel.
            o = {
                nullValue: "NULL_VALUE"
            }), i.push(o), e++;
        }
        return {
            arrayValue: {
                values: i
            }
        };
    }, 
    /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
    t.prototype.lf = function(t, n) {
        // Sentinels are only supported with writes, and not within arrays.
        if (!je(n.Ja)) throw n.nf(t.Ba + "() can only be used with update() and set()");
        if (null === n.path) throw n.nf(t.Ba + "() is not currently supported inside arrays");
        if (t instanceof Se) {
            if (2 /* MergeSet */ !== n.Ja) throw 1 /* Update */ === n.Ja ? (Wn(n.path.length > 0, "FieldValue.delete() at the top level should have already been handled."), 
            n.nf("FieldValue.delete() can only appear at the top level of your update data")) : n.nf("FieldValue.delete() cannot be used with set() unless you pass {merge:true}");
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            n.en.push(n.path);
        } else if (t instanceof Ae) n.fieldTransforms.push(new Rt(n.path, bt.instance)); else if (t instanceof Ce) {
            var i = this.wf(t.Ba, t.Qa), e = new gt(i);
            n.fieldTransforms.push(new Rt(n.path, e));
        } else if (t instanceof Pe) {
            i = this.wf(t.Ba, t.Qa);
            var r = new yt(i);
            n.fieldTransforms.push(new Rt(n.path, r));
        } else if (t instanceof Ve) {
            var u = this.ff("FieldValue.increment", t.Ga), s = new _t(this.serializer, u);
            n.fieldTransforms.push(new Rt(n.path, s));
        } else Gn("Unknown FieldValue type: " + t);
    }, 
    /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @return The parsed value
     */
    t.prototype.vf = function(t, n) {
        if (null === t) return {
            nullValue: "NULL_VALUE"
        };
        if ("number" == typeof t) return this.serializer.we(t);
        if ("boolean" == typeof t) return {
            booleanValue: t
        };
        if ("string" == typeof t) return {
            stringValue: t
        };
        if (t instanceof Date) {
            var i = V.fromDate(t);
            return {
                timestampValue: this.serializer.O(i)
            };
        }
        if (t instanceof V) {
            // Firestore backend truncates precision down to microseconds. To ensure
            // offline mode works the same with regards to truncation, perform the
            // truncation immediately without waiting for the backend to do that.
            i = new V(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
            return {
                timestampValue: this.serializer.O(i)
            };
        }
        if (t instanceof Ne) return {
            geoPointValue: {
                latitude: t.latitude,
                longitude: t.longitude
            }
        };
        if (t instanceof Ie) return {
            bytesValue: this.serializer.me(t)
        };
        if (t instanceof Le) return {
            referenceValue: this.serializer.be(t.key.path, t.ae)
        };
        throw n.nf("Unsupported field value: " + le(t));
    }, t.prototype.wf = function(t, n) {
        var i = this;
        return n.map((function(n, e) {
            // Although array transforms are used with writes, the actual elements
            // being unioned or removed are not considered writes since they cannot
            // contain any FieldValue sentinels, etc.
            var r = new xe(3 /* Argument */ , t, U.Y);
            return i.cf(n, r.tf(e));
        }));
    }, t;
}();

/**
 * A placeholder object for DocumentReferences in this file, in order to
 * avoid a circular dependency. See the comments for `DataPreConverter` for
 * the full context.
 */
/**
 * Checks whether an object looks like a JSON object that should be converted
 * into a struct. Normal class/prototype instances are considered to look like
 * JSON objects since they should be converted to a struct value. Arrays, Dates,
 * GeoPoints, etc. are not considered to look like JSON objects since they map
 * to specific FieldValue types other than ObjectValue.
 */
function qe(t) {
    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof V || t instanceof Ne || t instanceof Ie || t instanceof Le || t instanceof Re);
}

function Be(t, n, i) {
    if (!qe(i) || !fe(i)) {
        var e = le(i);
        throw "an object" === e ? n.nf(t + " a custom object") : n.nf(t + " " + e);
    }
}

/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function Qe(t, n) {
    if (n instanceof Ee) return n.Ma;
    if ("string" == typeof n) return Ge(t, n);
    throw new E(T.INVALID_ARGUMENT, "Function " + t + "() called with invalid data. Field path arguments must be of type string or FieldPath.");
}

/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName The publicly visible method name
 * @param path The dot-separated string form of a field path which will be split
 * on dots.
 */ function Ge(t, n) {
    try {
        /**
 * Parses a field path string into a FieldPath, treating dots as separators.
 */
        return function(t) {
            if (t.search(De) >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not contain '~', '*', '/', '[', or ']'");
            try {
                return new (Ee.bind.apply(Ee, tslib.__spreadArrays([ void 0 ], t.split("."))));
            } catch (n) {
                throw new E(T.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
            }
        }(n).Ma;
    } catch (n) {
        var i = We(n);
        throw new E(T.INVALID_ARGUMENT, "Function " + t + "() called with invalid data. " + i);
    }
}

/**
 * Extracts the message from a caught exception, which should be an Error object
 * though JS doesn't guarantee that.
 */ function We(t) {
    return t instanceof Error ? t.message : t.toString();
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */ var ze = /** @class */ function() {
    function t(t) {
        this.mf = t, 
        // The version of each document that was read during this transaction.
        this.pf = dn(), this.mutations = [], this.bf = !1, 
        /**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */
        this.gf = null, 
        /**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */
        this.yf = new Set;
    }
    return t.prototype.lookup = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i = this;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    if (this._f(), this.mutations.length > 0) throw new E(T.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                    return [ 4 /*yield*/ , this.mf.lookup(t) ];

                  case 1:
                    return (n = e.sent()).forEach((function(t) {
                        t instanceof Lt || t instanceof xt ? i.If(t) : Gn("Document in a transaction was a " + t.constructor.name);
                    })), [ 2 /*return*/ , n ];
                }
            }));
        }));
    }, t.prototype.set = function(t, n) {
        this.write(n.Ka(t, this.tn(t))), this.yf.add(t);
    }, t.prototype.update = function(t, n) {
        try {
            this.write(n.Ka(t, this.Tf(t)));
        } catch (t) {
            this.gf = t;
        }
        this.yf.add(t);
    }, t.prototype.delete = function(t) {
        this.write([ new Nt(t, this.tn(t)) ]), this.yf.add(t);
    }, t.prototype.commit = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t, n = this;
            return tslib.__generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    if (this._f(), this.gf) throw this.gf;
                    return t = this.pf, 
                    // For each mutation, note that the doc was written.
                    this.mutations.forEach((function(n) {
                        t = t.remove(n.key);
                    })), 
                    // For each document that was read but not written to, we want to perform
                    // a `verify` operation.
                    t.forEach((function(t, i) {
                        n.mutations.push(new Ot(t, n.tn(t)));
                    })), [ 4 /*yield*/ , this.mf.commit(this.mutations) ];

                  case 1:
                    return i.sent(), this.bf = !0, [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.If = function(t) {
        var n;
        if (t instanceof xt) n = t.version; else {
            if (!(t instanceof Lt)) throw Gn("Document in a transaction was a " + t.constructor.name);
            // For deleted docs, we must use baseVersion 0 when we overwrite them.
            n = k.V();
        }
        var i = this.pf.get(t.key);
        if (null !== i) {
            if (!n.isEqual(i)) 
            // This transaction will fail no matter what.
            throw new E(T.ABORTED, "Document version changed between two reads.");
        } else this.pf = this.pf.ut(t.key, n);
    }, 
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */
    t.prototype.tn = function(t) {
        var n = this.pf.get(t);
        return !this.yf.has(t) && n ? At.updateTime(n) : At.NONE;
    }, 
    /**
     * Returns the precondition for a document if the operation is an update.
     */
    t.prototype.Tf = function(t) {
        var n = this.pf.get(t);
        // The first time a document is written, we want to take into account the
        // read time and existence
                if (!this.yf.has(t) && n) {
            if (n.isEqual(k.V())) 
            // The document doesn't exist, so fail the transaction.
            // This has to be validated locally because you can't send a
            // precondition that a document does not exist without changing the
            // semantics of the backend write to be an insert. This is the reverse
            // of what we want, since we want to assert that the document doesn't
            // exist but then send the update and have it fail. Since we can't
            // express that to the backend, we have to validate locally.
            // Note: this can change once we can send separate verify writes in the
            // transaction.
            throw new E(T.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            // Document exists, base precondition on document update time.
                        return At.updateTime(n);
        }
        // Document was not read, so we just use the preconditions for a blind
        // update.
        return At.exists(!0);
    }, t.prototype.write = function(t) {
        this._f(), this.mutations = this.mutations.concat(t);
    }, t.prototype._f = function() {
        Wn(!this.bf, "A transaction object cannot be used after its update callback has been invoked.");
    }, t;
}(), Ke = /** @class */ function() {
    function t(t, n) {
        this.Or = t, this.Ho = n, 
        /** The current OnlineState. */
        this.state = "Unknown" /* Unknown */ , 
        /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */
        this.Ef = 0, 
        /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */
        this.Df = null, 
        /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */
        this.Rf = !0;
    }
    /**
     * Called by RemoteStore when a watch stream is started (including on each
     * backoff attempt).
     *
     * If this is the first attempt, it sets the OnlineState to Unknown and starts
     * the onlineStateTimer.
     */    return t.prototype.Sf = function() {
        var t = this;
        0 === this.Ef && (this.Af("Unknown" /* Unknown */), Wn(null === this.Df, "onlineStateTimer shouldn't be started yet"), 
        this.Df = this.Or.iu("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
            // NOTE: handleWatchStreamFailure() will continue to increment
            // watchStreamFailures even though we are already marked Offline,
            // but this is non-harmful.
            return t.Df = null, Wn("Unknown" /* Unknown */ === t.state, "Timer should be canceled if we transitioned to a different state."), 
            t.Cf("Backend didn't respond within 10 seconds."), t.Af("Offline" /* Offline */), 
            Promise.resolve();
        })));
    }, 
    /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */
    t.prototype.Pf = function(t) {
        "Online" /* Online */ === this.state ? (this.Af("Unknown" /* Unknown */), 
        // To get to OnlineState.Online, set() must have been called which would
        // have reset our heuristics.
        Wn(0 === this.Ef, "watchStreamFailures must be 0"), Wn(null === this.Df, "onlineStateTimer must be null")) : (this.Ef++, 
        this.Ef >= 1 && (this.Vf(), this.Cf("Connection failed 1 times. Most recent error: " + t.toString()), 
        this.Af("Offline" /* Offline */)));
    }, 
    /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */
    t.prototype.set = function(t) {
        this.Vf(), this.Ef = 0, "Online" /* Online */ === t && (
        // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        this.Rf = !1), this.Af(t);
    }, t.prototype.Af = function(t) {
        t !== this.state && (this.state = t, this.Ho(t));
    }, t.prototype.Cf = function(t) {
        var n = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
        this.Rf ? (Bn(n), this.Rf = !1) : qn("OnlineStateTracker", n);
    }, t.prototype.Vf = function() {
        null !== this.Df && (this.Df.cancel(), this.Df = null);
    }, t;
}(), Je = /** @class */ function() {
    function t(
    /**
     * The local store, used to fill the write pipeline with outbound mutations.
     */
    t, 
    /** The client-side proxy for interacting with the backend. */
    n, i, e, s) {
        var o = this;
        this.kf = t, this.mf = n, 
        /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */
        this.Nf = [], 
        /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */
        this.Of = new Map, this.Ff = null, 
        /**
         * Set to true by enableNetwork() and false by disableNetwork() and indicates
         * the user-preferred network state.
         */
        this.networkEnabled = !1, this.isPrimary = !1, this.Uf = s, this.Uf.jf((function(t) {
            i.Qr((function() {
                return tslib.__awaiter(o, void 0, void 0, (function() {
                    return tslib.__generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return this.xf() ? (qn("RemoteStore", "Restarting streams for network reachability change."), 
                            [ 4 /*yield*/ , this.Lf() ]) : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        })), this.Mf = new Ke(i, e), 
        // Create streams (but note they're not started yet).
        this.qf = this.mf.Fa({
            Ea: this.Bf.bind(this),
            ga: this.Qf.bind(this),
            Ra: this.Gf.bind(this)
        }), this.Wf = this.mf.Oa({
            Ea: this.zf.bind(this),
            ga: this.Kf.bind(this),
            ka: this.Jf.bind(this),
            Va: this.Va.bind(this)
        });
    }
    /**
     * Starts up the remote store, creating streams, restoring state from
     * LocalStore, etc.
     */    return t.prototype.start = function() {
        return this.enableNetwork();
    }, 
    /** Re-enables the network. Idempotent. */
    t.prototype.enableNetwork = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t;
            return tslib.__generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return this.networkEnabled = !0, this.xf() ? (t = this.Wf, [ 4 /*yield*/ , this.kf.uo() ]) : [ 3 /*break*/ , 3 ];

                  case 1:
                    // This will start the write stream if necessary.
                    return t.lastStreamToken = n.sent(), this.Hf() ? this.Yf() : this.Mf.set("Unknown" /* Unknown */), 
                    [ 4 /*yield*/ , this.Xf() ];

                  case 2:
                    // This will start the write stream if necessary.
                    n.sent(), n.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */
    t.prototype.disableNetwork = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return this.networkEnabled = !1, [ 4 /*yield*/ , this.$f() ];

                  case 1:
                    return t.sent(), 
                    // Set the OnlineState to Offline so get()s return from cache, etc.
                    this.Mf.set("Offline" /* Offline */), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.$f = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4 /*yield*/ , this.Wf.stop() ];

                  case 1:
                    return t.sent(), [ 4 /*yield*/ , this.qf.stop() ];

                  case 2:
                    return t.sent(), this.Nf.length > 0 && (qn("RemoteStore", "Stopping write stream with " + this.Nf.length + " pending writes"), 
                    this.Nf = []), this.Zf(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.shutdown = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return qn("RemoteStore", "RemoteStore shutting down."), this.networkEnabled = !1, 
                    [ 4 /*yield*/ , this.$f() ];

                  case 1:
                    return t.sent(), this.Uf.shutdown(), 
                    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                    // triggering spurious listener events with cached data, etc.
                    this.Mf.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */
    t.prototype.listen = function(t) {
        this.Of.has(t.targetId) || (
        // Mark this as something the client is currently listening for.
        this.Of.set(t.targetId, t), this.Hf() ? 
        // The listen will be sent in onWatchStreamOpen
        this.Yf() : this.qf.fa() && this.tl(t));
    }, 
    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */
    t.prototype.nl = function(t) {
        Wn(this.Of.has(t), "unlisten called on target no currently watched: " + t), this.Of.delete(t), 
        this.qf.fa() && this.il(t), 0 === this.Of.size && (this.qf.fa() ? this.qf.va() : this.xf() && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        this.Mf.set("Unknown" /* Unknown */));
    }, 
    /** {@link TargetMetadataProvider.getTargetDataForTarget} */
    t.prototype.ce = function(t) {
        return this.Of.get(t) || null;
    }, 
    /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */
    t.prototype.he = function(t) {
        return this.Jo.he(t);
    }, 
    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */
    t.prototype.tl = function(t) {
        this.Ff.Mi(t.targetId), this.qf.watch(t);
    }, 
    /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */
    t.prototype.il = function(t) {
        this.Ff.Mi(t), this.qf.Sa(t);
    }, t.prototype.Yf = function() {
        Wn(this.Hf(), "startWatchStream() called when shouldStartWatchStream() is false."), 
        this.Ff = new Sn(this), this.qf.start(), this.Mf.Sf();
    }, 
    /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */
    t.prototype.Hf = function() {
        return this.xf() && !this.qf.aa() && this.Of.size > 0;
    }, t.prototype.xf = function() {
        return this.isPrimary && this.networkEnabled;
    }, t.prototype.Zf = function() {
        this.Ff = null;
    }, t.prototype.Bf = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t = this;
            return tslib.__generator(this, (function(n) {
                return this.Of.forEach((function(n, i) {
                    t.tl(n);
                })), [ 2 /*return*/ ];
            }));
        }));
    }, t.prototype.Qf = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(n) {
                return void 0 === t && 
                // Graceful stop (due to stop() or idle timeout). Make sure that's
                // desirable.
                Wn(!this.Hf(), "Watch stream was stopped gracefully while still needed."), this.Zf(), 
                // If we still need the watch stream, retry the connection.
                this.Hf() ? (this.Mf.Pf(t), this.Yf()) : 
                // No need to restart watch stream because there are no active targets.
                // The online state is set to unknown because there is no active attempt
                // at establishing a connection
                this.Mf.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
            }));
        }));
    }, t.prototype.Gf = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    // Mark the client as online since we got a message from the server
                    return this.Mf.set("Online" /* Online */), t instanceof Dn && 2 /* Removed */ === t.state && t.cause ? [ 2 /*return*/ , this.el(t) ] : (t instanceof Tn ? this.Ff.Ji(t) : t instanceof En ? this.Ff.ie(t) : (Wn(t instanceof Dn, "Expected watchChange to be an instance of WatchTargetChange"), 
                    this.Ff.Xi(t)), n.isEqual(k.MIN) ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , this.kf.oo() ]);

                  case 1:
                    return i = e.sent(), n.k(i) >= 0 ? [ 4 /*yield*/ , this.rl(n) ] : [ 3 /*break*/ , 3 ];

                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.MIN.
                                      case 2:
                    // We have received a target change with a global snapshot if the snapshot
                    // version is not equal to SnapshotVersion.MIN.
                    e.sent(), e.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Takes a batch of changes from the Datastore, repackages them as a
     * RemoteEvent, and passes that on to the listener, which is typically the
     * SyncEngine.
     */
    t.prototype.rl = function(t) {
        var n = this;
        Wn(!t.isEqual(k.MIN), "Can't raise event for unknown SnapshotVersion");
        var i = this.Ff.ue(t);
        // Update in-memory resume tokens. LocalStore will update the
        // persistent view of these when applying the completed RemoteEvent.
                // Finally raise remote event
        return i.wi.forEach((function(i, e) {
            if (i.resumeToken.Lt() > 0) {
                var r = n.Of.get(e);
                // A watched target might have been removed already.
                                r && n.Of.set(e, r.ei(i.resumeToken, t));
            }
        })), 
        // Re-establish listens for the targets that have been invalidated by
        // existence filter mismatches.
        i.mi.forEach((function(t) {
            var i = n.Of.get(t);
            if (i) {
                // Clear the resume token for the target, since we're in a known mismatch
                // state.
                n.Of.set(t, i.ei(K.Mt, i.ni)), 
                // Cause a hard reset by unwatching and rewatching immediately, but
                // deliberately don't send a resume token so that we get a full update.
                n.il(t);
                // Mark the target we send as being on behalf of an existence filter
                // mismatch, but don't actually retain that in listenTargets. This ensures
                // that we flag the first re-listen this way without impacting future
                // listens of this target (that might happen e.g. on reconnect).
                var e = new en(i.target, t, 1 /* ExistenceFilterMismatch */ , i.sequenceNumber);
                n.tl(e);
            }
        })), this.Jo.ho(i);
    }, 
    /** Handles an error on a target */
    t.prototype.el = function(t) {
        var n = this;
        Wn(!!t.cause, "Handling target error without a cause");
        var i = t.cause, e = Promise.resolve();
        return t.targetIds.forEach((function(t) {
            e = e.then((function() {
                return tslib.__awaiter(n, void 0, void 0, (function() {
                    return tslib.__generator(this, (function(n) {
                        // A watched target might have been removed already.
                        return this.Of.has(t) ? (this.Of.delete(t), this.Ff.removeTarget(t), [ 2 /*return*/ , this.Jo.ul(t, i) ]) : [ 2 /*return*/ ];
                    }));
                }));
            }));
        })), e;
    }, 
    /**
     * Attempts to fill our write pipeline with writes from the LocalStore.
     *
     * Called internally to bootstrap or refill the write pipeline and by
     * SyncEngine whenever there are new mutations to process.
     *
     * Starts the write stream if necessary.
     */
    t.prototype.Xf = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t, n;
            return tslib.__generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return this.sl() ? (t = this.Nf.length > 0 ? this.Nf[this.Nf.length - 1].batchId : -1, 
                    [ 4 /*yield*/ , this.kf.yo(t) ]) : [ 3 /*break*/ , 4 ];

                  case 1:
                    return null !== (n = i.sent()) ? [ 3 /*break*/ , 2 ] : (0 === this.Nf.length && this.Wf.va(), 
                    [ 3 /*break*/ , 4 ]);

                  case 2:
                    return this.ol(n), [ 4 /*yield*/ , this.Xf() ];

                  case 3:
                    i.sent(), i.label = 4;

                  case 4:
                    return this.hl() && this.cl(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */
    t.prototype.sl = function() {
        return this.xf() && this.Nf.length < 10;
    }, 
    // For testing
    t.prototype.al = function() {
        return this.Nf.length;
    }, 
    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */
    t.prototype.ol = function(t) {
        Wn(this.sl(), "addToWritePipeline called when pipeline is full"), this.Nf.push(t), 
        this.Wf.fa() && this.Wf.Ca && this.Wf.Pa(t.mutations);
    }, t.prototype.hl = function() {
        return this.xf() && !this.Wf.aa() && this.Nf.length > 0;
    }, t.prototype.cl = function() {
        Wn(this.hl(), "startWriteStream() called when shouldStartWriteStream() is false."), 
        this.Wf.start();
    }, t.prototype.zf = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                return this.Wf.Na(), [ 2 /*return*/ ];
            }));
        }));
    }, t.prototype.Jf = function() {
        var t = this;
        // Record the stream token.
                return this.kf.so(this.Wf.lastStreamToken).then((function() {
            // Send the write pipeline now that the stream is established.
            for (var n = 0, i = t.Nf; n < i.length; n++) {
                var e = i[n];
                t.Wf.Pa(e.mutations);
            }
        })).catch(pi);
    }, t.prototype.Va = function(t, n) {
        var i = this;
        // This is a response to a write containing mutations and should be
        // correlated to the first write in our write pipeline.
                Wn(this.Nf.length > 0, "Got result for empty write pipeline");
        var e = this.Nf.shift(), r = Zn.from(e, t, n, this.Wf.lastStreamToken);
        return this.Jo.fl(r).then((function() {
            // It's possible that with the completion of this mutation another
            // slot has freed up.
            return i.Xf();
        }));
    }, t.prototype.Kf = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n = this;
            return tslib.__generator(this, (function(i) {
                // If the write stream closed due to an error, invoke the error callbacks if
                // there are pending writes.
                return void 0 === t && 
                // Graceful stop (due to stop() or idle timeout). Make sure that's
                // desirable.
                Wn(!this.hl(), "Write stream was stopped gracefully while still needed."), t && this.Nf.length > 0 ? ([ 2 /*return*/ , (this.Wf.Ca ? this.ll(t) : this.dl(t)).then((function() {
                    // The write stream might have been started by refilling the write
                    // pipeline for failed writes
                    n.hl() && n.cl();
                })) ]) : [ 2 /*return*/ ];
            }));
        }));
    }, t.prototype.dl = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(n) {
                // Reset the token if it's a permanent error, signaling the write stream is
                // no longer valid. Note that the handshake does not count as a write: see
                // comments on isPermanentWriteError for details.
                return un(t.code) ? (qn("RemoteStore", "RemoteStore error before completed handshake; resetting stream token: ", this.Wf.lastStreamToken), 
                this.Wf.lastStreamToken = K.Mt, [ 2 /*return*/ , this.kf.so(K.Mt).catch(pi) ]) : [ 2 /*return*/ ];
            }));
        }));
    }, t.prototype.ll = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i = this;
            return tslib.__generator(this, (function(e) {
                // Only handle permanent errors here. If it's transient, just let the retry
                // logic kick in.
                return un(r = t.code) && r !== T.ABORTED ? (n = this.Nf.shift(), 
                // In this case it's also unlikely that the server itself is melting
                // down -- this was just a bad request so inhibit backoff on the next
                // restart.
                this.Wf.da(), [ 2 /*return*/ , this.Jo.vl(n.batchId, t).then((function() {
                    // It's possible that with the completion of this mutation
                    // another slot has freed up.
                    return i.Xf();
                })) ]) : [ 2 /*return*/ ];
                var r;
                /**
 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
 *
 * @returns The Code equivalent to the given status string or undefined if
 *     there is no match.
 */            }));
        }));
    }, t.prototype.wl = function() {
        return new ze(this.mf);
    }, t.prototype.Lf = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return this.networkEnabled = !1, [ 4 /*yield*/ , this.$f() ];

                  case 1:
                    return t.sent(), this.Mf.set("Unknown" /* Unknown */), [ 4 /*yield*/ , this.enableNetwork() ];

                  case 2:
                    return t.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.ml = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    return this.xf() ? (
                    // Tear down and re-create our network streams. This will ensure we get a fresh auth token
                    // for the new user and re-fill the write pipeline with new mutations from the LocalStore
                    // (since mutations are per-user).
                    qn("RemoteStore", "RemoteStore restarting streams for new credential"), [ 4 /*yield*/ , this.Lf() ]) : [ 3 /*break*/ , 2 ];

                  case 1:
                    t.sent(), t.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */
    t.prototype.pl = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            return tslib.__generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    return this.isPrimary = t, t && this.networkEnabled ? [ 4 /*yield*/ , this.enableNetwork() ] : [ 3 /*break*/ , 2 ];

                  case 1:
                    return n.sent(), [ 3 /*break*/ , 4 ];

                  case 2:
                    return t ? [ 3 /*break*/ , 4 ] : [ 4 /*yield*/ , this.$f() ];

                  case 3:
                    n.sent(), this.Mf.set("Unknown" /* Unknown */), n.label = 4;

                  case 4:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, t;
}(), He = function(t) {
    this.key = t;
}, Ye = function(t) {
    this.key = t;
}, Xe = /** @class */ function() {
    function t(t, 
    /** Documents included in the remote target */
    n) {
        this.query = t, this.bl = n, this.gl = null, 
        /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */
        this._i = !1, 
        /** Documents in the view but not in the remote target */
        this.yl = wn(), 
        /** Document Keys that have local changes */
        this.fi = wn(), this._l = new bn(t.Bn.bind(t));
    }
    return Object.defineProperty(t.prototype, "Il", {
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */
        get: function() {
            return this.bl;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges The doc changes to apply to this view.
     * @param previousChanges If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @return a new set of docs, changes, and refill flag.
     */
    t.prototype.Tl = function(t, n) {
        var i = this, e = n ? n.El : new gn, r = n ? n._l : this._l, u = n ? n.fi : this.fi, s = r, o = !1, h = this.query.Kn() && r.size === this.query.limit ? r.last() : null, c = this.query.Jn() && r.size === this.query.limit ? r.first() : null;
        // Drop documents out to meet limit/limitToLast requirement.
        if (t.ct((function(t, n) {
            var a = r.get(t), f = n instanceof xt ? n : null;
            f && (Wn(t.isEqual(f.key), "Mismatching keys found in document changes: " + t + " != " + f.key), 
            f = i.query.matches(f) ? f : null);
            var l = !!a && i.fi.has(a.key), d = !!f && (f.nn || 
            // We only consider committed mutations for documents that were
            // mutated during the lifetime of the view.
            i.fi.has(f.key) && f.hasCommittedMutations), v = !1;
            // Calculate change
            a && f ? a.data().isEqual(f.data()) ? l !== d && (e.track({
                type: 3 /* Metadata */ ,
                doc: f
            }), v = !0) : i.Dl(a, f) || (e.track({
                type: 2 /* Modified */ ,
                doc: f
            }), v = !0, (h && i.query.Bn(f, h) > 0 || c && i.query.Bn(f, c) < 0) && (
            // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            o = !0)) : !a && f ? (e.track({
                type: 0 /* Added */ ,
                doc: f
            }), v = !0) : a && !f && (e.track({
                type: 1 /* Removed */ ,
                doc: a
            }), v = !0, (h || c) && (
            // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            o = !0));
            v && (f ? (s = s.add(f), u = d ? u.add(t) : u.delete(t)) : (s = s.delete(t), u = u.delete(t)));
        })), this.query.Kn() || this.query.Jn()) for (;s.size > this.query.limit; ) {
            var a = this.query.Kn() ? s.last() : s.first();
            s = s.delete(a.key), u = u.delete(a.key), e.track({
                type: 1 /* Removed */ ,
                doc: a
            });
        }
        return Wn(!o || !n, "View was refilled using docs that themselves needed refilling."), 
        {
            _l: s,
            El: e,
            ic: o,
            fi: u
        };
    }, t.prototype.Dl = function(t, n) {
        // We suppress the initial change event for documents that were modified as
        // part of a write acknowledgment (e.g. when the value of a server transform
        // is applied) as Watch will send us the same document again.
        // By suppressing the event, we only raise two user visible events (one with
        // `hasPendingWrites` and the final state of the document) instead of three
        // (one with `hasPendingWrites`, the modified document with
        // `hasPendingWrites` and the final state of the document).
        return t.nn && n.hasCommittedMutations && !n.nn;
    }, 
    /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges The set of changes to make to the view's docs.
     * @param updateLimboDocuments Whether to update limbo documents based on this
     *        change.
     * @param targetChange A target change to apply for computing limbo docs and
     *        sync state.
     * @return A new ViewChange with the given docs, changes, and sync state.
     */
    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
    t.prototype.Is = function(t, n, i) {
        var e = this;
        Wn(!t.ic, "Cannot apply changes that need a refill");
        var r = this._l;
        this._l = t._l, this.fi = t.fi;
        // Sort changes based on type and query comparator
        var u = t.El.ci();
        u.sort((function(t, n) {
            return function(t, n) {
                var i = function(t) {
                    switch (t) {
                      case 0 /* Added */ :
                        return 1;

                      case 2 /* Modified */ :
                      case 3 /* Metadata */ :
                        // A metadata change is converted to a modified change at the public
                        // api layer.  Since we sort by document key and then change type,
                        // metadata and modified changes must be sorted equivalently.
                        return 2;

                      case 1 /* Removed */ :
                        return 0;

                      default:
                        return Gn("Unknown ChangeType: " + t);
                    }
                };
                return i(t) - i(n);
            }
            /**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (t.type, n.type) || e.query.Bn(t.doc, n.doc);
        })), this.Rl(i);
        var s = n ? this.Sl() : [], o = 0 === this.yl.size && this._i ? 1 /* Synced */ : 0 /* Local */ , h = o !== this.gl;
        return this.gl = o, 0 !== u.length || h ? {
            snapshot: new yn(this.query, t._l, r, u, t.fi, 0 /* Local */ === o, h, 
            /* excludesMetadataChanges= */ !1),
            Al: s
        } : {
            Al: s
        };
    }, 
    /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */
    t.prototype.Cl = function(t) {
        return this._i && "Offline" /* Offline */ === t ? (
        // If we're offline, set `current` to false and then call applyChanges()
        // to refresh our syncState and generate a ViewChange as appropriate. We
        // are guaranteed to get a new TargetChange that sets `current` back to
        // true once the client is back online.
        this._i = !1, this.Is({
            _l: this._l,
            El: new gn,
            fi: this.fi,
            ic: !1
        }, 
        /* updateLimboDocuments= */ !1)) : {
            Al: []
        };
    }, 
    /**
     * Returns whether the doc for the given key should be in limbo.
     */
    t.prototype.Pl = function(t) {
        // If the remote end says it's part of this query, it's not in limbo.
        return !this.bl.has(t) && (
        // The local store doesn't think it's a result, so it shouldn't be in limbo.
        !!this._l.has(t) && !this._l.get(t).nn);
    }, 
    /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */
    t.prototype.Rl = function(t) {
        var n = this;
        t && (t.Ii.forEach((function(t) {
            return n.bl = n.bl.add(t);
        })), t.Ti.forEach((function(t) {
            return Wn(n.bl.has(t), "Modified document " + t + " not found in view.");
        })), t.Ei.forEach((function(t) {
            return n.bl = n.bl.delete(t);
        })), this._i = t._i);
    }, t.prototype.Sl = function() {
        var t = this;
        // We can only determine limbo documents when we're in-sync with the server.
                if (!this._i) return [];
        // TODO(klimt): Do this incrementally so that it's not quadratic when
        // updating many documents.
                var n = this.yl;
        this.yl = wn(), this._l.forEach((function(n) {
            t.Pl(n.key) && (t.yl = t.yl.add(n.key));
        }));
        // Diff the new limbo docs with the old limbo docs.
        var i = [];
        return n.forEach((function(n) {
            t.yl.has(n) || i.push(new Ye(n));
        })), this.yl.forEach((function(t) {
            n.has(t) || i.push(new He(t));
        })), i;
    }, 
    /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @return The ViewChange that resulted from this synchronization.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.Vl = function(t) {
        this.bl = t.ko, this.yl = wn();
        var n = this.Tl(t.documents);
        return this.Is(n, /*updateLimboDocuments=*/ !0);
    }, 
    /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.kl = function() {
        return yn.vi(this.query, this._l, this.fi, 0 /* Local */ === this.gl);
    }, t;
}();

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $e = /** @class */ function() {
    function t(t, n, i, e) {
        this.Or = t, this.Nl = n, this.updateFunction = i, this.xr = e, this.Ol = 5, this.ca = new Ki(this.Or, "retry_transaction" /* RetryTransaction */);
    }
    /** Runs the transaction and sets the result on deferred. */    return t.prototype.run = function() {
        this.Fl();
    }, t.prototype.Fl = function() {
        var t = this;
        this.ca.ea((function() {
            return tslib.__awaiter(t, void 0, void 0, (function() {
                var t, n, i = this;
                return tslib.__generator(this, (function(e) {
                    return t = this.Nl.wl(), (n = this.Ul(t)) && n.then((function(n) {
                        i.Or.Qr((function() {
                            return t.commit().then((function() {
                                i.xr.resolve(n);
                            })).catch((function(t) {
                                i.jl(t);
                            }));
                        }));
                    })).catch((function(t) {
                        i.jl(t);
                    })), [ 2 /*return*/ ];
                }));
            }));
        }));
    }, t.prototype.Ul = function(t) {
        try {
            var n = this.updateFunction(t);
            return !J(n) && n.catch && n.then ? n : (this.xr.reject(Error("Transaction callback must return a Promise")), 
            null);
        } catch (t) {
            // Do not retry errors thrown by user provided updateFunction.
            return this.xr.reject(t), null;
        }
    }, t.prototype.jl = function(t) {
        var n = this;
        this.Ol > 0 && this.xl(t) ? (this.Ol -= 1, this.Or.Qr((function() {
            return n.Fl(), Promise.resolve();
        }))) : this.xr.reject(t);
    }, t.prototype.xl = function(t) {
        if ("FirebaseError" === t.name) {
            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
            // non-matching document versions with ABORTED. These errors should be retried.
            var n = t.code;
            return "aborted" === n || "failed-precondition" === n || !un(n);
        }
        return !1;
    }, t;
}(), Ze = function(
/**
     * The query itself.
     */
t, 
/**
     * The target number created by the client that is used in the watch
     * stream to identify this query.
     */
n, 
/**
     * The view is responsible for computing the final merged truth of what
     * docs are in the query. It gets notified of local and remote changes,
     * and applies the query filters and limits to determine the most correct
     * possible results.
     */
i) {
    this.query = t, this.targetId = n, this.view = i;
}, tr = function(t) {
    this.key = t, 
    /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */
    this.Ll = !1;
}, nr = /** @class */ function() {
    function t(t, n, 
    // PORTING NOTE: Manages state synchronization in multi-tab environments.
    i, e, r) {
        this.kf = t, this.Nl = n, this.Ml = i, this.currentUser = e, this.ql = r, this.Bl = null, 
        this.Ql = new ti((function(t) {
            return t.canonicalId();
        })), this.Gl = new Map, 
        /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query.
         */
        this.Wl = [], 
        /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */
        this.zl = new x(j.F), 
        /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */
        this.Kl = new Map, this.Jl = new di, 
        /** Stores user completion handlers, indexed by User and BatchId. */
        this.Hl = {}, 
        /** Stores user callbacks waiting for all pending writes to be acknowledged. */
        this.Yl = new Map, this.Xl = Mi.Tc(), 
        // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.isPrimary = void 0, this.onlineState = "Unknown" /* Unknown */;
    }
    return Object.defineProperty(t.prototype, "$l", {
        // Only used for testing.
        get: function() {
            return !0 === this.isPrimary;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /** Subscribes to SyncEngine notifications. Has to be called exactly once. */
    t.prototype.subscribe = function(t) {
        Wn(null !== t, "SyncEngine listener cannot be null"), Wn(null === this.Bl, "SyncEngine already has a subscriber."), 
        this.Bl = t;
    }, 
    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the targetId of the query.
     */
    t.prototype.listen = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i, e, r, s;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return this.Zl("listen()"), (e = this.Ql.get(t)) ? (
                    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                    // already exists when EventManager calls us for the first time. This
                    // happens when the primary tab is already listening to this query on
                    // behalf of another tab and the user of the primary also starts listening
                    // to the query. EventManager will not have an assigned target ID in this
                    // case and calls `listen` to obtain this ID.
                    n = e.targetId, this.Ml.ph(n), i = e.view.kl(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    return [ 4 /*yield*/ , this.kf.Eo(t.qn()) ];

                  case 2:
                    return r = u.sent(), s = this.Ml.ph(r.targetId), n = r.targetId, [ 4 /*yield*/ , this.td(t, n, "current" === s) ];

                  case 3:
                    i = u.sent(), this.isPrimary && this.Nl.listen(r), u.label = 4;

                  case 4:
                    return this.Bl.Ra([ i ]), [ 2 /*return*/ , n ];
                }
            }));
        }));
    }, 
    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */
    t.prototype.td = function(t, n, i) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var e, r, s, o, h, c;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return [ 4 /*yield*/ , this.kf.Co(t, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return e = u.sent(), r = new Xe(t, e.ko), s = r.Tl(e.documents), o = In.yi(n, i && "Offline" /* Offline */ !== this.onlineState), 
                    Wn(0 === (h = r.Is(s, 
                    /* updateLimboDocuments= */ !0 === this.isPrimary, o)).Al.length, "View returned limbo docs before target ack from the server."), 
                    Wn(!!h.snapshot, "applyChanges for new view should always return a snapshot"), c = new Ze(t, n, r), 
                    this.Ql.set(t, c), this.Gl.has(n) ? this.Gl.get(n).push(t) : this.Gl.set(n, [ t ]), 
                    [ 2 /*return*/ , h.snapshot ];
                }
            }));
        }));
    }, 
    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.nd = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return [ 4 /*yield*/ , this.kf.Co(t.query, 
                    /* usePreviousResults= */ !0) ];

                  case 1:
                    return n = e.sent(), i = t.view.Vl(n), this.isPrimary && this.ed(t.targetId, i.Al), 
                    [ 2 /*return*/ , i ];
                }
            }));
        }));
    }, 
    /** Stops listening to the query. */
    t.prototype.nl = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i, e = this;
            return tslib.__generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return this.Zl("unlisten()"), Wn(!!(n = this.Ql.get(t)), "Trying to unlisten on query not found:" + t), 
                    (i = this.Gl.get(n.targetId)).length > 1 ? (this.Gl.set(n.targetId, i.filter((function(n) {
                        return !n.isEqual(t);
                    }))), this.Ql.delete(t), [ 2 /*return*/ ]) : this.isPrimary ? (
                    // We need to remove the local query target first to allow us to verify
                    // whether any other client is still interested in this target.
                    this.Ml.gh(n.targetId), this.Ml.lh(n.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , this.kf.Ao(n.targetId, /*keepPersistedTargetData=*/ !1).then((function() {
                        e.Ml._h(n.targetId), e.Nl.nl(n.targetId), e.rd(n.targetId);
                    })).catch(pi) ]) : [ 3 /*break*/ , 3 ];

                  case 1:
                    r.sent(), r.label = 2;

                  case 2:
                    return [ 3 /*break*/ , 5 ];

                  case 3:
                    return this.rd(n.targetId), [ 4 /*yield*/ , this.kf.Ao(n.targetId, 
                    /*keepPersistedTargetData=*/ !0) ];

                  case 4:
                    r.sent(), r.label = 5;

                  case 5:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */
    t.prototype.write = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return this.Zl("write()"), [ 4 /*yield*/ , this.kf.zs(t) ];

                  case 1:
                    return i = e.sent(), this.Ml.dh(i.batchId), this.ud(i.batchId, n), [ 4 /*yield*/ , this.sd(i.ds) ];

                  case 2:
                    return e.sent(), [ 4 /*yield*/ , this.Nl.Xf() ];

                  case 3:
                    return e.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     *
     * The Deferred input is resolved when the transaction is fully committed.
     */
    t.prototype.runTransaction = function(t, n, i) {
        new $e(t, this.Nl, n, i).run();
    }, t.prototype.ho = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i = this;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    this.Zl("applyRemoteEvent()"), e.label = 1;

                  case 1:
                    return e.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , this.kf.ho(t) ];

                  case 2:
                    return n = e.sent(), 
                    // Update `receivedDocument` as appropriate for any limbo targets.
                    t.wi.forEach((function(t, n) {
                        var e = i.Kl.get(n);
                        e && (
                        // Since this is a limbo resolution lookup, it's for a single document
                        // and it could be added, modified, or removed, but not a combination.
                        Wn(t.Ii.size + t.Ti.size + t.Ei.size <= 1, "Limbo resolution for single document contains multiple changes."), 
                        t.Ii.size > 0 ? e.Ll = !0 : t.Ti.size > 0 ? Wn(e.Ll, "Received change for limbo target document without add.") : t.Ei.size > 0 && (Wn(e.Ll, "Received remove for limbo target document without add."), 
                        e.Ll = !1));
                    })), [ 4 /*yield*/ , this.sd(n, t) ];

                  case 3:
                    return e.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , pi(e.sent()) ];

                  case 5:
                    return e.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */
    t.prototype.Cl = function(t, n) {
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
        if (this.isPrimary && 0 /* RemoteStore */ === n || !this.isPrimary && 1 /* SharedClientState */ === n) {
            this.Zl("applyOnlineStateChange()");
            var i = [];
            this.Ql.forEach((function(n, e) {
                var r = e.view.Cl(t);
                Wn(0 === r.Al.length, "OnlineState should not affect limbo documents."), r.snapshot && i.push(r.snapshot);
            })), this.Bl.od(t), this.Bl.Ra(i), this.onlineState = t, this.isPrimary && this.Ml.Eh(t);
        }
    }, t.prototype.ul = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i, e, r, s, o, h = this;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return this.Zl("rejectListens()"), 
                    // PORTING NOTE: Multi-tab only.
                    this.Ml.Ih(t, "rejected", n), i = this.Kl.get(t), (e = i && i.key) ? (
                    // Since this query failed, we won't want to manually unlisten to it.
                    // So go ahead and remove it from bookkeeping.
                    this.zl = this.zl.remove(e), this.Kl.delete(t), this.hd(), r = (r = new x(j.F)).ut(e, new Lt(e, k.V())), 
                    s = wn().add(e), o = new _n(k.MIN, 
                    /* targetChanges= */ new Map, 
                    /* targetMismatches= */ new B(Kn), r, s), [ 2 /*return*/ , this.ho(o) ]) : [ 3 /*break*/ , 1 ];

                  case 1:
                    return [ 4 /*yield*/ , this.kf.Ao(t, /* keepPersistedTargetData */ !1).then((function() {
                        return h.rd(t, n);
                    })).catch(pi) ];

                  case 2:
                    u.sent(), u.label = 3;

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    // PORTING NOTE: Multi-tab only
    t.prototype.Nh = function(t, n, i) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var e;
            return tslib.__generator(this, (function(r) {
                switch (r.label) {
                  case 0:
                    return this.Zl("applyBatchState()"), [ 4 /*yield*/ , this.kf.Js(t) ];

                  case 1:
                    return null === (e = r.sent()) ? (
                    // A throttled tab may not have seen the mutation before it was completed
                    // and removed from the mutation queue, in which case we won't have cached
                    // the affected documents. In this case we can safely ignore the update
                    // since that means we didn't apply the mutation locally at all (if we
                    // had, we would have cached the affected documents), and so we will just
                    // see any resulting document changes via normal remote document updates
                    // as applicable.
                    qn("SyncEngine", "Cannot apply mutation batch with id: " + t), [ 2 /*return*/ ]) : "pending" !== n ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , this.Nl.Xf() ];

                  case 2:
                    // If we are the primary client, we need to send this write to the
                    // backend. Secondary clients will ignore these writes since their remote
                    // connection is disabled.
                    return r.sent(), [ 3 /*break*/ , 4 ];

                  case 3:
                    "acknowledged" === n || "rejected" === n ? (
                    // NOTE: Both these methods are no-ops for batches that originated from
                    // other clients.
                    this.ad(t, i || null), this.kf.Fo(t)) : Gn("Unknown batchState: " + n), r.label = 4;

                  case 4:
                    return [ 4 /*yield*/ , this.sd(e) ];

                  case 5:
                    return r.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.fl = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    this.Zl("applySuccessfulWrite()"), n = t.batch.batchId, 
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught
                    // up), so we raise user callbacks first so that they consistently happen
                    // before listen events.
                    this.ad(n, /*error=*/ null), this.fd(n), e.label = 1;

                  case 1:
                    return e.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , this.kf.Ys(t) ];

                  case 2:
                    return i = e.sent(), this.Ml.wh(n, "acknowledged"), [ 4 /*yield*/ , this.sd(i) ];

                  case 3:
                    return e.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , pi(e.sent()) ];

                  case 5:
                    return e.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.vl = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    this.Zl("rejectFailedWrite()"), 
                    // The local store may or may not be able to apply the write result and
                    // raise events immediately (depending on whether the watcher is caught up),
                    // so we raise user callbacks first so that they consistently happen before
                    // listen events.
                    this.ad(t, n), this.fd(t), e.label = 1;

                  case 1:
                    return e.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , this.kf.no(t) ];

                  case 2:
                    return i = e.sent(), this.Ml.wh(t, "rejected", n), [ 4 /*yield*/ , this.sd(i) ];

                  case 3:
                    return e.sent(), [ 3 /*break*/ , 6 ];

                  case 4:
                    return [ 4 /*yield*/ , pi(e.sent()) ];

                  case 5:
                    return e.sent(), [ 3 /*break*/ , 6 ];

                  case 6:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Registers a user callback that resolves when all pending mutations at the moment of calling
     * are acknowledged .
     */
    t.prototype.ld = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return this.Nl.xf() || qn("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                    [ 4 /*yield*/ , this.kf.ro() ];

                  case 1:
                    return -1 === (n = e.sent()) ? (
                    // Trigger the callback right away if there is no pending writes at the moment.
                    t.resolve(), [ 2 /*return*/ ]) : ((i = this.Yl.get(n) || []).push(t), this.Yl.set(n, i), 
                    [ 2 /*return*/ ]);
                }
            }));
        }));
    }, 
    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */
    t.prototype.fd = function(t) {
        (this.Yl.get(t) || []).forEach((function(t) {
            t.resolve();
        })), this.Yl.delete(t);
    }, 
    /** Reject all outstanding callbacks waiting for pending writes to complete. */
    t.prototype.dd = function(t) {
        this.Yl.forEach((function(n) {
            n.forEach((function(n) {
                n.reject(new E(T.CANCELLED, t));
            }));
        })), this.Yl.clear();
    }, t.prototype.ud = function(t, n) {
        var i = this.Hl[this.currentUser.i()];
        i || (i = new x(Kn)), i = i.ut(t, n), this.Hl[this.currentUser.i()] = i;
    }, 
    /**
     * Resolves or rejects the user callback for the given batch and then discards
     * it.
     */
    t.prototype.ad = function(t, n) {
        var i = this.Hl[this.currentUser.i()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
                if (i) {
            var e = i.get(t);
            e && (Wn(t === i.ot(), "Mutation callbacks processed out-of-order?"), n ? e.reject(n) : e.resolve(), 
            i = i.remove(t)), this.Hl[this.currentUser.i()] = i;
        }
    }, t.prototype.rd = function(t, n) {
        var i = this;
        void 0 === n && (n = null), this.Ml.gh(t), Wn(this.Gl.has(t) && 0 !== this.Gl.get(t).length, "There are no queries mapped to target id " + t);
        for (var e = 0, r = this.Gl.get(t); e < r.length; e++) {
            var u = r[e];
            this.Ql.delete(u), n && this.Bl.vd(u, n);
        }
        if (this.Gl.delete(t), this.isPrimary) {
            var s = this.Jl.as(t);
            this.Jl.hs(t), s.forEach((function(t) {
                i.Jl.fs(t) || 
                // We removed the last reference for this key
                i.wd(t);
            }));
        }
    }, t.prototype.wd = function(t) {
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        var n = this.zl.get(t);
        null !== n && (this.Nl.nl(n), this.zl = this.zl.remove(t), this.Kl.delete(n), this.hd());
    }, t.prototype.ed = function(t, n) {
        for (var i = 0, e = n; i < e.length; i++) {
            var r = e[i];
            if (r instanceof He) this.Jl.es(r.key, t), this.md(r); else if (r instanceof Ye) {
                qn("SyncEngine", "Document no longer in limbo: " + r.key), this.Jl.us(r.key, t), 
                this.Jl.fs(r.key) || 
                // We removed the last reference for this key
                this.wd(r.key);
            } else Gn("Unknown limbo change: " + JSON.stringify(r));
        }
    }, t.prototype.md = function(t) {
        var n = t.key;
        this.zl.get(n) || (qn("SyncEngine", "New document in limbo: " + n), this.Wl.push(n), 
        this.hd());
    }, 
    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */
    t.prototype.hd = function() {
        for (;this.Wl.length > 0 && this.zl.size < this.ql; ) {
            var t = this.Wl.shift(), n = this.Xl.next();
            this.Kl.set(n, new tr(t)), this.zl = this.zl.ut(t, n), this.Nl.listen(new en(Bt.Cn(t.path).qn(), n, 2 /* LimboResolution */ , ii.Nr));
        }
    }, 
    // Visible for testing
    t.prototype.pd = function() {
        return this.zl;
    }, 
    // Visible for testing
    t.prototype.bd = function() {
        return this.Wl;
    }, t.prototype.sd = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i, e, r, s = this;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return i = [], e = [], r = [], this.Ql.forEach((function(u, o) {
                        r.push(Promise.resolve().then((function() {
                            var n = o.view.Tl(t);
                            return n.ic ? s.kf.Co(o.query, /* usePreviousResults= */ !1).then((function(t) {
                                var i = t.documents;
                                return o.view.Tl(i, n);
                            })) : n;
                            // The query has a limit and some docs were removed, so we need
                            // to re-run the query against the local store to make sure we
                            // didn't lose any good docs that had been past the limit.
                                                })).then((function(t) {
                            var r = n && n.wi.get(o.targetId), u = o.view.Is(t, 
                            /* updateLimboDocuments= */ !0 === s.isPrimary, r);
                            if (s.ed(o.targetId, u.Al), u.snapshot) {
                                s.isPrimary && s.Ml.Ih(o.targetId, u.snapshot.fromCache ? "not-current" : "current"), 
                                i.push(u.snapshot);
                                var h = ni.Ar(o.targetId, u.snapshot);
                                e.push(h);
                            }
                        })));
                    })), [ 4 /*yield*/ , Promise.all(r) ];

                  case 1:
                    return u.sent(), this.Bl.Ra(i), [ 4 /*yield*/ , this.kf.bo(e) ];

                  case 2:
                    return u.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.Zl = function(t) {
        Wn(null !== this.Bl, "Trying to call " + t + " before calling subscribe().");
    }, t.prototype.ml = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return n = !this.currentUser.isEqual(t), this.currentUser = t, n ? (
                    // Fails tasks waiting for pending writes requested by previous user.
                    this.dd("'waitForPendingWrites' promise is rejected due to a user change."), [ 4 /*yield*/ , this.kf.Ms(t) ]) : [ 3 /*break*/ , 3 ];

                  case 1:
                    return i = e.sent(), 
                    // TODO(b/114226417): Consider calling this only in the primary tab.
                    this.Ml.Ms(t, i.Gs, i.Ws), [ 4 /*yield*/ , this.sd(i.Qs) ];

                  case 2:
                    e.sent(), e.label = 3;

                  case 3:
                    return [ 4 /*yield*/ , this.Nl.ml() ];

                  case 4:
                    return e.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    // PORTING NOTE: Multi-tab only
    t.prototype.pl = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i, e, r, s, o, h = this;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return !0 !== t || !0 === this.isPrimary ? [ 3 /*break*/ , 3 ] : (this.isPrimary = !0, 
                    [ 4 /*yield*/ , this.Nl.pl(!0) ]);

                  case 1:
                    return u.sent(), s = this.Ml.fh(), [ 4 /*yield*/ , this.gd(s.K()) ];

                  case 2:
                    for (n = u.sent(), i = 0, e = n; i < e.length; i++) r = e[i], this.Nl.listen(r);
                    return [ 3 /*break*/ , 7 ];

                  case 3:
                    return !1 !== t || !1 === this.isPrimary ? [ 3 /*break*/ , 7 ] : (this.isPrimary = !1, 
                    s = [], o = Promise.resolve(), this.Gl.forEach((function(t, n) {
                        h.Ml.yh(n) ? s.push(n) : o = o.then((function() {
                            return h.rd(n), h.kf.Ao(n, 
                            /*keepPersistedTargetData=*/ !0);
                        })), h.Nl.nl(n);
                    })), [ 4 /*yield*/ , o ]);

                  case 4:
                    return u.sent(), [ 4 /*yield*/ , this.gd(s) ];

                  case 5:
                    return u.sent(), this.yd(), [ 4 /*yield*/ , this.Nl.pl(!1) ];

                  case 6:
                    u.sent(), u.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    // PORTING NOTE: Multi-tab only.
    t.prototype.yd = function() {
        var t = this;
        this.Kl.forEach((function(n, i) {
            t.Nl.nl(i);
        })), this.Jl.cs(), this.Kl = new Map, this.zl = new x(j.F);
    }, 
    /**
     * Reconcile the query views of the provided query targets with the state from
     * persistence. Raises snapshots for any changes that affect the local
     * client and returns the updated state of all target's query data.
     */
    // PORTING NOTE: Multi-tab only.
    t.prototype.gd = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i, e, r, s, o, h, c, a, f, l, d, v;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    n = [], i = [], e = 0, r = t, u.label = 1;

                  case 1:
                    return e < r.length ? (s = r[e], o = void 0, (h = this.Gl.get(s)) && 0 !== h.length ? [ 4 /*yield*/ , this.kf.Ao(s, 
                    /*keepPersistedTargetData=*/ !0) ] : [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 14 ];

                  case 2:
                    // For queries that have a local View, we need to update their state
                    // in LocalStore (as the resume token and the snapshot version
                    // might have changed) and reconcile their views with the persisted
                    // state (the list of syncedDocuments may have gotten out of sync).
                    return u.sent(), [ 4 /*yield*/ , this.kf.Eo(h[0].qn()) ];

                  case 3:
                    o = u.sent(), c = 0, a = h, u.label = 4;

                  case 4:
                    return c < a.length ? (f = a[c], Wn(!!(l = this.Ql.get(f)), "No query view found for " + f), 
                    [ 4 /*yield*/ , this.nd(l) ]) : [ 3 /*break*/ , 7 ];

                  case 5:
                    (d = u.sent()).snapshot && i.push(d.snapshot), u.label = 6;

                  case 6:
                    return c++, [ 3 /*break*/ , 4 ];

                  case 7:
                    return [ 3 /*break*/ , 12 ];

                  case 8:
                    return Wn(!0 === this.isPrimary, "A secondary tab should never have an active target without an active query."), 
                    [ 4 /*yield*/ , this.kf.xo(s) ];

                  case 9:
                    return Wn(!!(v = u.sent()), "Target for id " + s + " not found"), [ 4 /*yield*/ , this.kf.Eo(v) ];

                  case 10:
                    return o = u.sent(), [ 4 /*yield*/ , this.td(this._d(v), s, 
                    /*current=*/ !1) ];

                  case 11:
                    u.sent(), u.label = 12;

                  case 12:
                    n.push(o), u.label = 13;

                  case 13:
                    return e++, [ 3 /*break*/ , 1 ];

                  case 14:
                    return this.Bl.Ra(i), [ 2 /*return*/ , n ];
                }
            }));
        }));
    }, 
    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-tab only
    t.prototype._d = function(t) {
        return new Bt(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }, 
    // PORTING NOTE: Multi-tab only
    t.prototype.Oo = function() {
        return this.kf.Oo();
    }, 
    // PORTING NOTE: Multi-tab only
    t.prototype.Oh = function(t, n, i) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var e, r;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    if (this.isPrimary) 
                    // If we receive a target state notification via WebStorage, we are
                    // either already secondary or another tab has taken the primary lease.
                    return qn("SyncEngine", "Ignoring unexpected query state notification."), [ 2 /*return*/ ];
                    if (!this.Gl.has(t)) return [ 3 /*break*/ , 7 ];
                    switch (n) {
                      case "current":
                      case "not-current":
                        return [ 3 /*break*/ , 1 ];

                      case "rejected":
                        return [ 3 /*break*/ , 4 ];
                    }
                    return [ 3 /*break*/ , 6 ];

                  case 1:
                    return [ 4 /*yield*/ , this.kf.Lo() ];

                  case 2:
                    return e = u.sent(), r = _n.gi(t, "current" === n), [ 4 /*yield*/ , this.sd(e, r) ];

                  case 3:
                    return u.sent(), [ 3 /*break*/ , 7 ];

                  case 4:
                    return [ 4 /*yield*/ , this.kf.Ao(t, 
                    /* keepPersistedTargetData */ !0) ];

                  case 5:
                    return u.sent(), this.rd(t, i), [ 3 /*break*/ , 7 ];

                  case 6:
                    Gn("Unexpected target state: " + n), u.label = 7;

                  case 7:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    // PORTING NOTE: Multi-tab only
    t.prototype.Fh = function(t, n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i, e, r, s, o, h, c, a, f, l = this;
            return tslib.__generator(this, (function(d) {
                switch (d.label) {
                  case 0:
                    if (!this.isPrimary) return [ 2 /*return*/ ];
                    i = 0, e = t, d.label = 1;

                  case 1:
                    return i < e.length ? (f = e[i], Wn(!this.Gl.has(f), "Trying to add an already active target"), 
                    [ 4 /*yield*/ , this.kf.xo(f) ]) : [ 3 /*break*/ , 6 ];

                  case 2:
                    return Wn(!!(r = d.sent()), "Query data for active target " + f + " not found"), 
                    [ 4 /*yield*/ , this.kf.Eo(r) ];

                  case 3:
                    return s = d.sent(), [ 4 /*yield*/ , this.td(this._d(r), s.targetId, 
                    /*current=*/ !1) ];

                  case 4:
                    d.sent(), this.Nl.listen(s), d.label = 5;

                  case 5:
                    return i++, [ 3 /*break*/ , 1 ];

                  case 6:
                    o = function(t) {
                        return tslib.__generator(this, (function(n) {
                            switch (n.label) {
                              case 0:
                                // Check that the target is still active since the target might have been
                                // removed if it has been rejected by the backend.
                                return h.Gl.has(t) ? [ 4 /*yield*/ , h.kf.Ao(t, /* keepPersistedTargetData */ !1).then((function() {
                                    l.Nl.nl(t), l.rd(t);
                                })).catch(pi) ] : [ 2 /*return*/ , "continue" ];

                                // Release queries that are still active.
                                                              case 1:
                                // Release queries that are still active.
                                return n.sent(), [ 2 /*return*/ ];
                            }
                        }));
                    }, h = this, c = 0, a = n, d.label = 7;

                  case 7:
                    return c < a.length ? (f = a[c], [ 5 /*yield**/ , o(f) ]) : [ 3 /*break*/ , 10 ];

                  case 8:
                    d.sent(), d.label = 9;

                  case 9:
                    return c++, [ 3 /*break*/ , 7 ];

                  case 10:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
    // the online state.
    t.prototype.enableNetwork = function() {
        return this.kf.jo(!0), this.Nl.enableNetwork();
    }, 
    // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
    // the online state.
    t.prototype.disableNetwork = function() {
        return this.kf.jo(!1), this.Nl.disableNetwork();
    }, t.prototype.he = function(t) {
        var n = this.Kl.get(t);
        if (n && n.Ll) return wn().add(n.key);
        var i = wn(), e = this.Gl.get(t);
        if (!e) return i;
        for (var r = 0, u = e; r < u.length; r++) {
            var s = u[r], o = this.Ql.get(s);
            Wn(!!o, "No query view found for " + s), i = i.Ft(o.view.Il);
        }
        return i;
    }, t;
}(), ir = function() {
    this.Id = null, this.targetId = 0, this.listeners = [];
}, er = /** @class */ function() {
    function t(t) {
        this.Jo = t, this.Td = new ti((function(t) {
            return t.canonicalId();
        })), this.onlineState = "Unknown" /* Unknown */ , this.Ed = new Set, this.Jo.subscribe(this);
    }
    return t.prototype.listen = function(t) {
        var n = t.query, i = !1, e = this.Td.get(n);
        (e || (i = !0, e = new ir, this.Td.set(n, e)), e.listeners.push(t), Wn(!t.Cl(this.onlineState), "applyOnlineStateChange() shouldn't raise an event for brand-new listeners."), 
        e.Id) && (t.Dd(e.Id) && this.Rd());
        return i ? this.Jo.listen(n).then((function(t) {
            return e.targetId = t, t;
        })) : Promise.resolve(e.targetId);
    }, t.prototype.nl = function(t) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n, i, e, r;
            return tslib.__generator(this, (function(u) {
                return n = t.query, i = !1, (e = this.Td.get(n)) && (r = e.listeners.indexOf(t)) >= 0 && (e.listeners.splice(r, 1), 
                i = 0 === e.listeners.length), i ? (this.Td.delete(n), [ 2 /*return*/ , this.Jo.nl(n) ]) : [ 2 /*return*/ ];
            }));
        }));
    }, t.prototype.Ra = function(t) {
        for (var n = !1, i = 0, e = t; i < e.length; i++) {
            var r = e[i], u = r.query, s = this.Td.get(u);
            if (s) {
                for (var o = 0, h = s.listeners; o < h.length; o++) {
                    h[o].Dd(r) && (n = !0);
                }
                s.Id = r;
            }
        }
        n && this.Rd();
    }, t.prototype.vd = function(t, n) {
        var i = this.Td.get(t);
        if (i) for (var e = 0, r = i.listeners; e < r.length; e++) {
            r[e].onError(n);
        }
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
                this.Td.delete(t);
    }, t.prototype.od = function(t) {
        this.onlineState = t;
        var n = !1;
        this.Td.forEach((function(i, e) {
            for (var r = 0, u = e.listeners; r < u.length; r++) {
                // Run global snapshot listeners if a consistent snapshot has been emitted.
                u[r].Cl(t) && (n = !0);
            }
        })), n && this.Rd();
    }, t.prototype.Sd = function(t) {
        this.Ed.add(t), 
        // Immediately fire an initial event, indicating all existing listeners
        // are in-sync.
        t.next();
    }, t.prototype.Ad = function(t) {
        this.Ed.delete(t);
    }, 
    // Call all global snapshot listeners that have been set.
    t.prototype.Rd = function() {
        this.Ed.forEach((function(t) {
            t.next();
        }));
    }, t;
}(), rr = /** @class */ function() {
    function t(t, n, i) {
        this.query = t, this.Cd = n, 
        /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */
        this.Pd = !1, this.Vd = null, this.onlineState = "Unknown" /* Unknown */ , this.options = i || {};
    }
    /**
     * Applies the new ViewSnapshot to this listener, raising a user-facing event
     * if applicable (depending on what changed, whether the user has opted into
     * metadata-only changes, etc.). Returns true if a user-facing event was
     * indeed raised.
     */    return t.prototype.Dd = function(t) {
        if (Wn(t.docChanges.length > 0 || t.li, "We got a new snapshot with no changes?"), 
        !this.options.includeMetadataChanges) {
            for (
            // Remove the metadata only changes.
            var n = [], i = 0, e = t.docChanges; i < e.length; i++) {
                var r = e[i];
                3 /* Metadata */ !== r.type && n.push(r);
            }
            t = new yn(t.query, t.docs, t.ai, n, t.fi, t.fromCache, t.li, 
            /* excludesMetadataChanges= */ !0);
        }
        var u = !1;
        return this.Pd ? this.kd(t) && (this.Cd.next(t), u = !0) : this.Nd(t, this.onlineState) && (this.Od(t), 
        u = !0), this.Vd = t, u;
    }, t.prototype.onError = function(t) {
        this.Cd.error(t);
    }, 
    /** Returns whether a snapshot was raised. */
    t.prototype.Cl = function(t) {
        this.onlineState = t;
        var n = !1;
        return this.Vd && !this.Pd && this.Nd(this.Vd, t) && (this.Od(this.Vd), n = !0), 
        n;
    }, t.prototype.Nd = function(t, n) {
        // Always raise the first event when we're synced
        if (Wn(!this.Pd, "Determining whether to raise first event but already had first event"), 
        !t.fromCache) return !0;
        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
        // or Online if we wait long enough).
                var i = "Offline" /* Offline */ !== n;
        // Don't raise the event if we're online, aren't synced yet (checked
        // above) and are waiting for a sync.
                return this.options.Fd && i ? (Wn(t.fromCache, "Waiting for sync, but snapshot is not from cache"), 
        !1) : !t.docs.M() || "Offline" /* Offline */ === n;
        // Raise data from cache if we have any documents or we are offline
        }, t.prototype.kd = function(t) {
        // We don't need to handle includeDocumentMetadataChanges here because
        // the Metadata only changes have already been stripped out if needed.
        // At this point the only changes we will see are the ones we should
        // propagate.
        if (t.docChanges.length > 0) return !0;
        var n = this.Vd && this.Vd.hasPendingWrites !== t.hasPendingWrites;
        return !(!t.li && !n) && !0 === this.options.includeMetadataChanges;
        // Generally we should have hit one of the cases above, but it's possible
        // to get here if there were only metadata docChanges and they got
        // stripped out.
        }, t.prototype.Od = function(t) {
        Wn(!this.Pd, "Trying to raise initial events for second time"), t = yn.vi(t.query, t.docs, t.fi, t.fromCache), 
        this.Pd = !0, this.Cd.next(t);
    }, t;
}(), ur = /** @class */ function() {
    function t(t, n, i, 
    /**
     * Asynchronous queue responsible for all of our internal processing. When
     * we get incoming work from the user (via public API) or the network
     * (incoming GRPC messages), we should always schedule onto this queue.
     * This ensures all of our work is properly serialized (e.g. we don't
     * start processing a new operation while the previous one is waiting for
     * an async I/O to complete).
     */
    e) {
        this.platform = t, this.Ud = n, this.credentials = i, this.Or = e, this.clientId = zn.pr();
    }
    /**
     * Starts up the FirestoreClient, returning only whether or not enabling
     * persistence succeeded.
     *
     * The intent here is to "do the right thing" as far as users are concerned.
     * Namely, in cases where offline persistence is requested and possible,
     * enable it, but otherwise fall back to persistence disabled. For the most
     * part we expect this to succeed one way or the other so we don't expect our
     * users to actually wait on the firestore.enablePersistence Promise since
     * they generally won't care.
     *
     * Of course some users actually do care about whether or not persistence
     * was successfully enabled, so the Promise returned from this method
     * indicates this outcome.
     *
     * This presents a problem though: even before enablePersistence resolves or
     * rejects, users may have made calls to e.g. firestore.collection() which
     * means that the FirestoreClient in there will be available and will be
     * enqueuing actions on the async queue.
     *
     * Meanwhile any failure of an operation on the async queue causes it to
     * panic and reject any further work, on the premise that unhandled errors
     * are fatal.
     *
     * Consequently the fallback is handled internally here in start, and if the
     * fallback succeeds we signal success to the async queue even though the
     * start() itself signals failure.
     *
     * @param persistenceProvider Provider that returns the persistence
     *    implementation.
     * @param persistenceSettings Settings object to configure offline
     *     persistence.
     * @returns A deferred result indicating the user-visible result of enabling
     *     offline persistence. This method will reject this if IndexedDB fails to
     *     start for any reason. If usePersistence is false this is
     *     unconditionally resolved.
     */    return t.prototype.start = function(t, n) {
        var i = this;
        this.jd();
        // We defer our initialization until we get the current user from
        // setChangeListener(). We block the async queue until we got the initial
        // user and the initialization is completed. This will prevent any scheduled
        // work from happening before initialization is completed.
        // If initializationDone resolved then the FirestoreClient is in a usable
        // state.
        var e = new ei, r = new ei, u = !1;
        // If usePersistence is true, certain classes of errors while starting are
        // recoverable but only by falling back to persistence disabled.
        
        // If there's an error in the first case but not in recovery we cannot
        // reject the promise blocking the async queue because this will cause the
        // async queue to panic.
                // Return only the result of enabling persistence. Note that this does not
        // need to await the completion of initializationDone because the result of
        // this method should not reflect any other kind of failure to start.
        return this.credentials.v((function(s) {
            u ? i.Or.Qr((function() {
                return i.ml(s);
            })) : (u = !0, i.xd(t, n, s, r).then((function() {
                return i.Ld(s);
            })).then(e.resolve, e.reject));
        })), 
        // Block the async queue until initialization is done
        this.Or.Qr((function() {
            return e.promise;
        })), r.promise;
    }, 
    /** Enables the network connection and requeues all pending operations. */
    t.prototype.enableNetwork = function() {
        var t = this;
        return this.jd(), this.Or.enqueue((function() {
            return t.Jo.enableNetwork();
        }));
    }, 
    /**
     * Initializes persistent storage, attempting to use IndexedDB if
     * usePersistence is true or memory-only if false.
     *
     * If IndexedDB fails because it's already open in another tab or because the
     * platform can't possibly support our implementation then this method rejects
     * the persistenceResult and falls back on memory-only persistence.
     *
     * @param persistenceProvider The provider that provides either IndexedDb or
     *     memory-backed persistence
     * @param persistenceSettings Settings object to configure offline persistence
     * @param user The initial user
     * @param persistenceResult A deferred result indicating the user-visible
     *     result of enabling offline persistence. This method will reject this if
     *     IndexedDB fails to start for any reason. If usePersistence is false
     *     this is unconditionally resolved.
     * @returns a Promise indicating whether or not initialization should
     *     continue, i.e. that one of the persistence implementations actually
     *     succeeded.
     */
    t.prototype.xd = function(t, n, i, e) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var r;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    return u.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , t.initialize(this.Or, this.Ud, this.platform, this.clientId, i, n) ];

                  case 1:
                    return u.sent(), this.persistence = t.Jc(), this.Md = t.Kc(), this.Ml = t.Hc(), 
                    e.resolve(), [ 3 /*break*/ , 3 ];

                  case 2:
                    // An unknown failure on the first stage shuts everything down.
                    if (r = u.sent(), 
                    // Regardless of whether or not the retry succeeds, from an user
                    // perspective, offline persistence has failed.
                    e.reject(r), !this.qd(r)) throw r;
                    return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + r), 
                    [ 2 /*return*/ , this.xd(new zi, {
                        zc: !1
                    }, i, e) ];

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Decides whether the provided error allows us to gracefully disable
     * persistence (as opposed to crashing the client).
     */
    t.prototype.qd = function(t) {
        return "FirebaseError" === t.name ? t.code === T.FAILED_PRECONDITION || t.code === T.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (
        // When the browser is out of quota we could get either quota exceeded
        // or an aborted error depending on whether the error happened during
        // schema migration.
        22 === t.code || 20 === t.code || 
        // Firefox Private Browsing mode disables IndexedDb and returns
        // INVALID_STATE for any usage.
        11 === t.code);
    }, 
    /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */
    t.prototype.jd = function() {
        if (this.Or.Yr) throw new E(T.FAILED_PRECONDITION, "The client has already been terminated.");
    }, 
    /**
     * Initializes the rest of the FirestoreClient, assuming the initial user
     * has been obtained from the credential provider and some persistence
     * implementation is available in this.persistence.
     */
    t.prototype.Ld = function(t) {
        var n = this;
        return qn("FirestoreClient", "Initializing. user=", t.uid), this.platform.Bd(this.Ud).then((function(i) {
            return tslib.__awaiter(n, void 0, void 0, (function() {
                var n, e, s, o, h, c, a = this;
                return tslib.__generator(this, (function(f) {
                    switch (f.label) {
                      case 0:
                        return n = new Vi, this.kf = new mi(this.persistence, n, t), [ 4 /*yield*/ , this.kf.start() ];

                      case 1:
                        // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
                        return f.sent(), e = this.platform.Qd(), s = this.platform.Gd(this.Ud.ae), o = new Xi(this.Or, i, this.credentials, s), 
                        h = function(t) {
                            return a.Jo.Cl(t, 0 /* RemoteStore */);
                        }, c = function(t) {
                            return a.Jo.Cl(t, 1 /* SharedClientState */);
                        }, this.Nl = new Je(this.kf, o, this.Or, h, e), this.Jo = new nr(this.kf, this.Nl, this.Ml, t, 100), 
                        this.Ml.Ho = c, 
                        // Set up wiring between sync engine and other components
                        this.Nl.Jo = this.Jo, this.Ml.Jo = this.Jo, this.Wd = new er(this.Jo), [ 4 /*yield*/ , this.Ml.start() ];

                      case 2:
                        // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
                        return f.sent(), [ 4 /*yield*/ , this.Nl.start() ];

                      case 3:
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return f.sent(), [ 4 /*yield*/ , this.persistence.jc((function(t) {
                            return tslib.__awaiter(a, void 0, void 0, (function() {
                                return tslib.__generator(this, (function(n) {
                                    switch (n.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , this.Jo.pl(t) ];

                                      case 1:
                                        return n.sent(), t && !this.Md.qu ? this.Md.start(this.kf) : t || this.Md.stop(), 
                                        [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })) ];

                      case 4:
                        // When a user calls clearPersistence() in one client, all other clients
                        // need to be terminated to allow the delete to succeed.
                        // NOTE: This will immediately call the listener, so we make sure to
                        // set it after localStore / remoteStore are started.
                        return f.sent(), [ 4 /*yield*/ , this.persistence.xc((function() {
                            return tslib.__awaiter(a, void 0, void 0, (function() {
                                return tslib.__generator(this, (function(t) {
                                    switch (t.label) {
                                      case 0:
                                        return [ 4 /*yield*/ , this.terminate() ];

                                      case 1:
                                        return t.sent(), [ 2 /*return*/ ];
                                    }
                                }));
                            }));
                        })) ];

                      case 5:
                        // When a user calls clearPersistence() in one client, all other clients
                        // need to be terminated to allow the delete to succeed.
                        return f.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }));
    }, t.prototype.ml = function(t) {
        return this.Or.ru(), qn("FirestoreClient", "Credential Changed. Current user: " + t.uid), 
        this.Jo.ml(t);
    }, 
    /** Disables the network connection. Pending operations will not complete. */
    t.prototype.disableNetwork = function() {
        var t = this;
        return this.jd(), this.Or.enqueue((function() {
            return t.Jo.disableNetwork();
        }));
    }, t.prototype.terminate = function() {
        var t = this;
        return this.Or.nu((function() {
            return tslib.__awaiter(t, void 0, void 0, (function() {
                return tslib.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
                        return this.Md.stop(), [ 4 /*yield*/ , this.Nl.shutdown() ];

                      case 1:
                        return t.sent(), [ 4 /*yield*/ , this.Ml.shutdown() ];

                      case 2:
                        return t.sent(), [ 4 /*yield*/ , this.persistence.shutdown() ];

                      case 3:
                        return t.sent(), 
                        // `removeChangeListener` must be called after shutting down the
                        // RemoteStore as it will prevent the RemoteStore from retrieving
                        // auth tokens.
                        this.credentials.m(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }));
    }, 
    /**
     * Returns a Promise that resolves when all writes that were pending at the time this
     * method was called received server acknowledgement. An acknowledgement can be either acceptance
     * or rejection.
     */
    t.prototype.waitForPendingWrites = function() {
        var t = this;
        this.jd();
        var n = new ei;
        return this.Or.Qr((function() {
            return t.Jo.ld(n);
        })), n.promise;
    }, t.prototype.listen = function(t, n, i) {
        var e = this;
        this.jd();
        var r = new rr(t, n, i);
        return this.Or.Qr((function() {
            return e.Wd.listen(r);
        })), r;
    }, t.prototype.nl = function(t) {
        var n = this;
        // Checks for termination but does not raise error, allowing unlisten after
        // termination to be a no-op.
                this.zd || this.Or.Qr((function() {
            return n.Wd.nl(t);
        }));
    }, t.prototype.Kd = function(t) {
        var n = this;
        return this.jd(), this.Or.enqueue((function() {
            return n.kf.Io(t);
        })).then((function(t) {
            if (t instanceof xt) return t;
            if (t instanceof Lt) return null;
            throw new E(T.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)");
        }));
    }, t.prototype.Jd = function(t) {
        var n = this;
        return this.jd(), this.Or.enqueue((function() {
            return tslib.__awaiter(n, void 0, void 0, (function() {
                var n, i, e;
                return tslib.__generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.kf.Co(t, 
                        /* usePreviousResults= */ !0) ];

                      case 1:
                        return n = r.sent(), i = new Xe(t, n.ko), e = i.Tl(n.documents), [ 2 /*return*/ , i.Is(e, 
                        /* updateLimboDocuments= */ !1).snapshot ];
                    }
                }));
            }));
        }));
    }, t.prototype.write = function(t) {
        var n = this;
        this.jd();
        var i = new ei;
        return this.Or.Qr((function() {
            return n.Jo.write(t, i);
        })), i.promise;
    }, t.prototype.ae = function() {
        return this.Ud.ae;
    }, t.prototype.Sd = function(t) {
        var n = this;
        this.jd(), this.Or.Qr((function() {
            return n.Wd.Sd(t), Promise.resolve();
        }));
    }, t.prototype.Ad = function(t) {
        // Checks for shutdown but does not raise error, allowing remove after
        // shutdown to be a no-op.
        this.zd || this.Wd.Ad(t);
    }, Object.defineProperty(t.prototype, "zd", {
        get: function() {
            // Technically, the asyncQueue is still running, but only accepting operations
            // related to termination or supposed to be run after termination. It is effectively
            // terminated to the eyes of users.
            return this.Or.Yr;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.transaction = function(t) {
        var n = this;
        this.jd();
        var i = new ei;
        return this.Or.Qr((function() {
            return n.Jo.runTransaction(n.Or, t, i), Promise.resolve();
        })), i.promise;
    }, t;
}(), sr = /** @class */ function() {
    function t(t) {
        this.observer = t, 
        /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */
        this.muted = !1;
    }
    return t.prototype.next = function(t) {
        this.Hd(this.observer.next, t);
    }, t.prototype.error = function(t) {
        this.Hd(this.observer.error, t);
    }, t.prototype.Yd = function() {
        this.muted = !0;
    }, t.prototype.Hd = function(t, n) {
        var i = this;
        this.muted || setTimeout((function() {
            i.muted || t(n);
        }), 0);
    }, t;
}();

/**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function or(t) {
    /**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */
    return function(t, n) {
        if ("object" != typeof t || null === t) return !1;
        for (var i = t, e = 0, r = n; e < r.length; e++) {
            var u = r[e];
            if (u in i && "function" == typeof i[u]) return !0;
        }
        return !1;
    }
    /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
    /**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 */ (t, [ "next", "error", "complete" ]);
}

var hr = /** @class */ function() {
    function t(t, n, i, e) {
        this.firestore = t, this.timestampsInSnapshots = n, this.Xd = i, this.converter = e;
    }
    return t.prototype.$d = function(t) {
        switch (tt(t)) {
          case 0 /* NullValue */ :
            return null;

          case 1 /* BooleanValue */ :
            return t.booleanValue;

          case 2 /* NumberValue */ :
            return ht(t.integerValue || t.doubleValue);

          case 3 /* TimestampValue */ :
            return this.Zd(t.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return this.tv(t);

          case 5 /* StringValue */ :
            return t.stringValue;

          case 6 /* BlobValue */ :
            return new Ie(ct(t.bytesValue));

          case 7 /* RefValue */ :
            return this.nv(t.referenceValue);

          case 8 /* GeoPointValue */ :
            return new Ne(t.geoPointValue.latitude, t.geoPointValue.longitude);

          case 9 /* ArrayValue */ :
            return this.iv(t.arrayValue);

          case 10 /* ObjectValue */ :
            return this.ev(t.mapValue);

          default:
            throw Gn("Invalid value type: " + JSON.stringify(t));
        }
    }, t.prototype.ev = function(t) {
        var n = this, i = {};
        return W(t.fields || {}, (function(t, e) {
            i[t] = n.$d(e);
        })), i;
    }, t.prototype.iv = function(t) {
        var n = this;
        return (t.values || []).map((function(t) {
            return n.$d(t);
        }));
    }, t.prototype.tv = function(t) {
        switch (this.Xd) {
          case "previous":
            var n = function t(n) {
                var i = n.mapValue.fields.__previous_value__;
                return X(i) ? t(i) : i;
            }(t);
            return null == n ? null : this.$d(n);

          case "estimate":
            return this.Zd($(t));

          default:
            return null;
        }
    }, t.prototype.Zd = function(t) {
        var n = ot(t), i = new V(n.seconds, n.nanos);
        return this.timestampsInSnapshots ? i : i.toDate();
    }, t.prototype.nv = function(t) {
        var n = O.H(t);
        Wn(Un(n), "ReferenceValue is not valid " + t);
        var i = new Xn(n.get(1), n.get(3)), e = new j(n.j(5));
        return i.isEqual(this.firestore.rv) || 
        // TODO(b/64130202): Somehow support foreign references.
        Bn("Document " + e + " contains a document reference within a different database (" + i.projectId + "/" + i.database + ") which is not supported. It will be treated as a reference in the current database (" + this.firestore.rv.projectId + "/" + this.firestore.rv.database + ") instead."), 
        new vr(e, this.firestore, this.converter);
    }, t;
}(), cr = ai.Nu, ar = /** @class */ function() {
    function t(t) {
        var n, i;
        if (void 0 === t.host) {
            if (void 0 !== t.ssl) throw new E(T.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            this.host = "firestore.googleapis.com", this.ssl = !0;
        } else ue("settings", "non-empty string", "host", t.host), this.host = t.host, se("settings", "boolean", "ssl", t.ssl), 
        this.ssl = null === (n = t.ssl) || void 0 === n || n;
        if (ve("settings", t, [ "host", "ssl", "credentials", "timestampsInSnapshots", "cacheSizeBytes", "experimentalForceLongPolling" ]), 
        se("settings", "object", "credentials", t.credentials), this.credentials = t.credentials, 
        se("settings", "boolean", "timestampsInSnapshots", t.timestampsInSnapshots), 
        // Nobody should set timestampsInSnapshots anymore, but the error depends on
        // whether they set it to true or false...
        !0 === t.timestampsInSnapshots ? Bn("\n  The timestampsInSnapshots setting now defaults to true and you no\n  longer need to explicitly set it. In a future release, the setting\n  will be removed entirely and so it is recommended that you remove it\n  from your firestore.settings() call now.") : !1 === t.timestampsInSnapshots && Bn("\n  The timestampsInSnapshots setting will soon be removed. YOU MUST UPDATE\n  YOUR CODE.\n\n  To hide this warning, stop using the timestampsInSnapshots setting in your\n  firestore.settings({ ... }) call.\n\n  Once you remove the setting, Timestamps stored in Cloud Firestore will be\n  read back as Firebase Timestamp objects instead of as system Date objects.\n  So you will also need to update code expecting a Date to instead expect a\n  Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at'); const date =\n  timestamp.toDate();\n\n  Please audit all existing usages of Date when you enable the new\n  behavior."), 
        this.timestampsInSnapshots = null === (i = t.timestampsInSnapshots) || void 0 === i || i, 
        se("settings", "number", "cacheSizeBytes", t.cacheSizeBytes), void 0 === t.cacheSizeBytes) this.cacheSizeBytes = ai.Fu; else {
            if (t.cacheSizeBytes !== cr && t.cacheSizeBytes < ai.Ou) throw new E(T.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + ai.Ou);
            this.cacheSizeBytes = t.cacheSizeBytes;
        }
        se("settings", "boolean", "experimentalForceLongPolling", t.experimentalForceLongPolling), 
        this.forceLongPolling = void 0 !== t.experimentalForceLongPolling && t.experimentalForceLongPolling;
    }
    return t.prototype.isEqual = function(t) {
        return this.host === t.host && this.ssl === t.ssl && this.timestampsInSnapshots === t.timestampsInSnapshots && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.forceLongPolling === t.forceLongPolling;
    }, t;
}(), fr = /** @class */ function() {
    // Note: We are using `MemoryPersistenceProvider` as a default
    // PersistenceProvider to ensure backwards compatibility with the format
    // expected by the console build.
    function t(n, i, e) {
        var s = this;
        if (void 0 === e && (e = new zi), this.uv = null, 
        // Public for use in tests.
        // TODO(mikelehen): Use modularized initialization instead.
        this.sv = new ui, this.INTERNAL = {
            delete: function() {
                return tslib.__awaiter(s, void 0, void 0, (function() {
                    return tslib.__generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            // The client must be initalized to ensure that all subsequent API usage
                            // throws an exception.
                            return this.ov(), [ 4 /*yield*/ , this.hv.terminate() ];

                          case 1:
                            return t.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }
        }, "object" == typeof n.options) {
            // This is very likely a Firebase app object
            // TODO(b/34177605): Can we somehow use instanceof?
            var o = n;
            this.uv = o, this.rv = t.cv(o), this.av = o.name, this.fv = new S(i);
        } else {
            var h = n;
            if (!h.projectId) throw new E(T.INVALID_ARGUMENT, "Must provide projectId");
            this.rv = new Xn(h.projectId, h.database), 
            // Use a default persistenceKey that lines up with FirebaseApp.
            this.av = "[DEFAULT]", this.fv = new R;
        }
        this.lv = e, this.dv = new ar({}), this.vv = this.wv(this.rv);
    }
    return t.prototype.settings = function(t) {
        if (Zi("Firestore.settings", arguments, 1), ee("Firestore.settings", "object", 1, t), 
        Sr(t, "persistence")) throw new E(T.INVALID_ARGUMENT, '"persistence" is now specified with a separate call to firestore.enablePersistence().');
        var n = new ar(t);
        if (this.hv && !this.dv.isEqual(n)) throw new E(T.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");
        this.dv = n, void 0 !== n.credentials && (this.fv = P(n.credentials));
    }, t.prototype.enableNetwork = function() {
        return this.ov(), this.hv.enableNetwork();
    }, t.prototype.disableNetwork = function() {
        return this.ov(), this.hv.disableNetwork();
    }, t.prototype.enablePersistence = function(t) {
        var n, i;
        if (this.hv) throw new E(T.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");
        var e = !1;
        return t && (void 0 !== t.experimentalTabSynchronization && Bn("The 'experimentalTabSynchronization' setting has been renamed to 'synchronizeTabs'. In a future release, the setting will be removed and it is recommended that you update your firestore.enablePersistence() call to use 'synchronizeTabs'."), 
        e = null !== (i = null !== (n = t.synchronizeTabs) && void 0 !== n ? n : t.experimentalTabSynchronization) && void 0 !== i && i), 
        this.mv(this.lv, {
            zc: !0,
            cacheSizeBytes: this.dv.cacheSizeBytes,
            synchronizeTabs: e
        });
    }, t.prototype.clearPersistence = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t, n = this;
            return tslib.__generator(this, (function(i) {
                if (void 0 !== this.hv && !this.hv.zd) throw new E(T.FAILED_PRECONDITION, "Persistence cannot be cleared after this Firestore instance is initialized.");
                return t = new ei, this.sv.Xr((function() {
                    return tslib.__awaiter(n, void 0, void 0, (function() {
                        var n, i;
                        return tslib.__generator(this, (function(e) {
                            switch (e.label) {
                              case 0:
                                return e.trys.push([ 0, 2, , 3 ]), n = this.pv(), [ 4 /*yield*/ , this.lv.clearPersistence(n) ];

                              case 1:
                                return e.sent(), t.resolve(), [ 3 /*break*/ , 3 ];

                              case 2:
                                return i = e.sent(), t.reject(i), [ 3 /*break*/ , 3 ];

                              case 3:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                })), [ 2 /*return*/ , t.promise ];
            }));
        }));
    }, t.prototype.terminate = function() {
        return this.app._removeServiceInstance("firestore"), this.INTERNAL.delete();
    }, Object.defineProperty(t.prototype, "bv", {
        get: function() {
            return this.ov(), this.hv.zd;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.waitForPendingWrites = function() {
        return this.ov(), this.hv.waitForPendingWrites();
    }, t.prototype.onSnapshotsInSync = function(t) {
        if (this.ov(), or(t)) return this.gv(t);
        ee("Firestore.onSnapshotsInSync", "function", 1, t);
        var n = {
            next: t
        };
        return this.gv(n);
    }, t.prototype.gv = function(t) {
        var n = this, i = new sr({
            next: function() {
                t.next && t.next();
            },
            error: function(t) {
                throw Gn("Uncaught Error in onSnapshotsInSync");
            }
        });
        return this.hv.Sd(i), function() {
            i.Yd(), n.hv.Ad(i);
        };
    }, t.prototype.ov = function() {
        return this.hv || 
        // Kick off starting the client but don't actually wait for it.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.mv(new zi, {
            zc: !1
        }), this.hv;
    }, t.prototype.pv = function() {
        return new Yn(this.rv, this.av, this.dv.host, this.dv.ssl, this.dv.forceLongPolling);
    }, t.prototype.mv = function(t, n) {
        Wn(!!this.dv.host, "FirestoreSettings.host is not set"), Wn(!this.hv, "configureClient() called multiple times");
        var i = this.pv();
        return this.hv = new ur(jn.xt(), i, this.fv, this.sv), this.hv.start(t, n);
    }, t.prototype.wv = function(t) {
        var n = new Fn(t, {
            de: jn.xt().de
        });
        return new Me(n, (function(n) {
            if (n instanceof vr) {
                var i = t, e = n.firestore.rv;
                if (!e.isEqual(i)) throw new E(T.INVALID_ARGUMENT, "Document reference is for database " + e.projectId + "/" + e.database + " but should be for database " + i.projectId + "/" + i.database);
                return new Le(t, n.yv);
            }
            return n;
        }));
    }, t.cv = function(t) {
        if (!Sr(t.options, "projectId")) throw new E(T.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
        var n = t.options.projectId;
        if (!n || "string" != typeof n) throw new E(T.INVALID_ARGUMENT, "projectId must be a string in FirebaseApp.options");
        return new Xn(n);
    }, Object.defineProperty(t.prototype, "app", {
        get: function() {
            if (!this.uv) throw new E(T.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.uv;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.collection = function(t) {
        return Zi("Firestore.collection", arguments, 1), ee("Firestore.collection", "non-empty string", 1, t), 
        this.ov(), new yr(O.H(t), this);
    }, t.prototype.doc = function(t) {
        return Zi("Firestore.doc", arguments, 1), ee("Firestore.doc", "non-empty string", 1, t), 
        this.ov(), vr._v(O.H(t), this);
    }, t.prototype.collectionGroup = function(t) {
        if (Zi("Firestore.collectionGroup", arguments, 1), ee("Firestore.collectionGroup", "non-empty string", 1, t), 
        t.indexOf("/") >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid collection ID '" + t + "' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");
        return this.ov(), new br(new Bt(O.Y, t), this);
    }, t.prototype.runTransaction = function(t) {
        var n = this;
        return Zi("Firestore.runTransaction", arguments, 1), ee("Firestore.runTransaction", "function", 1, t), 
        this.ov().transaction((function(i) {
            return t(new lr(n, i));
        }));
    }, t.prototype.batch = function() {
        return this.ov(), new dr(this);
    }, Object.defineProperty(t, "logLevel", {
        get: function() {
            switch (Ln()) {
              case logger.LogLevel.DEBUG:
                return "debug";

              case logger.LogLevel.SILENT:
                return "silent";

              default:
                // The default log level is error
                return "error";
            }
        },
        enumerable: !0,
        configurable: !0
    }), t.setLogLevel = function(t) {
        switch (Zi("Firestore.setLogLevel", arguments, 1), ee("Firestore.setLogLevel", "non-empty string", 1, t), 
        t) {
          case "debug":
            Mn(logger.LogLevel.DEBUG);
            break;

          case "error":
            Mn(logger.LogLevel.ERROR);
            break;

          case "silent":
            Mn(logger.LogLevel.SILENT);
            break;

          default:
            throw new E(T.INVALID_ARGUMENT, "Invalid log level: " + t);
        }
    }, 
    // Note: this is not a property because the minifier can't work correctly with
    // the way TypeScript compiler outputs properties.
    t.prototype.Iv = function() {
        return this.dv.timestampsInSnapshots;
    }, t;
}(), lr = /** @class */ function() {
    function t(t, n) {
        this.Tv = t, this.Ev = n;
    }
    return t.prototype.get = function(t) {
        var n = this;
        Zi("Transaction.get", arguments, 1);
        var i = Er("Transaction.get", t, this.Tv);
        return this.Ev.lookup([ i.yv ]).then((function(t) {
            if (!t || 1 !== t.length) return Gn("Mismatch in docs returned from document lookup.");
            var e = t[0];
            if (e instanceof Lt) return new mr(n.Tv, i.yv, null, 
            /* fromCache= */ !1, 
            /* hasPendingWrites= */ !1, i.Dv);
            if (e instanceof xt) return new mr(n.Tv, i.yv, e, 
            /* fromCache= */ !1, 
            /* hasPendingWrites= */ !1, i.Dv);
            throw Gn("BatchGetDocumentsRequest returned unexpected document type: " + e.constructor.name);
        }));
    }, t.prototype.set = function(t, n, i) {
        ne("Transaction.set", arguments, 2, 3);
        var e = Er("Transaction.set", t, this.Tv);
        i = _r("Transaction.set", i);
        var r = Rr(e.Dv, n, "Transaction.set"), u = r[0], s = r[1], o = i.merge || i.mergeFields ? this.Tv.vv.uf(s, u, i.mergeFields) : this.Tv.vv.ef(s, u);
        return this.Ev.set(e.yv, o), this;
    }, t.prototype.update = function(t, n, i) {
        for (var e, r, u = [], s = 3; s < arguments.length; s++) u[s - 3] = arguments[s];
        return "string" == typeof n || n instanceof Ee ? (te("Transaction.update", arguments, 3), 
        e = Er("Transaction.update", t, this.Tv), r = this.Tv.vv.af("Transaction.update", n, i, u)) : (Zi("Transaction.update", arguments, 2), 
        e = Er("Transaction.update", t, this.Tv), r = this.Tv.vv.sf("Transaction.update", n)), 
        this.Ev.update(e.yv, r), this;
    }, t.prototype.delete = function(t) {
        Zi("Transaction.delete", arguments, 1);
        var n = Er("Transaction.delete", t, this.Tv);
        return this.Ev.delete(n.yv), this;
    }, t;
}(), dr = /** @class */ function() {
    function t(t) {
        this.Tv = t, this.Rv = [], this.Sv = !1;
    }
    return t.prototype.set = function(t, n, i) {
        ne("WriteBatch.set", arguments, 2, 3), this.Av();
        var e = Er("WriteBatch.set", t, this.Tv);
        i = _r("WriteBatch.set", i);
        var r = Rr(e.Dv, n, "WriteBatch.set"), u = r[0], s = r[1], o = i.merge || i.mergeFields ? this.Tv.vv.uf(s, u, i.mergeFields) : this.Tv.vv.ef(s, u);
        return this.Rv = this.Rv.concat(o.Ka(e.yv, At.NONE)), this;
    }, t.prototype.update = function(t, n, i) {
        for (var e, r, u = [], s = 3; s < arguments.length; s++) u[s - 3] = arguments[s];
        return this.Av(), "string" == typeof n || n instanceof Ee ? (te("WriteBatch.update", arguments, 3), 
        e = Er("WriteBatch.update", t, this.Tv), r = this.Tv.vv.af("WriteBatch.update", n, i, u)) : (Zi("WriteBatch.update", arguments, 2), 
        e = Er("WriteBatch.update", t, this.Tv), r = this.Tv.vv.sf("WriteBatch.update", n)), 
        this.Rv = this.Rv.concat(r.Ka(e.yv, At.exists(!0))), this;
    }, t.prototype.delete = function(t) {
        Zi("WriteBatch.delete", arguments, 1), this.Av();
        var n = Er("WriteBatch.delete", t, this.Tv);
        return this.Rv = this.Rv.concat(new Nt(n.yv, At.NONE)), this;
    }, t.prototype.commit = function() {
        return this.Av(), this.Sv = !0, this.Rv.length > 0 ? this.Tv.ov().write(this.Rv) : Promise.resolve();
    }, t.prototype.Av = function() {
        if (this.Sv) throw new E(T.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }, t;
}(), vr = /** @class */ function() {
    function t(t, n, i) {
        this.yv = t, this.firestore = n, this.Dv = i, this.hv = this.firestore.ov();
    }
    return t._v = function(n, i, e) {
        if (n.length % 2 != 0) throw new E(T.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + n.J() + " has " + n.length);
        return new t(new j(n), i, e);
    }, Object.defineProperty(t.prototype, "id", {
        get: function() {
            return this.yv.path.B();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "parent", {
        get: function() {
            return new yr(this.yv.path.L(), this.firestore, this.Dv);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "path", {
        get: function() {
            return this.yv.path.J();
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.collection = function(t) {
        if (Zi("DocumentReference.collection", arguments, 1), ee("DocumentReference.collection", "non-empty string", 1, t), 
        !t) throw new E(T.INVALID_ARGUMENT, "Must provide a non-empty collection name to collection()");
        var n = O.H(t);
        return new yr(this.yv.path.child(n), this.firestore);
    }, t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) throw we("isEqual", "DocumentReference", 1, n);
        return this.firestore === n.firestore && this.yv.isEqual(n.yv) && this.Dv === n.Dv;
    }, t.prototype.set = function(t, n) {
        ne("DocumentReference.set", arguments, 1, 2), n = _r("DocumentReference.set", n);
        var i = Rr(this.Dv, t, "DocumentReference.set"), e = i[0], r = i[1], u = n.merge || n.mergeFields ? this.firestore.vv.uf(r, e, n.mergeFields) : this.firestore.vv.ef(r, e);
        return this.hv.write(u.Ka(this.yv, At.NONE));
    }, t.prototype.update = function(t, n) {
        for (var i, e = [], r = 2; r < arguments.length; r++) e[r - 2] = arguments[r];
        return "string" == typeof t || t instanceof Ee ? (te("DocumentReference.update", arguments, 2), 
        i = this.firestore.vv.af("DocumentReference.update", t, n, e)) : (Zi("DocumentReference.update", arguments, 1), 
        i = this.firestore.vv.sf("DocumentReference.update", t)), this.hv.write(i.Ka(this.yv, At.exists(!0)));
    }, t.prototype.delete = function() {
        return Zi("DocumentReference.delete", arguments, 0), this.hv.write([ new Nt(this.yv, At.NONE) ]);
    }, t.prototype.onSnapshot = function() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        ne("DocumentReference.onSnapshot", arguments, 1, 4);
        var i, e = {
            includeMetadataChanges: !1
        }, r = 0;
        "object" != typeof t[r] || or(t[r]) || (ve("DocumentReference.onSnapshot", e = t[r], [ "includeMetadataChanges" ]), 
        se("DocumentReference.onSnapshot", "boolean", "includeMetadataChanges", e.includeMetadataChanges), 
        r++);
        var u = {
            includeMetadataChanges: e.includeMetadataChanges
        };
        return or(t[r]) ? i = t[r] : (ee("DocumentReference.onSnapshot", "function", r, t[r]), 
        re("DocumentReference.onSnapshot", "function", r + 1, t[r + 1]), re("DocumentReference.onSnapshot", "function", r + 2, t[r + 2]), 
        i = {
            next: t[r],
            error: t[r + 1],
            complete: t[r + 2]
        }), this.Cv(u, i);
    }, t.prototype.Cv = function(t, n) {
        var i = this, e = function(t) {
            console.error("Uncaught Error in onSnapshot:", t);
        };
        n.error && (e = n.error.bind(n));
        var r = new sr({
            next: function(t) {
                if (n.next) {
                    Wn(t.docs.size <= 1, "Too many documents returned on a document query");
                    var e = t.docs.get(i.yv);
                    n.next(new mr(i.firestore, i.yv, e, t.fromCache, t.hasPendingWrites, i.Dv));
                }
            },
            error: e
        }), u = this.hv.listen(Bt.Cn(this.yv.path), r, t);
        return function() {
            r.Yd(), i.hv.nl(u);
        };
    }, t.prototype.get = function(t) {
        var n = this;
        return ne("DocumentReference.get", arguments, 0, 1), Tr("DocumentReference.get", t), 
        new Promise((function(i, e) {
            t && "cache" === t.source ? n.firestore.ov().Kd(n.yv).then((function(t) {
                i(new mr(n.firestore, n.yv, t, 
                /*fromCache=*/ !0, t instanceof xt && t.nn, n.Dv));
            }), e) : n.Pv(i, e, t);
        }));
    }, t.prototype.Pv = function(t, n, i) {
        var e = this.Cv({
            includeMetadataChanges: !0,
            Fd: !0
        }, {
            next: function(r) {
                // Remove query first before passing event to user to avoid
                // user actions affecting the now stale query.
                e(), !r.exists && r.metadata.fromCache ? 
                // TODO(dimond): If we're online and the document doesn't
                // exist then we resolve with a doc.exists set to false. If
                // we're offline however, we reject the Promise in this
                // case. Two options: 1) Cache the negative response from
                // the server so we can deliver that even when you're
                // offline 2) Actually reject the Promise in the online case
                // if the document doesn't exist.
                n(new E(T.UNAVAILABLE, "Failed to get document because the client is offline.")) : r.exists && r.metadata.fromCache && i && "server" === i.source ? n(new E(T.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : t(r);
            },
            error: n
        });
    }, t.prototype.withConverter = function(n) {
        return new t(this.yv, this.firestore, n);
    }, t;
}(), wr = /** @class */ function() {
    function t(t, n) {
        this.hasPendingWrites = t, this.fromCache = n;
    }
    return t.prototype.isEqual = function(t) {
        return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
    }, t;
}(), mr = /** @class */ function() {
    function t(t, n, i, e, r, u) {
        this.Tv = t, this.yv = n, this.Vv = i, this.kv = e, this.Nv = r, this.Dv = u;
    }
    return t.prototype.data = function(t) {
        if (ne("DocumentSnapshot.data", arguments, 0, 1), t = Ir("DocumentSnapshot.data", t), 
        this.Vv) {
            // We only want to use the converter and create a new DocumentSnapshot
            // if a converter has been provided.
            if (this.Dv) {
                var n = new pr(this.Tv, this.yv, this.Vv, this.kv, this.Nv);
                return this.Dv.fromFirestore(n, t);
            }
            var i = new hr(this.Tv, this.Tv.Iv(), t.serverTimestamps, 
            /* converter= */ void 0);
            return i.$d(this.Vv.yn());
        }
    }, t.prototype.get = function(t, n) {
        if (ne("DocumentSnapshot.get", arguments, 1, 2), n = Ir("DocumentSnapshot.get", n), 
        this.Vv) {
            var i = this.Vv.data().field(Qe("DocumentSnapshot.get", t));
            if (null !== i) {
                var e = new hr(this.Tv, this.Tv.Iv(), n.serverTimestamps, this.Dv);
                return e.$d(i);
            }
        }
    }, Object.defineProperty(t.prototype, "id", {
        get: function() {
            return this.yv.path.B();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "ref", {
        get: function() {
            return new vr(this.yv, this.Tv, this.Dv);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "exists", {
        get: function() {
            return null !== this.Vv;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "metadata", {
        get: function() {
            return new wr(this.Nv, this.kv);
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) throw we("isEqual", "DocumentSnapshot", 1, n);
        return this.Tv === n.Tv && this.kv === n.kv && this.yv.isEqual(n.yv) && (null === this.Vv ? null === n.Vv : this.Vv.isEqual(n.Vv)) && this.Dv === n.Dv;
    }, t;
}(), pr = /** @class */ function(t) {
    function i() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return tslib.__extends(i, t), i.prototype.data = function(n) {
        var i = t.prototype.data.call(this, n);
        return Wn(void 0 !== i, "Document in a QueryDocumentSnapshot should exist"), i;
    }, i;
}(mr), br = /** @class */ function() {
    function t(t, n, i) {
        this.Ov = t, this.firestore = n, this.Dv = i;
    }
    return t.prototype.where = function(n, i, e) {
        Zi("Query.where", arguments, 3), de("Query.where", 3, e);
        // Enumerated from the WhereFilterOp type in index.d.ts.
        var r, u = [ "<", "<=", "==", ">=", ">", "array-contains", "in", "array-contains-any" ];
        ce("Query.where", u, 2, i);
        var s = Qe("Query.where", n), o = Gt.H(i);
        if (s.$()) {
            if (o === Gt.ARRAY_CONTAINS || o === Gt.ARRAY_CONTAINS_ANY) throw new E(T.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o.toString() + "' queries on FieldPath.documentId().");
            if (o === Gt.IN) {
                this.Fv(e, o);
                for (var h = [], c = 0, a = e; c < a.length; c++) {
                    var f = a[c];
                    h.push(this.Uv(f));
                }
                r = {
                    arrayValue: {
                        values: h
                    }
                };
            } else r = this.Uv(e);
        } else o !== Gt.IN && o !== Gt.ARRAY_CONTAINS_ANY || this.Fv(e, o), r = this.firestore.vv.ff("Query.where", e, 
        // We only allow nested arrays for IN queries.
        /** allowArrays = */ o === Gt.IN);
        var l = Wt.create(s, o, r);
        return this.jv(l), new t(this.Ov.kn(l), this.firestore, this.Dv);
    }, t.prototype.orderBy = function(n, i) {
        var e;
        if (ne("Query.orderBy", arguments, 1, 2), re("Query.orderBy", "non-empty string", 2, i), 
        void 0 === i || "asc" === i) e = Xt.ASCENDING; else {
            if ("desc" !== i) throw new E(T.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + i + "', expected 'asc' or 'desc'.");
            e = Xt.DESCENDING;
        }
        if (null !== this.Ov.startAt) throw new E(T.INVALID_ARGUMENT, "Invalid query. You must not call Query.startAt() or Query.startAfter() before calling Query.orderBy().");
        if (null !== this.Ov.endAt) throw new E(T.INVALID_ARGUMENT, "Invalid query. You must not call Query.endAt() or Query.endBefore() before calling Query.orderBy().");
        var r = Qe("Query.orderBy", n), u = new Zt(r, e);
        return this.xv(u), new t(this.Ov.On(u), this.firestore, this.Dv);
    }, t.prototype.limit = function(n) {
        return Zi("Query.limit", arguments, 1), ee("Query.limit", "number", 1, n), me("Query.limit", 1, n), 
        new t(this.Ov.Fn(n), this.firestore, this.Dv);
    }, t.prototype.limitToLast = function(n) {
        return Zi("Query.limitToLast", arguments, 1), ee("Query.limitToLast", "number", 1, n), 
        me("Query.limitToLast", 1, n), new t(this.Ov.Un(n), this.firestore, this.Dv);
    }, t.prototype.startAt = function(n) {
        for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
        te("Query.startAt", arguments, 1);
        var r = this.Lv("Query.startAt", n, i, 
        /*before=*/ !0);
        return new t(this.Ov.jn(r), this.firestore, this.Dv);
    }, t.prototype.startAfter = function(n) {
        for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
        te("Query.startAfter", arguments, 1);
        var r = this.Lv("Query.startAfter", n, i, 
        /*before=*/ !1);
        return new t(this.Ov.jn(r), this.firestore, this.Dv);
    }, t.prototype.endBefore = function(n) {
        for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
        te("Query.endBefore", arguments, 1);
        var r = this.Lv("Query.endBefore", n, i, 
        /*before=*/ !0);
        return new t(this.Ov.xn(r), this.firestore, this.Dv);
    }, t.prototype.endAt = function(n) {
        for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
        te("Query.endAt", arguments, 1);
        var r = this.Lv("Query.endAt", n, i, 
        /*before=*/ !1);
        return new t(this.Ov.xn(r), this.firestore, this.Dv);
    }, t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) throw we("isEqual", "Query", 1, n);
        return this.firestore === n.firestore && this.Ov.isEqual(n.Ov);
    }, t.prototype.withConverter = function(n) {
        return new t(this.Ov, this.firestore, n);
    }, 
    /** Helper function to create a bound from a document or fields */
    t.prototype.Lv = function(t, n, i, e) {
        if (de(t, 1, n), n instanceof mr) {
            if (i.length > 0) throw new E(T.INVALID_ARGUMENT, "Too many arguments provided to " + t + "().");
            var r = n;
            if (!r.exists) throw new E(T.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + t + "().");
            return this.Mv(r.Vv, e);
        }
        var u = [ n ].concat(i);
        return this.qv(t, u, e);
    }, 
    /**
     * Create a Bound from a query and a document.
     *
     * Note that the Bound will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */
    t.prototype.Mv = function(t, n) {
        // Because people expect to continue/end a query at the exact document
        // provided, we need to use the implicit sort order rather than the explicit
        // sort order, because it's guaranteed to contain the document key. That way
        // the position becomes unambiguous and the query continues/ends exactly at
        // the provided document. Without the key (by using the explicit sort
        // orders), multiple documents could match the position, yielding duplicate
        // results.
        for (var i = [], e = 0, r = this.Ov.orderBy; e < r.length; e++) {
            var u = r[e];
            if (u.field.$()) i.push(at(this.firestore.rv, t.key)); else {
                var s = t.field(u.field);
                if (X(s)) throw new E(T.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + u.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === s) {
                    var o = u.field.J();
                    throw new E(T.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + o + "' (used as the orderBy) does not exist.");
                }
                i.push(s);
            }
        }
        return new $t(i, n);
    }, 
    /**
     * Converts a list of field values to a Bound for the given query.
     */
    t.prototype.qv = function(t, n, i) {
        // Use explicit order by's because it has to match the query the user made
        var e = this.Ov.En;
        if (n.length > e.length) throw new E(T.INVALID_ARGUMENT, "Too many arguments provided to " + t + "(). The number of arguments must be less than or equal to the number of Query.orderBy() clauses");
        for (var r = [], u = 0; u < n.length; u++) {
            var s = n[u];
            if (e[u].field.$()) {
                if ("string" != typeof s) throw new E(T.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + t + "(), but got a " + typeof s);
                if (!this.Ov.Yn() && -1 !== s.indexOf("/")) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + t + "() must be a plain document ID, but '" + s + "' contains a slash.");
                var o = this.Ov.path.child(O.H(s));
                if (!j.nt(o)) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + t + "() must result in a valid document path, but '" + o + "' is not because it contains an odd number of segments.");
                var h = new j(o);
                r.push(at(this.firestore.rv, h));
            } else {
                var c = this.firestore.vv.ff(t, s);
                r.push(c);
            }
        }
        return new $t(r, i);
    }, t.prototype.onSnapshot = function() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        ne("Query.onSnapshot", arguments, 1, 4);
        var i, e = {}, r = 0;
        return "object" != typeof t[r] || or(t[r]) || (ve("Query.onSnapshot", e = t[r], [ "includeMetadataChanges" ]), 
        se("Query.onSnapshot", "boolean", "includeMetadataChanges", e.includeMetadataChanges), 
        r++), or(t[r]) ? i = t[r] : (ee("Query.onSnapshot", "function", r, t[r]), re("Query.onSnapshot", "function", r + 1, t[r + 1]), 
        re("Query.onSnapshot", "function", r + 2, t[r + 2]), i = {
            next: t[r],
            error: t[r + 1],
            complete: t[r + 2]
        }), this.Bv(this.Ov), this.Cv(e, i);
    }, t.prototype.Cv = function(t, n) {
        var i = this, e = function(t) {
            console.error("Uncaught Error in onSnapshot:", t);
        };
        n.error && (e = n.error.bind(n));
        var r = new sr({
            next: function(t) {
                n.next && n.next(new gr(i.firestore, i.Ov, t, i.Dv));
            },
            error: e
        }), u = this.firestore.ov(), s = u.listen(this.Ov, r, t);
        return function() {
            r.Yd(), u.nl(s);
        };
    }, t.prototype.Bv = function(t) {
        if (t.Jn() && 0 === t.En.length) throw new E(T.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }, t.prototype.get = function(t) {
        var n = this;
        return ne("Query.get", arguments, 0, 1), Tr("Query.get", t), this.Bv(this.Ov), new Promise((function(i, e) {
            t && "cache" === t.source ? n.firestore.ov().Jd(n.Ov).then((function(t) {
                i(new gr(n.firestore, n.Ov, t, n.Dv));
            }), e) : n.Pv(i, e, t);
        }));
    }, t.prototype.Pv = function(t, n, i) {
        var e = this.Cv({
            includeMetadataChanges: !0,
            Fd: !0
        }, {
            next: function(r) {
                // Remove query first before passing event to user to avoid
                // user actions affecting the now stale query.
                e(), r.metadata.fromCache && i && "server" === i.source ? n(new E(T.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : t(r);
            },
            error: n
        });
    }, 
    /**
     * Parses the given documentIdValue into a ReferenceValue, throwing
     * appropriate errors if the value is anything other than a DocumentReference
     * or String, or if the string is malformed.
     */
    t.prototype.Uv = function(t) {
        if ("string" == typeof t) {
            if ("" === t) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!this.Ov.Yn() && -1 !== t.indexOf("/")) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + t + "' contains a '/' character.");
            var n = this.Ov.path.child(O.H(t));
            if (!j.nt(n)) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + n + "' is not because it has an odd number of segments (" + n.length + ").");
            return at(this.firestore.rv, new j(n));
        }
        if (t instanceof vr) {
            var i = t;
            return at(this.firestore.rv, i.yv);
        }
        throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + le(t) + ".");
    }, 
    /**
     * Validates that the value passed into a disjunctrive filter satisfies all
     * array requirements.
     */
    t.prototype.Fv = function(t, n) {
        if (!Array.isArray(t) || 0 === t.length) throw new E(T.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + n.toString() + "' filters.");
        if (t.length > 10) throw new E(T.INVALID_ARGUMENT, "Invalid Query. '" + n.toString() + "' filters support a maximum of 10 elements in the value array.");
        if (t.indexOf(null) >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid Query. '" + n.toString() + "' filters cannot contain 'null' in the value array.");
        if (t.filter((function(t) {
            return Number.isNaN(t);
        })).length > 0) throw new E(T.INVALID_ARGUMENT, "Invalid Query. '" + n.toString() + "' filters cannot contain 'NaN' in the value array.");
    }, t.prototype.jv = function(t) {
        if (t instanceof Wt) {
            var n = [ Gt.ARRAY_CONTAINS, Gt.ARRAY_CONTAINS_ANY ], i = [ Gt.IN, Gt.ARRAY_CONTAINS_ANY ], e = n.indexOf(t.op) >= 0, r = i.indexOf(t.op) >= 0;
            if (t.Nn()) {
                var u = this.Ov.Pn();
                if (null !== u && !u.isEqual(t.field)) throw new E(T.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '" + u.toString() + "' and '" + t.field.toString() + "'");
                var s = this.Ov.Vn();
                null !== s && this.Qv(t.field, s);
            } else if (r || e) {
                // You can have at most 1 disjunctive filter and 1 array filter. Check if
                // the new filter conflicts with an existing one.
                var o = null;
                if (r && (o = this.Ov.Hn(i)), null === o && e && (o = this.Ov.Hn(n)), null != o) 
                // We special case when it's a duplicate op to give a slightly clearer error message.
                throw o === t.op ? new E(T.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + t.op.toString() + "' filter.") : new E(T.INVALID_ARGUMENT, "Invalid query. You cannot use '" + t.op.toString() + "' filters with '" + o.toString() + "' filters.");
            }
        }
    }, t.prototype.xv = function(t) {
        if (null === this.Ov.Vn()) {
            // This is the first order by. It must match any inequality.
            var n = this.Ov.Pn();
            null !== n && this.Qv(n, t.field);
        }
    }, t.prototype.Qv = function(t, n) {
        if (!n.isEqual(t)) throw new E(T.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '" + t.toString() + "' and so you must also use '" + t.toString() + "' as your first Query.orderBy(), but your first Query.orderBy() is on field '" + n.toString() + "' instead.");
    }, t;
}(), gr = /** @class */ function() {
    function t(t, n, i, e) {
        this.Tv = t, this.Gv = n, this.Wv = i, this.Dv = e, this.zv = null, this.Kv = null, 
        this.metadata = new wr(i.hasPendingWrites, i.fromCache);
    }
    return Object.defineProperty(t.prototype, "docs", {
        get: function() {
            var t = [];
            return this.forEach((function(n) {
                return t.push(n);
            })), t;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "empty", {
        get: function() {
            return this.Wv.docs.M();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "size", {
        get: function() {
            return this.Wv.docs.size;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.forEach = function(t, n) {
        var i = this;
        ne("QuerySnapshot.forEach", arguments, 1, 2), ee("QuerySnapshot.forEach", "function", 1, t), 
        this.Wv.docs.forEach((function(e) {
            t.call(n, i.Jv(e));
        }));
    }, Object.defineProperty(t.prototype, "query", {
        get: function() {
            return new br(this.Gv, this.Tv, this.Dv);
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.docChanges = function(t) {
        t && (ve("QuerySnapshot.docChanges", t, [ "includeMetadataChanges" ]), se("QuerySnapshot.docChanges", "boolean", "includeMetadataChanges", t.includeMetadataChanges));
        var n = !(!t || !t.includeMetadataChanges);
        if (n && this.Wv.di) throw new E(T.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this.zv && this.Kv === n || (this.zv = 
        /**
 * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
 *
 * Exported for testing.
 */
        function(t, n, i, e) {
            if (i.ai.M()) {
                // Special case the first snapshot because index calculation is easy and
                // fast
                var r, u = 0;
                return i.docChanges.map((function(n) {
                    var s = new pr(t, n.doc.key, n.doc, i.fromCache, i.fi.has(n.doc.key), e);
                    return Wn(0 /* Added */ === n.type, "Invalid event type for first snapshot"), Wn(!r || i.query.Bn(r, n.doc) < 0, "Got added events in wrong order"), 
                    r = n.doc, {
                        type: "added",
                        doc: s,
                        oldIndex: -1,
                        newIndex: u++
                    };
                }));
            }
            // A DocumentSet that is updated incrementally as changes are applied to use
            // to lookup the index of a document.
            var s = i.ai;
            return i.docChanges.filter((function(t) {
                return n || 3 /* Metadata */ !== t.type;
            })).map((function(n) {
                var r = new pr(t, n.doc.key, n.doc, i.fromCache, i.fi.has(n.doc.key), e), u = -1, o = -1;
                return 0 /* Added */ !== n.type && (Wn((u = s.indexOf(n.doc.key)) >= 0, "Index for document not found"), 
                s = s.delete(n.doc.key)), 1 /* Removed */ !== n.type && (o = (s = s.add(n.doc)).indexOf(n.doc.key)), 
                {
                    type: Dr(n.type),
                    doc: r,
                    oldIndex: u,
                    newIndex: o
                };
            }));
        }(this.Tv, n, this.Wv, this.Dv), this.Kv = n), this.zv;
    }, 
    /** Check the equality. The call can be very expensive. */
    t.prototype.isEqual = function(n) {
        if (!(n instanceof t)) throw we("isEqual", "QuerySnapshot", 1, n);
        return this.Tv === n.Tv && this.Gv.isEqual(n.Gv) && this.Wv.isEqual(n.Wv) && this.Dv === n.Dv;
    }, t.prototype.Jv = function(t) {
        return new pr(this.Tv, t.key, t, this.metadata.fromCache, this.Wv.fi.has(t.key), this.Dv);
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// settings() defaults:
tslib.__spreadArrays([ "length", "forEach", "map" ], "undefined" != typeof Symbol ? [ Symbol.iterator ] : []).forEach((function(t) {
    /**
     * We are (re-)defining properties on QuerySnapshot.prototype.docChanges which
     * is a Function. This could fail, in particular in the case of 'length' which
     * already exists on Function.prototype and on IE11 is improperly defined with
     * `{ configurable: false }`. So we wrap this in a try/catch to ensure that we
     * still have a functional SDK.
     */
    try {
        Object.defineProperty(gr.prototype.docChanges, t, {
            get: function() {
                // TODO(2018/11/01): As of 2018/04/17 we're changing docChanges from an array
                // into a method. Because this is a runtime breaking change and somewhat subtle
                // (both Array and Function have a .length, etc.), we'll replace commonly-used
                // properties (including Symbol.iterator) to throw a custom error message. In
                // ~6 months we can delete the custom error as most folks will have hopefully
                // migrated.
                return function() {
                    throw new E(T.INVALID_ARGUMENT, 'QuerySnapshot.docChanges has been changed from a property into a method, so usages like "querySnapshot.docChanges" should become "querySnapshot.docChanges()"');
                }();
            }
        });
    } catch (t) {}
 // Ignore this failure intentionally
}));

var yr = /** @class */ function(t) {
    function i(n, i, e) {
        var r = t.call(this, Bt.Cn(n), i, e) || this;
        if (r.Hv = n, n.length % 2 != 1) throw new E(T.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + n.J() + " has " + n.length);
        return r;
    }
    return tslib.__extends(i, t), Object.defineProperty(i.prototype, "id", {
        get: function() {
            return this.Ov.path.B();
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(i.prototype, "parent", {
        get: function() {
            var t = this.Ov.path.L();
            return t.M() ? null : new vr(new j(t), this.firestore);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(i.prototype, "path", {
        get: function() {
            return this.Ov.path.J();
        },
        enumerable: !0,
        configurable: !0
    }), i.prototype.doc = function(t) {
        if (ne("CollectionReference.doc", arguments, 0, 1), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        0 === arguments.length && (t = zn.pr()), ee("CollectionReference.doc", "non-empty string", 1, t), 
        "" === t) throw new E(T.INVALID_ARGUMENT, "Document path must be a non-empty string");
        var n = O.H(t);
        return vr._v(this.Ov.path.child(n), this.firestore, this.Dv);
    }, i.prototype.add = function(t) {
        Zi("CollectionReference.add", arguments, 1);
        var n = this.Dv ? this.Dv.toFirestore(t) : t;
        ee("CollectionReference.add", "object", 1, n);
        var i = this.doc();
        return i.set(t).then((function() {
            return i;
        }));
    }, i.prototype.withConverter = function(t) {
        return new i(this.Hv, this.firestore, t);
    }, i;
}(br);

function _r(t, n) {
    if (void 0 === n) return {
        merge: !1
    };
    if (ve(t, n, [ "merge", "mergeFields" ]), se(t, "boolean", "merge", n.merge), oe(t, "mergeFields", "a string or a FieldPath", n.mergeFields, (function(t) {
        return "string" == typeof t || t instanceof Ee;
    })), void 0 !== n.mergeFields && void 0 !== n.merge) throw new E(T.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
    return n;
}

function Ir(t, n) {
    return void 0 === n ? {} : (ve(t, n, [ "serverTimestamps" ]), he(t, 0, "serverTimestamps", n.serverTimestamps, [ "estimate", "previous", "none" ]), 
    n);
}

function Tr(t, n) {
    re(t, "object", 1, n), n && (ve(t, n, [ "source" ]), he(t, 0, "source", n.source, [ "default", "server", "cache" ]));
}

function Er(t, n, i) {
    if (n instanceof vr) {
        if (n.firestore !== i) throw new E(T.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return n;
    }
    throw we(t, "DocumentReference", 1, n);
}

function Dr(t) {
    switch (t) {
      case 0 /* Added */ :
        return "added";

      case 2 /* Modified */ :
      case 3 /* Metadata */ :
        return "modified";

      case 1 /* Removed */ :
        return "removed";

      default:
        return Gn("Unknown change type: " + t);
    }
}

/**
 * Converts custom model object of type T into DocumentData by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to DocumentData
 * because we want to provide the user with a more specific error message if
 * their set() or fails due to invalid data originating from a toFirestore()
 * call.
 */ function Rr(t, n, i) {
    var e;
    return t ? (e = t.toFirestore(n), i = "toFirestore() in " + i) : e = n, [ e, i ];
}

function Sr(t, n) {
    return Object.prototype.hasOwnProperty.call(t, n);
}

// Export the classes with a private constructor (it will fail if invoked
// at runtime). Note that this still allows instanceof checks.
// We're treating the variables as class names, so disable checking for lower
// case variable names.
var Ar = ge(fr, "Use firebase.firestore() instead."), Cr = ge(lr, "Use firebase.firestore().runTransaction() instead."), Pr = ge(dr, "Use firebase.firestore().batch() instead."), Vr = ge(vr, "Use firebase.firestore().doc() instead."), kr = ge(mr), Nr = ge(pr), Or = ge(br), Fr = ge(gr), Ur = ge(yr, "Use firebase.firestore().collection() instead."), jr = /** @class */ function() {
    function t(n) {
        this.db = n, 
        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
        // whatever reason it's much harder to hit after 12.2 so we only proactively
        // log on 12.2.
        12.2 === t.Yv(util.getUA()) && Bn("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    /**
     * Opens the specified database, creating or upgrading it if necessary.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema
     * version. We currently do not support any way to do versioning outside of IndexedDB's versioning
     * mechanism, as only version-upgrade transactions are allowed to do things like create
     * objectstores.
     */    return t.Xv = function(n, i, e) {
        return Wn(t.th(), "IndexedDB not supported in current environment."), qn("SimpleDb", "Opening database:", n), 
        new si((function(r, u) {
            // TODO(mikelehen): Investigate browser compatibility.
            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
            // suggests IE9 and older WebKit browsers handle upgrade
            // differently. They expect setVersion, as described here:
            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
            var s = window.indexedDB.open(n, i);
            s.onsuccess = function(n) {
                var i = n.target.result;
                r(new t(i));
            }, s.onblocked = function() {
                u(new E(T.FAILED_PRECONDITION, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
            }, s.onerror = function(t) {
                var n = t.target.error;
                "VersionError" === n.name ? u(new E(T.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : u(n);
            }, s.onupgradeneeded = function(t) {
                qn("SimpleDb", 'Database "' + n + '" requires upgrade from version:', t.oldVersion);
                var i = t.target.result;
                e.createOrUpgrade(i, s.transaction, t.oldVersion, su).next((function() {
                    qn("SimpleDb", "Database upgrade to version " + su + " complete");
                }));
            };
        })).wu();
    }, 
    /** Deletes the specified database. */
    t.delete = function(t) {
        return qn("SimpleDb", "Removing database:", t), qr(window.indexedDB.deleteDatabase(t)).wu();
    }, 
    /** Returns true if IndexedDB is available in the current environment. */
    t.th = function() {
        if ("undefined" == typeof window || null == window.indexedDB) return !1;
        if (t.$v()) return !0;
        // In some Node environments, `window` is defined, but `window.navigator` is
        // not. We don't support IndexedDB persistence in Node if the
        // isMockPersistence() check above returns false.
                if (void 0 === window.navigator) return !1;
        // We extensively use indexed array values and compound keys,
        // which IE and Edge do not support. However, they still have indexedDB
        // defined on the window, so we need to check for them here and make sure
        // to return that persistence is not enabled for those browsers.
        // For tracking support of this feature, see here:
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
        // Check the UA string to find out the browser.
                var n = util.getUA(), i = t.Yv(n), e = 0 < i && i < 10, r = t.Zv(n), u = 0 < r && r < 4.5;
        // IE 10
        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
        // IE 11
        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
        // Edge
        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
        // iOS Safari: Disable for users running iOS version < 10.
                return !(n.indexOf("MSIE ") > 0 || n.indexOf("Trident/") > 0 || n.indexOf("Edge/") > 0 || e || u);
    }, 
    /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */
    t.$v = function() {
        var t;
        return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.tw);
    }, 
    /** Helper to get a typed SimpleDbStore from a transaction. */
    t.nw = function(t, n) {
        return t.store(n);
    }, 
    // visible for testing
    /** Parse User Agent to determine iOS version. Returns -1 if not found. */
    t.Yv = function(t) {
        var n = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), i = n ? n[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(i);
    }, 
    // visible for testing
    /** Parse User Agent to determine Android version. Returns -1 if not found. */
    t.Zv = function(t) {
        var n = t.match(/Android ([\d.]+)/i), i = n ? n[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(i);
    }, t.prototype.iw = function(t) {
        this.db.onversionchange = function(n) {
            return t(n);
        };
    }, t.prototype.runTransaction = function(t, n, i) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var e, r, s, o, h;
            return tslib.__generator(this, (function(c) {
                switch (c.label) {
                  case 0:
                    e = "readonly" === t, r = 0, s = function() {
                        var t, s, h, c;
                        return tslib.__generator(this, (function(u) {
                            switch (u.label) {
                              case 0:
                                ++r, t = Lr.open(o.db, e ? "readonly" : "readwrite", n), u.label = 1;

                              case 1:
                                // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                // fire), but still return the original transactionFnResult back to the
                                // caller.
                                return u.trys.push([ 1, 3, , 4 ]), 
                                // As noted above, errors are propagated by aborting the transaction. So
                                // we swallow any error here to avoid the browser logging it as unhandled.
                                (s = i(t).catch((function(n) {
                                    // We cannot actually recover, and calling `abort()` will cause the transaction's
                                    // completion promise to be rejected. This in turn means that we won't use
                                    // `transactionFnResult` below. We return a rejection here so that we don't add the
                                    // possibility of returning `void` to the type of `transactionFnResult`.
                                    // Abort the transaction if there was an error.
                                    return t.abort(n), si.reject(n);
                                })).wu()).catch((function() {})), [ 4 /*yield*/ , t.ew ];

                              case 2:
                                // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                // fire), but still return the original transactionFnResult back to the
                                // caller.
                                return u.sent(), [ 2 /*return*/ , {
                                    value: s
                                } ];

                              case 3:
                                return h = u.sent(), c = "FirebaseError" !== h.name && r < 3, qn("SimpleDb", "Transaction failed with error: %s. Retrying: %s.", h.message, c), 
                                c ? [ 3 /*break*/ , 4 ] : [ 2 /*return*/ , {
                                    value: Promise.reject(h)
                                } ];

                              case 4:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }, o = this, c.label = 1;

                  case 1:
                    return [ 5 /*yield**/ , s() ];

                  case 2:
                    return "object" == typeof (h = c.sent()) ? [ 2 /*return*/ , h.value ] : [ 3 /*break*/ , 1 ];

                  case 3:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.close = function() {
        this.db.close();
    }, t;
}(), xr = /** @class */ function() {
    function t(t) {
        this.rw = t, this.uw = !1, this.sw = null;
    }
    return Object.defineProperty(t.prototype, "fu", {
        get: function() {
            return this.uw;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "ow", {
        get: function() {
            return this.sw;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "cursor", {
        set: function(t) {
            this.rw = t;
        },
        enumerable: !0,
        configurable: !0
    }), 
    /**
     * This function can be called to stop iteration at any point.
     */
    t.prototype.done = function() {
        this.uw = !0;
    }, 
    /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */
    t.prototype.hw = function(t) {
        this.sw = t;
    }, 
    /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */
    t.prototype.delete = function() {
        return qr(this.rw.delete());
    }, t;
}(), Lr = /** @class */ function() {
    function t(t) {
        var n = this;
        this.transaction = t, this.aborted = !1, 
        /**
         * A promise that resolves with the result of the IndexedDb transaction.
         */
        this.cw = new ei, this.transaction.oncomplete = function() {
            n.cw.resolve();
        }, this.transaction.onabort = function() {
            t.error ? n.cw.reject(t.error) : n.cw.resolve();
        }, this.transaction.onerror = function(t) {
            var i = Qr(t.target.error);
            n.cw.reject(i);
        };
    }
    return t.open = function(n, i, e) {
        return new t(n.transaction(e, i));
    }, Object.defineProperty(t.prototype, "ew", {
        get: function() {
            return this.cw.promise;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.abort = function(t) {
        t && this.cw.reject(t), this.aborted || (qn("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
        this.aborted = !0, this.transaction.abort());
    }, 
    /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */
    t.prototype.store = function(t) {
        var n = this.transaction.objectStore(t);
        return Wn(!!n, "Object store not part of transaction: " + t), new Mr(n);
    }, t;
}(), Mr = /** @class */ function() {
    function t(t) {
        this.store = t;
    }
    return t.prototype.put = function(t, n) {
        var i;
        return void 0 !== n ? (qn("SimpleDb", "PUT", this.store.name, t, n), i = this.store.put(n, t)) : (qn("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
        i = this.store.put(t)), qr(i);
    }, 
    /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value The object to write.
     * @return The key of the value to add.
     */
    t.prototype.add = function(t) {
        return qn("SimpleDb", "ADD", this.store.name, t, t), qr(this.store.add(t));
    }, 
    /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @return The object with the specified key or null if no object exists.
     */
    t.prototype.get = function(t) {
        var n = this;
        // We're doing an unsafe cast to ValueType.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return qr(this.store.get(t)).next((function(i) {
            // Normalize nonexistence to null.
            return void 0 === i && (i = null), qn("SimpleDb", "GET", n.store.name, t, i), i;
        }));
    }, t.prototype.delete = function(t) {
        return qn("SimpleDb", "DELETE", this.store.name, t), qr(this.store.delete(t));
    }, 
    /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */
    t.prototype.count = function() {
        return qn("SimpleDb", "COUNT", this.store.name), qr(this.store.count());
    }, t.prototype.aw = function(t, n) {
        var i = this.cursor(this.options(t, n)), e = [];
        return this.fw(i, (function(t, n) {
            e.push(n);
        })).next((function() {
            return e;
        }));
    }, t.prototype.lw = function(t, n) {
        qn("SimpleDb", "DELETE ALL", this.store.name);
        var i = this.options(t, n);
        i.dw = !1;
        var e = this.cursor(i);
        return this.fw(e, (function(t, n, i) {
            // NOTE: Calling delete() on a cursor is documented as more efficient than
            // calling delete() on an object store with a single key
            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),
            // however, this requires us *not* to use a keysOnly cursor
            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We
            // may want to compare the performance of each method.
            return i.delete();
        }));
    }, t.prototype.vw = function(t, n) {
        var i;
        n ? i = t : (i = {}, n = t);
        var e = this.cursor(i);
        return this.fw(e, n);
    }, 
    /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */
    t.prototype.ww = function(t) {
        var n = this.cursor({});
        return new si((function(i, e) {
            n.onerror = function(t) {
                var n = Qr(t.target.error);
                e(n);
            }, n.onsuccess = function(n) {
                var e = n.target.result;
                e ? t(e.primaryKey, e.value).next((function(t) {
                    t ? e.continue() : i();
                })) : i();
            };
        }));
    }, t.prototype.fw = function(t, n) {
        var i = [];
        return new si((function(e, r) {
            t.onerror = function(t) {
                r(t.target.error);
            }, t.onsuccess = function(t) {
                var r = t.target.result;
                if (r) {
                    var u = new xr(r), s = n(r.primaryKey, r.value, u);
                    if (s instanceof si) {
                        var o = s.catch((function(t) {
                            return u.done(), si.reject(t);
                        }));
                        i.push(o);
                    }
                    u.fu ? e() : null === u.ow ? r.continue() : r.continue(u.ow);
                } else e();
            };
        })).next((function() {
            return si.pu(i);
        }));
    }, t.prototype.options = function(t, n) {
        var i = void 0;
        return void 0 !== t && ("string" == typeof t ? i = t : (Wn(void 0 === n, "3rd argument must not be defined if 2nd is a range."), 
        n = t)), {
            index: i,
            range: n
        };
    }, t.prototype.cursor = function(t) {
        var n = "next";
        if (t.reverse && (n = "prev"), t.index) {
            var i = this.store.index(t.index);
            return t.dw ? i.openKeyCursor(t.range, n) : i.openCursor(t.range, n);
        }
        return this.store.openCursor(t.range, n);
    }, t;
}();

/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */
function qr(t) {
    return new si((function(n, i) {
        t.onsuccess = function(t) {
            var i = t.target.result;
            n(i);
        }, t.onerror = function(t) {
            var n = Qr(t.target.error);
            i(n);
        };
    }));
}

// Guard so we only report the error once.
var Br = !1;

function Qr(t) {
    var n = jr.Yv(util.getUA());
    if (n >= 12.2 && n < 13) {
        var i = "An internal error was encountered in the Indexed Database server";
        if (t.message.indexOf(i) >= 0) {
            // Wrap error in a more descriptive one.
            var e = new E("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + i + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
            return Br || (Br = !0, 
            // Throw a global exception outside of this promise chain, for the user to
            // potentially catch.
            setTimeout((function() {
                throw e;
            }), 0)), e;
        }
    }
    return t;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** A mutation queue for a specific user, backed by IndexedDB. */ var Gr = /** @class */ function() {
    function t(
    /**
     * The normalized userId (e.g. null UID => "" userId) used to store /
     * retrieve mutations.
     */
    t, n, i, e) {
        this.userId = t, this.serializer = n, this.Bh = i, this.Cs = e, 
        /**
         * Caches the document keys for pending mutation batches. If the mutation
         * has been removed from IndexedDb, the cached value may continue to
         * be used to retrieve the batch's document keys. To remove a cached value
         * locally, `removeCachedMutationKeys()` should be invoked either directly
         * or through `removeMutationBatches()`.
         *
         * With multi-tab, when the primary client acknowledges or rejects a mutation,
         * this cache is used by secondary clients to invalidate the local
         * view of the documents that were previously affected by the mutation.
         */
        // PORTING NOTE: Multi-tab only.
        this.mw = {};
    }
    /**
     * Creates a new mutation queue for the given user.
     * @param user The user for which to create a mutation queue.
     * @param serializer The serializer to use when persisting to IndexedDb.
     */    return t.pw = function(n, i, e, r) {
        // TODO(mcg): Figure out what constraints there are on userIDs
        // In particular, are there any reserved characters? are empty ids allowed?
        // For the moment store these together in the same mutations table assuming
        // that empty userIDs aren't allowed.
        return Wn("" !== n.uid, "UserID must not be an empty string."), new t(n.t() ? n.uid : "", i, e, r);
    }, t.prototype.oc = function(t) {
        var n = !0, i = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
        return Kr(t).vw({
            index: fu.userMutationsIndex,
            range: i
        }, (function(t, i, e) {
            n = !1, e.done();
        })).next((function() {
            return n;
        }));
    }, t.prototype.Ys = function(t, n, i) {
        return this.bw(t).next((function(n) {
            // We can't store the resumeToken as a ByteString in IndexedDB, so we
            // convert it to a Base64 string for storage.
            return n.lastStreamToken = i.toBase64(), Hr(t).put(n);
        }));
    }, t.prototype.uo = function(t) {
        return this.bw(t).next((function(t) {
            return K.fromBase64String(t.lastStreamToken);
        }));
    }, t.prototype.so = function(t, n) {
        return this.bw(t).next((function(i) {
            // We can't store the resumeToken as a ByteString in IndexedDB, so we
            // convert it to a Base64 string for storage.
            return i.lastStreamToken = n.toBase64(), Hr(t).put(i);
        }));
    }, t.prototype.Ks = function(t, n, i, e) {
        var r = this, u = Jr(t), s = Kr(t);
        // The IndexedDb implementation in Chrome (and Firefox) does not handle
        // compound indices that include auto-generated keys correctly. To ensure
        // that the index entry is added correctly in all browsers, we perform two
        // writes: The first write is used to retrieve the next auto-generated Batch
        // ID, and the second write populates the index and stores the actual
        // mutation batch.
        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
        // We write an empty object to obtain key
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s.add({}).next((function(o) {
            Wn("number" == typeof o, "Auto-generated key is not a number");
            for (var h = new $n(o, n, i, e), c = r.serializer.gw(r.userId, h), a = [], f = new B((function(t, n) {
                return Kn(t.J(), n.J());
            })), l = 0, d = e; l < d.length; l++) {
                var v = d[l], w = lu.key(r.userId, v.key.path, o);
                f = f.add(v.key.path.L()), a.push(s.put(c)), a.push(u.put(w, lu.PLACEHOLDER));
            }
            return f.forEach((function(n) {
                a.push(r.Bh.rc(t, n));
            })), t.Lh((function() {
                r.mw[o] = h.keys();
            })), si.pu(a).next((function() {
                return h;
            }));
        }));
    }, t.prototype.io = function(t, n) {
        var i = this;
        return Kr(t).get(n).next((function(t) {
            return t ? (Wn(t.userId === i.userId, "Unexpected user '" + t.userId + "' for mutation batch " + n), 
            i.serializer.yw(t)) : null;
        }));
    }, t.prototype.Hs = function(t, n) {
        var i = this;
        return this.mw[n] ? si.resolve(this.mw[n]) : this.io(t, n).next((function(t) {
            if (t) {
                var e = t.keys();
                return i.mw[n] = e, e;
            }
            return null;
        }));
    }, t.prototype._o = function(t, n) {
        var i = this, e = n + 1, r = IDBKeyRange.lowerBound([ this.userId, e ]), u = null;
        return Kr(t).vw({
            index: fu.userMutationsIndex,
            range: r
        }, (function(t, n, r) {
            n.userId === i.userId && (Wn(n.batchId >= e, "Should have found mutation after " + e), 
            u = i.serializer.yw(n)), r.done();
        })).next((function() {
            return u;
        }));
    }, t.prototype.ro = function(t) {
        var n = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), i = -1;
        return Kr(t).vw({
            index: fu.userMutationsIndex,
            range: n,
            reverse: !0
        }, (function(t, n, e) {
            i = n.batchId, e.done();
        })).next((function() {
            return i;
        }));
    }, t.prototype.qs = function(t) {
        var n = this, i = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
        return Kr(t).aw(fu.userMutationsIndex, i).next((function(t) {
            return t.map((function(t) {
                return n.serializer.yw(t);
            }));
        }));
    }, t.prototype.Qh = function(t, n) {
        var i = this, e = lu.prefixForPath(this.userId, n.path), r = IDBKeyRange.lowerBound(e), u = [];
        // Scan the document-mutation index starting with a prefix starting with
        // the given documentKey.
                return Jr(t).vw({
            range: r
        }, (function(e, r, s) {
            var o = e[0], h = e[1], c = e[2], a = Fi(h);
            // Only consider rows matching exactly the specific key of
            // interest. Note that because we order by path first, and we
            // order terminators before path separators, we'll encounter all
            // the index rows for documentKey contiguously. In particular, all
            // the rows for documentKey will occur before any rows for
            // documents nested in a subcollection beneath documentKey so we
            // can stop as soon as we hit any such row.
                        if (o === i.userId && n.path.isEqual(a)) 
            // Look up the mutation batch in the store.
            return Kr(t).get(c).next((function(t) {
                if (!t) throw Gn("Dangling document-mutation reference found: " + e + " which points to " + c);
                Wn(t.userId === i.userId, "Unexpected user '" + t.userId + "' for mutation batch " + c), 
                u.push(i.serializer.yw(t));
            }));
            s.done();
        })).next((function() {
            return u;
        }));
    }, t.prototype.zh = function(t, n) {
        var i = this, e = new B(Kn), r = [];
        return n.forEach((function(n) {
            var u = lu.prefixForPath(i.userId, n.path), s = IDBKeyRange.lowerBound(u), o = Jr(t).vw({
                range: s
            }, (function(t, r, u) {
                var s = t[0], o = t[1], h = t[2], c = Fi(o);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                                s === i.userId && n.path.isEqual(c) ? e = e.add(h) : u.done();
            }));
            r.push(o);
        })), si.pu(r).next((function() {
            return i._w(t, e);
        }));
    }, t.prototype.Xh = function(t, n) {
        var i = this;
        Wn(!n.Tn(), "Document queries shouldn't go down this path"), Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        var e = n.path, r = e.length + 1, u = lu.prefixForPath(this.userId, e), s = IDBKeyRange.lowerBound(u), o = new B(Kn);
        return Jr(t).vw({
            range: s
        }, (function(t, n, u) {
            var s = t[0], h = t[1], c = t[2], a = Fi(h);
            s === i.userId && e.G(a) ? 
            // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            a.length === r && (o = o.add(c)) : u.done();
        })).next((function() {
            return i._w(t, o);
        }));
    }, t.prototype._w = function(t, n) {
        var i = this, e = [], r = [];
        // TODO(rockwood): Implement this using iterate.
        return n.forEach((function(n) {
            r.push(Kr(t).get(n).next((function(t) {
                if (null === t) throw Gn("Dangling document-mutation reference found, which points to " + n);
                Wn(t.userId === i.userId, "Unexpected user '" + t.userId + "' for mutation batch " + n), 
                e.push(i.serializer.yw(t));
            })));
        })), si.pu(r).next((function() {
            return e;
        }));
    }, t.prototype.eo = function(t, n) {
        var i = this;
        return zr(t.Iw, this.userId, n).next((function(e) {
            return t.Lh((function() {
                i.Uo(n.batchId);
            })), si.forEach(e, (function(n) {
                return i.Cs.lc(t, n);
            }));
        }));
    }, t.prototype.Uo = function(t) {
        delete this.mw[t];
    }, t.prototype.to = function(t) {
        var n = this;
        return this.oc(t).next((function(i) {
            if (!i) return si.resolve();
            // Verify that there are no entries in the documentMutations index if
            // the queue is empty.
                        var e = IDBKeyRange.lowerBound(lu.prefixForUser(n.userId)), r = [];
            return Jr(t).vw({
                range: e
            }, (function(t, i, e) {
                if (t[0] === n.userId) {
                    var u = Fi(t[1]);
                    r.push(u);
                } else e.done();
            })).next((function() {
                Wn(0 === r.length, "Document leak -- detected dangling mutation references when queue is empty. Dangling keys: " + r.map((function(t) {
                    return t.J();
                })));
            }));
        }));
    }, t.prototype.fs = function(t, n) {
        return Wr(t, this.userId, n);
    }, 
    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
    /** Returns the mutation queue's metadata from IndexedDb. */
    t.prototype.bw = function(t) {
        var n = this;
        return Hr(t).get(this.userId).next((function(t) {
            return t || new au(n.userId, -1, 
            /*lastStreamToken=*/ "");
        }));
    }, t;
}();

/**
 * @return true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */ function Wr(t, n, i) {
    var e = lu.prefixForPath(n, i.path), r = e[1], u = IDBKeyRange.lowerBound(e), s = !1;
    return Jr(t).vw({
        range: u,
        dw: !0
    }, (function(t, i, e) {
        var u = t[0], o = t[1];
        t[2];
        u === n && o === r && (s = !0), e.done();
    })).next((function() {
        return s;
    }));
}

/** Returns true if any mutation queue contains the given document. */
/**
 * Delete a mutation batch and the associated document mutations.
 * @return A PersistencePromise of the document mutations that were removed.
 */
function zr(t, n, i) {
    var e = t.store(fu.store), r = t.store(lu.store), u = [], s = IDBKeyRange.only(i.batchId), o = 0, h = e.vw({
        range: s
    }, (function(t, n, i) {
        return o++, i.delete();
    }));
    u.push(h.next((function() {
        Wn(1 === o, "Dangling document-mutation reference found: Missing batch " + i.batchId);
    })));
    for (var c = [], a = 0, f = i.mutations; a < f.length; a++) {
        var l = f[a], d = lu.key(n, l.key.path, i.batchId);
        u.push(r.delete(d)), c.push(l.key);
    }
    return si.pu(u).next((function() {
        return c;
    }));
}

/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */ function Kr(t) {
    return ku.nw(t, fu.store);
}

/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function Jr(t) {
    return ku.nw(t, lu.store);
}

/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function Hr(t) {
    return ku.nw(t, au.store);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Yr = /** @class */ function() {
    function t(t, n) {
        this.Cs = t, this.serializer = n, 
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
        this.Sc = Mi.Ic();
    }
    return t.prototype.Ro = function(t) {
        var n = this;
        return this.Tw(t).next((function(i) {
            return i.highestTargetId = n.Sc.after(i.highestTargetId), n.Ew(t, i).next((function() {
                return i.highestTargetId;
            }));
        }));
    }, t.prototype.oo = function(t) {
        return this.Tw(t).next((function(t) {
            return k.P(new V(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
        }));
    }, t.prototype.Ac = function(t) {
        return Zr(t.Iw);
    }, t.prototype.wo = function(t, n, i) {
        var e = this;
        return this.Tw(t).next((function(r) {
            return r.highestListenSequenceNumber = n, i && (r.lastRemoteSnapshotVersion = i.O()), 
            n > r.highestListenSequenceNumber && (r.highestListenSequenceNumber = n), e.Ew(t, r);
        }));
    }, t.prototype.So = function(t, n) {
        var i = this;
        return this.Cc(t, n).next((function() {
            return i.Tw(t).next((function(e) {
                return e.targetCount += 1, i.Dw(n, e), i.Ew(t, e);
            }));
        }));
    }, t.prototype.do = function(t, n) {
        return this.Cc(t, n);
    }, t.prototype.Pc = function(t, n) {
        var i = this;
        return this.Vc(t, n.targetId).next((function() {
            return Xr(t).delete(n.targetId);
        })).next((function() {
            return i.Tw(t);
        })).next((function(n) {
            return Wn(n.targetCount > 0, "Removing from an empty target cache"), n.targetCount -= 1, 
            i.Ew(t, n);
        }));
    }, 
    /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */
    t.prototype.Ju = function(t, n, i) {
        var e = this, r = 0, u = [];
        return Xr(t).vw((function(s, o) {
            var h = e.serializer.Rw(o);
            h.sequenceNumber <= n && null === i.get(h.targetId) && (r++, u.push(e.Pc(t, h)));
        })).next((function() {
            return si.pu(u);
        })).next((function() {
            return r;
        }));
    }, 
    /**
     * Call provided function with each `TargetData` that we have cached.
     */
    t.prototype.$i = function(t, n) {
        var i = this;
        return Xr(t).vw((function(t, e) {
            var r = i.serializer.Rw(e);
            n(r);
        }));
    }, t.prototype.Tw = function(t) {
        return $r(t.Iw);
    }, t.prototype.Ew = function(t, n) {
        return (i = t, ku.nw(i, gu.store)).put(gu.key, n);
        /**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */
        var i;
    }, t.prototype.Cc = function(t, n) {
        return Xr(t).put(this.serializer.Sw(n));
    }, 
    /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */
    t.prototype.Dw = function(t, n) {
        var i = !1;
        return t.targetId > n.highestTargetId && (n.highestTargetId = t.targetId, i = !0), 
        t.sequenceNumber > n.highestListenSequenceNumber && (n.highestListenSequenceNumber = t.sequenceNumber, 
        i = !0), i;
    }, t.prototype.kc = function(t) {
        return this.Tw(t).next((function(t) {
            return t.targetCount;
        }));
    }, t.prototype.Do = function(t, n) {
        var i = this, e = n.canonicalId(), r = IDBKeyRange.bound([ e, Number.NEGATIVE_INFINITY ], [ e, Number.POSITIVE_INFINITY ]), u = null;
        // Iterating by the canonicalId may yield more than one result because
        // canonicalId values are not required to be unique per target. This query
        // depends on the queryTargets index to be efficient.
                return Xr(t).vw({
            range: r,
            index: pu.queryTargetsIndexName
        }, (function(t, e, r) {
            var s = i.serializer.Rw(e);
            // After finding a potential match, check that the target is
            // actually equal to the requested target.
                        n.isEqual(s.target) && (u = s, r.done());
        })).next((function() {
            return u;
        }));
    }, t.prototype.ao = function(t, n, i) {
        var e = this, r = [], u = tu(t);
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
                return n.forEach((function(n) {
            var s = ki(n.path);
            r.push(u.put(new bu(i, s))), r.push(e.Cs.es(t, n));
        })), si.pu(r);
    }, t.prototype.co = function(t, n, i) {
        var e = this, r = tu(t);
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
                return si.forEach(n, (function(n) {
            var u = ki(n.path);
            return si.pu([ r.delete([ i, u ]), e.Cs.us(t, n) ]);
        }));
    }, t.prototype.Vc = function(t, n) {
        var i = tu(t), e = IDBKeyRange.bound([ n ], [ n + 1 ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0);
        return i.delete(e);
    }, t.prototype.Po = function(t, n) {
        var i = IDBKeyRange.bound([ n ], [ n + 1 ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0), e = tu(t), r = wn();
        return e.vw({
            range: i,
            dw: !0
        }, (function(t, n, i) {
            var e = Fi(t[1]), u = new j(e);
            r = r.add(u);
        })).next((function() {
            return r;
        }));
    }, t.prototype.fs = function(t, n) {
        var i = ki(n.path), e = IDBKeyRange.bound([ i ], [ Hn(i) ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0), r = 0;
        return tu(t).vw({
            index: bu.documentTargetsIndex,
            dw: !0,
            range: e
        }, (function(t, n, i) {
            var e = t[0];
            // Having a sentinel row for a document does not count as containing that document;
            // For the target cache, containing the document means the document is part of some
            // target.
                        t[1];
            0 !== e && (r++, i.done());
        })).next((function() {
            return r > 0;
        }));
    }, t.prototype.ce = function(t, n) {
        var i = this;
        return Xr(t).get(n).next((function(t) {
            return t ? i.serializer.Rw(t) : null;
        }));
    }, t;
}();

/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */ function Xr(t) {
    return ku.nw(t, pu.store);
}

function $r(t) {
    return jr.nw(t, gu.store).get(gu.key).next((function(t) {
        return Wn(null !== t, "Missing metadata row."), t;
    }));
}

function Zr(t) {
    return $r(t).next((function(t) {
        return t.highestListenSequenceNumber;
    }));
}

/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */ function tu(t) {
    return ku.nw(t, bu.store);
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var nu = /** @class */ function() {
    /**
     * @param {LocalSerializer} serializer The document serializer.
     * @param {IndexManager} indexManager The query indexes that need to be maintained.
     */
    function t(t, n) {
        this.serializer = t, this.Bh = n;
    }
    /**
     * Adds the supplied entries to the cache.
     *
     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */    return t.prototype.ms = function(t, n, i) {
        return eu(t).put(ru(n), i);
    }, 
    /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */
    t.prototype.bs = function(t, n) {
        var i = eu(t), e = ru(n);
        return i.delete(e);
    }, 
    /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */
    t.prototype.updateMetadata = function(t, n) {
        var i = this;
        return this.getMetadata(t).next((function(e) {
            return e.byteSize += n, i.Aw(t, e);
        }));
    }, t.prototype.gs = function(t, n) {
        var i = this;
        return eu(t).get(ru(n)).next((function(t) {
            return i.Cw(t);
        }));
    }, 
    /**
     * Looks up an entry in the cache.
     *
     * @param documentKey The key of the entry to look up.
     * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
     */
    t.prototype.Pw = function(t, n) {
        var i = this;
        return eu(t).get(ru(n)).next((function(t) {
            var n = i.Cw(t);
            return n ? {
                vc: n,
                size: uu(t)
            } : null;
        }));
    }, t.prototype.getEntries = function(t, n) {
        var i = this, e = cn();
        return this.Vw(t, n, (function(t, n) {
            var r = i.Cw(n);
            e = e.ut(t, r);
        })).next((function() {
            return e;
        }));
    }, 
    /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys The set of keys entries to look up.
     * @return A map of MaybeDocuments indexed by key (if a document cannot be
     *     found, the key will be mapped to null) and a map of sizes indexed by
     *     key (zero if the key cannot be found).
     */
    t.prototype.kw = function(t, n) {
        var i = this, e = cn(), r = new x(j.F);
        return this.Vw(t, n, (function(t, n) {
            var u = i.Cw(n);
            u ? (e = e.ut(t, u), r = r.ut(t, uu(n))) : (e = e.ut(t, null), r = r.ut(t, 0));
        })).next((function() {
            return {
                Nw: e,
                Ow: r
            };
        }));
    }, t.prototype.Vw = function(t, n, i) {
        if (n.M()) return si.resolve();
        var e = IDBKeyRange.bound(n.first().path.K(), n.last().path.K()), r = n.ft(), u = r.bt();
        return eu(t).vw({
            range: e
        }, (function(t, n, e) {
            // Go through keys not found in cache.
            for (var s = j.rt(t); u && j.F(u, s) < 0; ) i(u, null), u = r.bt();
            u && u.isEqual(s) && (
            // Key found in cache.
            i(u, n), u = r.gt() ? r.bt() : null), 
            // Skip to the next key (if there is one).
            u ? e.hw(u.path.K()) : e.done();
        })).next((function() {
            // The rest of the keys are not in the cache. One case where `iterate`
            // above won't go through them is when the cache is empty.
            for (;u; ) i(u, null), u = r.gt() ? r.bt() : null;
        }));
    }, t.prototype.Vo = function(t, n, i) {
        var e = this;
        Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
        var r = fn(), u = n.path.length + 1, s = {};
        if (i.isEqual(k.MIN)) {
            // Documents are ordered by key, so we can use a prefix scan to narrow
            // down the documents we need to match the query against.
            var o = n.path.K();
            s.range = IDBKeyRange.lowerBound(o);
        } else {
            // Execute an index-free query and filter by read time. This is safe
            // since all document changes to queries that have a
            // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
            var h = n.path.K(), c = this.serializer.Fw(i);
            s.range = IDBKeyRange.lowerBound([ h, c ], 
            /* open= */ !0), s.index = wu.collectionReadTimeIndex;
        }
        return eu(t).vw(s, (function(t, i, s) {
            // The query is actually returning any path that starts with the query
            // path prefix which may include documents in subcollections. For
            // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
            // shouldn't match it. Fix this by discarding rows with document keys
            // more than one segment longer than the query path.
            if (t.length === u) {
                var o = e.serializer.Uw(i);
                n.path.G(o.key.path) ? o instanceof xt && n.matches(o) && (r = r.ut(o.key, o)) : s.done();
            }
        })).next((function() {
            return r;
        }));
    }, t.prototype.Lo = function(t, n) {
        var i = this, e = hn(), r = this.serializer.Fw(n), u = eu(t), s = IDBKeyRange.lowerBound(r, !0);
        return u.vw({
            index: wu.readTimeIndex,
            range: s
        }, (function(t, n) {
            // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
            // the documents directly since we want to keep sentinel deletes.
            var u = i.serializer.Uw(n);
            e = e.ut(u.key, u), r = n.readTime;
        })).next((function() {
            return {
                Mo: e,
                readTime: i.serializer.jw(r)
            };
        }));
    }, t.prototype.qo = function(t) {
        var n = this, i = eu(t), e = k.MIN;
        return i.vw({
            index: wu.readTimeIndex,
            reverse: !0
        }, (function(t, i, r) {
            i.readTime && (e = n.serializer.jw(i.readTime)), r.done();
        })).next((function() {
            return e;
        }));
    }, t.prototype.Xs = function(n) {
        return new t.mc(this, !!n && n.$s);
    }, t.prototype.pc = function(t) {
        return this.getMetadata(t).next((function(t) {
            return t.byteSize;
        }));
    }, t.prototype.getMetadata = function(t) {
        return iu(t).get(mu.key).next((function(t) {
            return Wn(!!t, "Missing document cache metadata"), t;
        }));
    }, t.prototype.Aw = function(t, n) {
        return iu(t).put(mu.key, n);
    }, 
    /**
     * Decodes `remoteDoc` and returns the document (or null, if the document
     * corresponds to the format used for sentinel deletes).
     */
    t.prototype.Cw = function(t) {
        if (t) {
            var n = this.serializer.Uw(t);
            return n instanceof Lt && n.version.isEqual(k.V()) ? null : n;
        }
        return null;
    }, 
    /**
     * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
     *
     * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
     * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
     * when we apply the changes.
     */
    t.mc = /** @class */ function(t) {
        /**
         * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        function i(n, i) {
            var e = t.call(this) || this;
            return e.bc = n, e.$s = i, 
            // A map of document sizes prior to applying the changes in this buffer.
            e.xw = new ti((function(t) {
                return t.toString();
            })), e;
        }
        return tslib.__extends(i, t), i.prototype.Is = function(t) {
            var n = this, i = [], e = 0, r = new B((function(t, n) {
                return Kn(t.J(), n.J());
            }));
            return this.ds.forEach((function(u, s) {
                var o = n.xw.get(u);
                if (Wn(void 0 !== o, "Cannot modify a document that wasn't read (for " + u + ")"), 
                s) {
                    Wn(!n.readTime.isEqual(k.MIN), "Cannot add a document with a read time of zero");
                    var h = n.bc.serializer.Lw(s, n.readTime);
                    r = r.add(u.path.L());
                    var c = uu(h);
                    e += c - o, i.push(n.bc.ms(t, u, h));
                } else if (e -= o, n.$s) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    var a = n.bc.serializer.Lw(new Lt(u, k.V()), n.readTime);
                    i.push(n.bc.ms(t, u, a));
                } else i.push(n.bc.bs(t, u));
            })), r.forEach((function(e) {
                i.push(n.bc.Bh.rc(t, e));
            })), i.push(this.bc.updateMetadata(t, e)), si.pu(i);
        }, i.prototype.ys = function(t, n) {
            var i = this;
            // Record the size of everything we load from the cache so we can compute a delta later.
                        return this.bc.Pw(t, n).next((function(t) {
                return null === t ? (i.xw.set(n, 0), null) : (i.xw.set(n, t.size), t.vc);
            }));
        }, i.prototype._s = function(t, n) {
            var i = this;
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
                        return this.bc.kw(t, n).next((function(t) {
                var n = t.Nw;
                // Note: `getAllFromCache` returns two maps instead of a single map from
                // keys to `DocumentSizeEntry`s. This is to allow returning the
                // `NullableMaybeDocumentMap` directly, without a conversion.
                                return t.Ow.forEach((function(t, n) {
                    i.xw.set(t, n);
                })), n;
            }));
        }, i;
    }(wi), t;
}();

function iu(t) {
    return ku.nw(t, mu.store);
}

/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */ function eu(t) {
    return ku.nw(t, wu.store);
}

function ru(t) {
    return t.path.K();
}

/**
 * Retrusn an approximate size for the given document.
 */ function uu(t) {
    var n;
    if (t.document) n = t.document; else if (t.unknownDocument) n = t.unknownDocument; else {
        if (!t.noDocument) throw Gn("Unknown remote document type");
        n = t.noDocument;
    }
    return JSON.stringify(n).length;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Schema Version for the Web client:
 * 1.  Initial version including Mutation Queue, Query Cache, and Remote
 *     Document Cache
 * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
 *     longer required because migration 3 unconditionally clears it.
 * 3.  Dropped and re-created Query Cache to deal with cache corruption related
 *     to limbo resolution. Addresses
 *     https://github.com/firebase/firebase-ios-sdk/issues/1548
 * 4.  Multi-Tab Support.
 * 5.  Removal of held write acks.
 * 6.  Create document global for tracking document cache size.
 * 7.  Ensure every cached document has a sentinel row with a sequence number.
 * 8.  Add collection-parent index for Collection Group queries.
 * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
 *     an auto-incrementing ID. This is required for Index-Free queries.
 * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
 */ var su = 10, ou = /** @class */ function() {
    function t(t) {
        this.serializer = t;
    }
    /**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */    return t.prototype.createOrUpgrade = function(t, n, i, e) {
        var r = this;
        Wn(i < e && i >= 0 && e <= su, "Unexpected schema upgrade from v" + i + " to v" + e + ".");
        var u = new Lr(n);
        i < 1 && e >= 1 && (function(t) {
            t.createObjectStore(cu.store);
        }
        /**
 * An object to be stored in the 'mutationQueues' store in IndexedDb.
 *
 * Each user gets a single queue of MutationBatches to apply to the server.
 * DbMutationQueue tracks the metadata about the queue.
 */ (t), function(t) {
            t.createObjectStore(au.store, {
                keyPath: au.keyPath
            }), t.createObjectStore(fu.store, {
                keyPath: fu.keyPath,
                autoIncrement: !0
            }).createIndex(fu.userMutationsIndex, fu.userMutationsKeyPath, {
                unique: !0
            }), t.createObjectStore(lu.store);
        }
        /**
 * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
 * and rewrites all data.
 */ (t), _u(t), function(t) {
            t.createObjectStore(wu.store);
        }
        /**
 * Represents the known absence of a document at a particular version.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */ (t));
        // Migration 2 to populate the targetGlobal object no longer needed since
        // migration 3 unconditionally clears it.
                var s = si.resolve();
        return i < 3 && e >= 3 && (
        // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        0 !== i && (!function(t) {
            t.deleteObjectStore(bu.store), t.deleteObjectStore(pu.store), t.deleteObjectStore(gu.store);
        }(t), _u(t)), s = s.next((function() {
            /**
 * Creates the target global singleton row.
 *
 * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
 */ return function(t) {
                var n = t.store(gu.store), i = new gu(
                /*highestTargetId=*/ 0, 
                /*lastListenSequenceNumber=*/ 0, k.MIN.O(), 
                /*targetCount=*/ 0);
                return n.put(gu.key, i);
            }
            /**
 * Creates indices on the RemoteDocuments store used for both multi-tab
 * and Index-Free queries.
 */ (u);
        }))), i < 4 && e >= 4 && (0 !== i && (
        // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        s = s.next((function() {
            return function(t, n) {
                return n.store(fu.store).aw().next((function(i) {
                    t.deleteObjectStore(fu.store), t.createObjectStore(fu.store, {
                        keyPath: fu.keyPath,
                        autoIncrement: !0
                    }).createIndex(fu.userMutationsIndex, fu.userMutationsKeyPath, {
                        unique: !0
                    });
                    var e = n.store(fu.store), r = i.map((function(t) {
                        return e.put(t);
                    }));
                    return si.pu(r);
                }));
            }
            /**
 * An object to be stored in the 'documentMutations' store in IndexedDb.
 *
 * A manually maintained index of all the mutation batches that affect a given
 * document key. The rows in this table are references based on the contents of
 * DbMutationBatch.mutations.
 */ (t, u);
        }))), s = s.next((function() {
            !function(t) {
                t.createObjectStore(Iu.store, {
                    keyPath: Iu.keyPath
                });
            }
            // Visible for testing
            (t);
        }))), i < 5 && e >= 5 && (s = s.next((function() {
            return r.removeAcknowledgedMutations(u);
        }))), i < 6 && e >= 6 && (s = s.next((function() {
            return function(t) {
                t.createObjectStore(mu.store);
            }
            /**
 * An object to be stored in the 'targets' store in IndexedDb.
 *
 * This is based on and should be kept in sync with the proto used in the iOS
 * client.
 *
 * Each query the client listens to against the server is tracked on disk so
 * that the query can be efficiently resumed on restart.
 */ (t), r.addDocumentGlobal(u);
        }))), i < 7 && e >= 7 && (s = s.next((function() {
            return r.ensureSequenceNumbers(u);
        }))), i < 8 && e >= 8 && (s = s.next((function() {
            return r.createCollectionParentIndex(t, u);
        }))), i < 9 && e >= 9 && (s = s.next((function() {
            // Multi-Tab used to manage its own changelog, but this has been moved
            // to the DbRemoteDocument object store itself. Since the previous change
            // log only contained transient data, we can drop its object store.
            !function(t) {
                t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
            }(t), function(t) {
                var n = t.objectStore(wu.store);
                n.createIndex(wu.readTimeIndex, wu.readTimeIndexPath, {
                    unique: !1
                }), n.createIndex(wu.collectionReadTimeIndex, wu.collectionReadTimeIndexPath, {
                    unique: !1
                });
            }
            /**
 * A record of the metadata state of each client.
 *
 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
 * to be ported to iOS or Android.
 */ (n);
        }))), i < 10 && e >= 10 && (s = s.next((function() {
            return r.rewriteCanonicalIds(u);
        }))), s;
    }, t.prototype.addDocumentGlobal = function(t) {
        var n = 0;
        return t.store(wu.store).vw((function(t, i) {
            n += uu(i);
        })).next((function() {
            var i = new mu(n);
            return t.store(mu.store).put(mu.key, i);
        }));
    }, t.prototype.removeAcknowledgedMutations = function(t) {
        var n = this, i = t.store(au.store), e = t.store(fu.store);
        return i.aw().next((function(i) {
            return si.forEach(i, (function(i) {
                var r = IDBKeyRange.bound([ i.userId, -1 ], [ i.userId, i.lastAcknowledgedBatchId ]);
                return e.aw(fu.userMutationsIndex, r).next((function(e) {
                    return si.forEach(e, (function(e) {
                        Wn(e.userId === i.userId, "Cannot process batch " + e.batchId + " from unexpected user");
                        var r = n.serializer.yw(e);
                        return zr(t, i.userId, r).next((function() {}));
                    }));
                }));
            }));
        }));
    }, 
    /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */
    t.prototype.ensureSequenceNumbers = function(t) {
        var n = t.store(bu.store), i = t.store(wu.store);
        return Zr(t).next((function(t) {
            var e = [];
            return i.vw((function(i, r) {
                var u = new O(i), s = function(t) {
                    return [ 0, ki(t) ];
                }
                /**
 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
 */ (u);
                e.push(n.get(s).next((function(i) {
                    return i ? si.resolve() : function(i) {
                        return n.put(new bu(0, ki(i), t));
                    }(u);
                })));
            })).next((function() {
                return si.pu(e);
            }));
        }));
    }, t.prototype.createCollectionParentIndex = function(t, n) {
        // Create the index.
        t.createObjectStore(yu.store, {
            keyPath: yu.keyPath
        });
        var i = n.store(yu.store), e = new ji, r = function(t) {
            if (e.add(t)) {
                var n = t.B(), r = t.L();
                return i.put({
                    collectionId: n,
                    parent: ki(r)
                });
            }
        };
        // Helper to add an index entry iff we haven't already written it.
                // Index existing remote documents.
        return n.store(wu.store).vw({
            dw: !0
        }, (function(t, n) {
            var i = new O(t);
            return r(i.L());
        })).next((function() {
            // Index existing mutations.
            return n.store(lu.store).vw({
                dw: !0
            }, (function(t, n) {
                t[0];
                var i = t[1], e = (t[2], Fi(i));
                return r(e.L());
            }));
        }));
    }, t.prototype.rewriteCanonicalIds = function(t) {
        var n = this, i = t.store(pu.store);
        return i.vw((function(t, e) {
            var r = n.serializer.Rw(e), u = n.serializer.Sw(r);
            return i.put(u);
        }));
    }, t;
}();

/** Performs database creation and schema upgrades. */ var hu = function(t, n) {
    this.seconds = t, this.nanoseconds = n;
}, cu = /** @class */ function() {
    function t(t, 
    /** Whether to allow shared access from multiple tabs. */
    n, i) {
        this.ownerId = t, this.allowTabSynchronization = n, this.leaseTimestampMs = i;
    }
    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */    return t.store = "owner", 
    /**
     * The key string used for the single object that exists in the
     * DbPrimaryClient store.
     */
    t.key = "owner", t;
}();

/**
 * A singleton object to be stored in the 'owner' store in IndexedDb.
 *
 * A given database can have a single primary tab assigned at a given time. That
 * tab must validate that it is still holding the primary lease before every
 * operation that requires locked access. The primary tab should regularly
 * write an updated timestamp to this lease to prevent other tabs from
 * "stealing" the primary lease
 */ var au = /** @class */ function() {
    function t(
    /**
     * The normalized user ID to which this queue belongs.
     */
    t, 
    /**
     * An identifier for the highest numbered batch that has been acknowledged
     * by the server. All MutationBatches in this queue with batchIds less
     * than or equal to this value are considered to have been acknowledged by
     * the server.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */
    n, 
    /**
     * A stream token that was previously sent by the server.
     *
     * See StreamingWriteRequest in datastore.proto for more details about
     * usage.
     *
     * After sending this token, earlier tokens may not be used anymore so
     * only a single stream token is retained.
     */
    i) {
        this.userId = t, this.lastAcknowledgedBatchId = n, this.lastStreamToken = i;
    }
    /** Name of the IndexedDb object store.  */    return t.store = "mutationQueues", 
    /** Keys are automatically assigned via the userId property. */
    t.keyPath = "userId", t;
}(), fu = /** @class */ function() {
    function t(
    /**
     * The normalized user ID to which this batch belongs.
     */
    t, 
    /**
     * An identifier for this batch, allocated using an auto-generated key.
     */
    n, 
    /**
     * The local write time of the batch, stored as milliseconds since the
     * epoch.
     */
    i, 
    /**
     * A list of "mutations" that represent a partial base state from when this
     * write batch was initially created. During local application of the write
     * batch, these baseMutations are applied prior to the real writes in order
     * to override certain document fields from the remote document cache. This
     * is necessary in the case of non-idempotent writes (e.g. `increment()`
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     *
     * These mutations are never sent to the backend.
     */
    e, 
    /**
     * A list of mutations to apply. All mutations will be applied atomically.
     *
     * Mutations are serialized via JsonProtoSerializer.toMutation().
     */
    r) {
        this.userId = t, this.batchId = n, this.localWriteTimeMs = i, this.baseMutations = e, 
        this.mutations = r;
    }
    /** Name of the IndexedDb object store.  */    return t.store = "mutations", 
    /** Keys are automatically assigned via the userId, batchId properties. */
    t.keyPath = "batchId", 
    /** The index name for lookup of mutations by user. */
    t.userMutationsIndex = "userMutationsIndex", 
    /** The user mutations index is keyed by [userId, batchId] pairs. */
    t.userMutationsKeyPath = [ "userId", "batchId" ], t;
}();

/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */ var lu = /** @class */ function() {
    function t() {}
    /**
     * Creates a [userId] key for use in the DbDocumentMutations index to iterate
     * over all of a user's document mutations.
     */    return t.prefixForUser = function(t) {
        return [ t ];
    }, 
    /**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */
    t.prefixForPath = function(t, n) {
        return [ t, ki(n) ];
    }, 
    /**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */
    t.key = function(t, n, i) {
        return [ t, ki(n), i ];
    }, t.store = "documentMutations", 
    /**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */
    t.PLACEHOLDER = new t, t;
}();

var du = function(t, n) {
    this.path = t, this.readTime = n;
}, vu = function(t, n) {
    this.path = t, this.version = n;
}, wu = /** @class */ function() {
    // TODO: We are currently storing full document keys almost three times
    // (once as part of the primary key, once - partly - as `parentPath` and once
    // inside the encoded documents). During our next migration, we should
    // rewrite the primary key as parentPath + document ID which would allow us
    // to drop one value.
    function t(
    /**
     * Set to an instance of DbUnknownDocument if the data for a document is
     * not known, but it is known that a document exists at the specified
     * version (e.g. it had a successful update applied to it)
     */
    t, 
    /**
     * Set to an instance of a DbNoDocument if it is known that no document
     * exists.
     */
    n, 
    /**
     * Set to an instance of a Document if there's a cached version of the
     * document.
     */
    i, 
    /**
     * Documents that were written to the remote document store based on
     * a write acknowledgment are marked with `hasCommittedMutations`. These
     * documents are potentially inconsistent with the backend's copy and use
     * the write's commit version as their document version.
     */
    e, 
    /**
     * When the document was read from the backend. Undefined for data written
     * prior to schema version 9.
     */
    r, 
    /**
     * The path of the collection this document is part of. Undefined for data
     * written prior to schema version 9.
     */
    u) {
        this.unknownDocument = t, this.noDocument = n, this.document = i, this.hasCommittedMutations = e, 
        this.readTime = r, this.parentPath = u;
    }
    return t.store = "remoteDocuments", 
    /**
     * An index that provides access to all entries sorted by read time (which
     * corresponds to the last modification time of each row).
     *
     * This index is used to provide a changelog for Multi-Tab.
     */
    t.readTimeIndex = "readTimeIndex", t.readTimeIndexPath = "readTime", 
    /**
     * An index that provides access to documents in a collection sorted by read
     * time.
     *
     * This index is used to allow the RemoteDocumentCache to fetch newly changed
     * documents in a collection.
     */
    t.collectionReadTimeIndex = "collectionReadTimeIndex", t.collectionReadTimeIndexPath = [ "parentPath", "readTime" ], 
    t;
}(), mu = /** @class */ function() {
    /**
     * @param byteSize Approximately the total size in bytes of all the documents in the document
     * cache.
     */
    function t(t) {
        this.byteSize = t;
    }
    return t.store = "remoteDocumentGlobal", t.key = "remoteDocumentGlobalKey", t;
}();

/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */ var pu = /** @class */ function() {
    function t(
    /**
     * An auto-generated sequential numeric identifier for the query.
     *
     * Queries are stored using their canonicalId as the key, but these
     * canonicalIds can be quite long so we additionally assign a unique
     * queryId which can be used by referenced data structures (e.g.
     * indexes) to minimize the on-disk cost.
     */
    t, 
    /**
     * The canonical string representing this query. This is not unique.
     */
    n, 
    /**
     * The last readTime received from the Watch Service for this query.
     *
     * This is the same value as TargetChange.read_time in the protos.
     */
    i, 
    /**
     * An opaque, server-assigned token that allows watching a query to be
     * resumed after disconnecting without retransmitting all the data
     * that matches the query. The resume token essentially identifies a
     * point in time from which the server should resume sending results.
     *
     * This is related to the snapshotVersion in that the resumeToken
     * effectively also encodes that value, but the resumeToken is opaque
     * and sometimes encodes additional information.
     *
     * A consequence of this is that the resumeToken should be used when
     * asking the server to reason about where this client is in the watch
     * stream, but the client should use the snapshotVersion for its own
     * purposes.
     *
     * This is the same value as TargetChange.resume_token in the protos.
     */
    e, 
    /**
     * A sequence number representing the last time this query was
     * listened to, used for garbage collection purposes.
     *
     * Conventionally this would be a timestamp value, but device-local
     * clocks are unreliable and they must be able to create new listens
     * even while disconnected. Instead this should be a monotonically
     * increasing number that's incremented on each listen call.
     *
     * This is different from the queryId since the queryId is an
     * immutable identifier assigned to the Query on first use while
     * lastListenSequenceNumber is updated every time the query is
     * listened to.
     */
    r, 
    /**
     * Denotes the maximum snapshot version at which the associated query view
     * contained no limbo documents.  Undefined for data written prior to
     * schema version 9.
     */
    u, 
    /**
     * The query for this target.
     *
     * Because canonical ids are not unique we must store the actual query. We
     * use the proto to have an object we can persist without having to
     * duplicate translation logic to and from a `Query` object.
     */
    s) {
        this.targetId = t, this.canonicalId = n, this.readTime = i, this.resumeToken = e, 
        this.lastListenSequenceNumber = r, this.lastLimboFreeSnapshotVersion = u, this.query = s;
    }
    return t.store = "targets", 
    /** Keys are automatically assigned via the targetId property. */
    t.keyPath = "targetId", 
    /** The name of the queryTargets index. */
    t.queryTargetsIndexName = "queryTargetsIndex", 
    /**
     * The index of all canonicalIds to the targets that they match. This is not
     * a unique mapping because canonicalId does not promise a unique name for all
     * possible queries, so we append the targetId to make the mapping unique.
     */
    t.queryTargetsKeyPath = [ "canonicalId", "targetId" ], t;
}(), bu = /** @class */ function() {
    function t(
    /**
     * The targetId identifying a target or 0 for a sentinel row.
     */
    t, 
    /**
     * The path to the document, as encoded in the key.
     */
    n, 
    /**
     * If this is a sentinel row, this should be the sequence number of the last
     * time the document specified by `path` was used. Otherwise, it should be
     * `undefined`.
     */
    i) {
        this.targetId = t, this.path = n, this.sequenceNumber = i, Wn(0 === t == (void 0 !== i), "A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number");
    }
    /** Name of the IndexedDb object store.  */    return t.store = "targetDocuments", 
    /** Keys are automatically assigned via the targetId, path properties. */
    t.keyPath = [ "targetId", "path" ], 
    /** The index name for the reverse index. */
    t.documentTargetsIndex = "documentTargetsIndex", 
    /** We also need to create the reverse index for these properties. */
    t.documentTargetsKeyPath = [ "path", "targetId" ], t;
}(), gu = /** @class */ function() {
    function t(
    /**
     * The highest numbered target id across all targets.
     *
     * See DbTarget.targetId.
     */
    t, 
    /**
     * The highest numbered lastListenSequenceNumber across all targets.
     *
     * See DbTarget.lastListenSequenceNumber.
     */
    n, 
    /**
     * A global snapshot version representing the last consistent snapshot we
     * received from the backend. This is monotonically increasing and any
     * snapshots received from the backend prior to this version (e.g. for
     * targets resumed with a resumeToken) should be suppressed (buffered)
     * until the backend has caught up to this snapshot version again. This
     * prevents our cache from ever going backwards in time.
     */
    i, 
    /**
     * The number of targets persisted.
     */
    e) {
        this.highestTargetId = t, this.highestListenSequenceNumber = n, this.lastRemoteSnapshotVersion = i, 
        this.targetCount = e;
    }
    /**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */    return t.key = "targetGlobalKey", t.store = "targetGlobal", t;
}(), yu = /** @class */ function() {
    function t(
    /**
     * The collectionId (e.g. 'messages')
     */
    t, 
    /**
     * The path to the parent (either a document location or an empty path for
     * a root-level collection).
     */
    n) {
        this.collectionId = t, this.parent = n;
    }
    /** Name of the IndexedDb object store. */    return t.store = "collectionParents", 
    /** Keys are automatically assigned via the collectionId, parent properties. */
    t.keyPath = [ "collectionId", "parent" ], t;
}();

/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */ function _u(t) {
    t.createObjectStore(bu.store, {
        keyPath: bu.keyPath
    }).createIndex(bu.documentTargetsIndex, bu.documentTargetsKeyPath, {
        unique: !0
    }), 
    // NOTE: This is unique only because the TargetId is the suffix.
    t.createObjectStore(pu.store, {
        keyPath: pu.keyPath
    }).createIndex(pu.queryTargetsIndexName, pu.queryTargetsKeyPath, {
        unique: !0
    }), t.createObjectStore(gu.store);
}

var Iu = /** @class */ function() {
    function t(
    // Note: Previous schema versions included a field
    // "lastProcessedDocumentChangeId". Don't use anymore.
    /** The auto-generated client id assigned at client startup. */
    t, 
    /** The last time this state was updated. */
    n, 
    /** Whether the client's network connection is enabled. */
    i, 
    /** Whether this client is running in a foreground tab. */
    e) {
        this.clientId = t, this.updateTimeMs = n, this.networkEnabled = i, this.inForeground = e;
    }
    /** Name of the IndexedDb object store. */    return t.store = "clientMetadata", 
    /** Keys are automatically assigned via the clientId properties. */
    t.keyPath = "clientId", t;
}();

var Tu = [ au.store, fu.store, lu.store, wu.store, pu.store, cu.store, gu.store, bu.store ], Eu = tslib.__spreadArrays(Tu, [ Iu.store ]), Du = tslib.__spreadArrays(Eu, [ mu.store ]), Ru = tslib.__spreadArrays(Du, [ yu.store ]), Su = /** @class */ function() {
    function t() {
        /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be used to
         * satisfy reads.
         */
        this.Mw = new ji;
    }
    /**
     * Adds a new entry to the collection parent index.
     *
     * Repeated calls for the same collectionPath should be avoided within a
     * transaction as IndexedDbIndexManager only caches writes once a transaction
     * has been committed.
     */    return t.prototype.rc = function(t, n) {
        var i = this;
        if (Wn(n.length % 2 == 1, "Expected a collection path."), !this.Mw.has(n)) {
            var e = n.B(), r = n.L();
            t.Lh((function() {
                // Add the collection to the in memory cache only if the transaction was
                // successfully committed.
                i.Mw.add(n);
            }));
            var u = {
                collectionId: e,
                parent: ki(r)
            };
            return Au(t).put(u);
        }
        return si.resolve();
    }, t.prototype.Yh = function(t, n) {
        var i = [], e = IDBKeyRange.bound([ n, "" ], [ Hn(n), "" ], 
        /*lowerOpen=*/ !1, 
        /*upperOpen=*/ !0);
        return Au(t).aw(e).next((function(t) {
            for (var e = 0, r = t; e < r.length; e++) {
                var u = r[e];
                // This collectionId guard shouldn't be necessary (and isn't as long
                // as we're running in a real browser), but there's a bug in
                // indexeddbshim that breaks our range in our tests running in node:
                // https://github.com/axemclion/IndexedDBShim/issues/334
                                if (u.collectionId !== n) break;
                i.push(Fi(u.parent));
            }
            return i;
        }));
    }, t;
}();

// V2 is no longer usable (see comment at top of file)
// Visible for testing
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */
function Au(t) {
    return ku.nw(t, yu.store);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Serializer for values stored in the LocalStore. */ var Cu = /** @class */ function() {
    function t(t) {
        this.qw = t;
    }
    /** Decodes a remote document from storage locally to a Document. */    return t.prototype.Uw = function(t) {
        if (t.document) return this.qw.Ae(t.document, !!t.hasCommittedMutations);
        if (t.noDocument) {
            var n = j.rt(t.noDocument.path), i = this.Bw(t.noDocument.readTime);
            return new Lt(n, i, {
                hasCommittedMutations: !!t.hasCommittedMutations
            });
        }
        if (t.unknownDocument) {
            n = j.rt(t.unknownDocument.path), i = this.Bw(t.unknownDocument.version);
            return new Mt(n, i);
        }
        return Gn("Unexpected DbRemoteDocument");
    }, 
    /** Encodes a document for storage locally. */
    t.prototype.Lw = function(t, n) {
        var i = this.Fw(n), e = t.key.path.L().K();
        if (t instanceof xt) {
            var r = this.qw.Se(t), u = t.hasCommittedMutations;
            return new wu(
            /* unknownDocument= */ null, 
            /* noDocument= */ null, r, u, i, e);
        }
        if (t instanceof Lt) {
            var s = t.key.path.K(), o = this.Qw(t.version);
            u = t.hasCommittedMutations;
            return new wu(
            /* unknownDocument= */ null, new du(s, o), 
            /* document= */ null, u, i, e);
        }
        if (t instanceof Mt) {
            s = t.key.path.K();
            var h = this.Qw(t.version);
            return new wu(new vu(s, h), 
            /* noDocument= */ null, 
            /* document= */ null, 
            /* hasCommittedMutations= */ !0, i, e);
        }
        return Gn("Unexpected MaybeDocument");
    }, t.prototype.Fw = function(t) {
        var n = t.O();
        return [ n.seconds, n.nanoseconds ];
    }, t.prototype.jw = function(t) {
        var n = new V(t[0], t[1]);
        return k.P(n);
    }, t.prototype.Qw = function(t) {
        var n = t.O();
        return new hu(n.seconds, n.nanoseconds);
    }, t.prototype.Bw = function(t) {
        var n = new V(t.seconds, t.nanoseconds);
        return k.P(n);
    }, 
    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    t.prototype.gw = function(t, n) {
        var i = this, e = n.baseMutations.map((function(t) {
            return i.qw.Fe(t);
        })), r = n.mutations.map((function(t) {
            return i.qw.Fe(t);
        }));
        return new fu(t, n.batchId, n.gr.toMillis(), e, r);
    }, 
    /** Decodes a DbMutationBatch into a MutationBatch */
    t.prototype.yw = function(t) {
        var n = this, i = (t.baseMutations || []).map((function(t) {
            return n.qw.Le(t);
        })), e = t.mutations.map((function(t) {
            return n.qw.Le(t);
        })), r = V.fromMillis(t.localWriteTimeMs);
        return new $n(t.batchId, r, i, e);
    }, 
    /*
     * Encodes a set of document keys into an array of EncodedResourcePaths.
     */
    t.prototype.Gw = function(t) {
        var n = [];
        return t.forEach((function(t) {
            n.push(ki(t.path));
        })), n;
    }, 
    /** Decodes an array of EncodedResourcePaths into a set of document keys. */
    t.prototype.Ww = function(t) {
        for (var n = wn(), i = 0, e = t; i < e.length; i++) {
            var r = e[i];
            n = n.add(new j(Fi(r)));
        }
        return n;
    }, 
    /** Decodes a DbTarget into TargetData */
    t.prototype.Rw = function(t) {
        var n, i = this.Bw(t.readTime), e = void 0 !== t.lastLimboFreeSnapshotVersion ? this.Bw(t.lastLimboFreeSnapshotVersion) : k.MIN;
        return n = void 0 !== t.query.documents ? this.qw.ze(t.query) : this.qw.Xe(t.query), 
        new en(n, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, i, e, K.fromBase64String(t.resumeToken));
    }, 
    /** Encodes TargetData into a DbTarget for storage locally. */
    t.prototype.Sw = function(t) {
        Wn(0 /* Listen */ === t.ti, "Only queries with purpose 0 may be stored, got " + t.ti);
        var n, i = this.Qw(t.ni), e = this.Qw(t.lastLimboFreeSnapshotVersion);
        n = t.target.Tn() ? this.qw.We(t.target) : this.qw.Ke(t.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
                var r = t.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
                return new pu(t.targetId, t.target.canonicalId(), i, r, t.sequenceNumber, e, n);
    }, t;
}();

/**
 * A helper function for figuring out what kind of query has been stored.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Pu = "Another tab has exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs.", Vu = /** @class */ function(t) {
    function i(n, i) {
        var e = t.call(this) || this;
        return e.Iw = n, e.fo = i, e;
    }
    return tslib.__extends(i, t), i;
}(Ci), ku = /** @class */ function() {
    function t(n, i, e, r, u, s, o, h) {
        if (this.allowTabSynchronization = n, this.persistenceKey = i, this.clientId = e, 
        this.zo = s, this.zw = h, this.Fc = !1, this.isPrimary = !1, this.networkEnabled = !0, 
        /** Our window.unload handler, if registered. */
        this.Kw = null, this.inForeground = !1, 
        /** Our 'visibilitychange' listener if registered. */
        this.Jw = null, 
        /** The client metadata refresh task. */
        this.Hw = null, 
        /** The last time we garbage collected the client metadata object store. */
        this.Yw = Number.NEGATIVE_INFINITY, 
        /** A listener to notify on primary state changes. */
        this.Xw = function(t) {
            return Promise.resolve();
        }, this.Cs = new Fu(this, u), this.$w = i + t.Zw, this.serializer = new Cu(o), this.document = r.document, 
        this.Os = new Yr(this.Cs, this.serializer), this.Bh = new Su, this.qh = new nu(this.serializer, this.Bh), 
        !r.window || !r.window.localStorage) throw new E(T.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        this.window = r.window, this.tm = this.window.localStorage;
    }
    return t.nw = function(t, n) {
        if (t instanceof Vu) return jr.nw(t.Iw, n);
        throw Gn("IndexedDbPersistence must use instances of IndexedDbTransaction");
    }, t.nm = function(n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    if (!t.th()) throw new E(T.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
                    return [ 4 /*yield*/ , (i = new t(n.allowTabSynchronization, n.persistenceKey, n.clientId, n.platform, n.im, n.zo, n.serializer, n.zw)).start() ];

                  case 1:
                    return e.sent(), [ 2 /*return*/ , i ];
                }
            }));
        }));
    }, 
    /**
     * Attempt to start IndexedDb persistence.
     *
     * @return {Promise<void>} Whether persistence was enabled.
     */
    t.prototype.start = function() {
        var t = this;
        return Wn(!this.qu, "IndexedDbPersistence double-started!"), Wn(null !== this.window, "Expected 'window' to be defined"), 
        jr.Xv(this.$w, su, new ou(this.serializer)).then((function(n) {
            // NOTE: This is expected to fail sometimes (in the case of another tab already
            // having the persistence lock), so it's the first thing we should do.
            return t.em = n, t.rm();
        })).then((function() {
            return t.um(), t.sm(), t.om(), t.em.runTransaction("readonly", [ gu.store ], (function(t) {
                return Zr(t);
            }));
        })).then((function(n) {
            t.Oc = new ii(n, t.zw);
        })).then((function() {
            t.Fc = !0;
        })).catch((function(n) {
            return t.em && t.em.close(), Promise.reject(n);
        }));
    }, t.prototype.jc = function(t) {
        var n = this;
        return this.Xw = function(i) {
            return tslib.__awaiter(n, void 0, void 0, (function() {
                return tslib.__generator(this, (function(n) {
                    return this.qu ? [ 2 /*return*/ , t(i) ] : [ 2 /*return*/ ];
                }));
            }));
        }, t(this.isPrimary);
    }, t.prototype.xc = function(t) {
        var n = this;
        this.em.iw((function(i) {
            return tslib.__awaiter(n, void 0, void 0, (function() {
                return tslib.__generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return null !== i.newVersion ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , t() ];

                      case 1:
                        n.sent(), n.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }));
    }, t.prototype.jo = function(t) {
        var n = this;
        this.networkEnabled !== t && (this.networkEnabled = t, 
        // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.zo.Qr((function() {
            return tslib.__awaiter(n, void 0, void 0, (function() {
                return tslib.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.qu ? [ 4 /*yield*/ , this.rm() ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        })));
    }, 
    /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */
    t.prototype.rm = function() {
        var t = this;
        return this.em.runTransaction("readwrite", Ru, (function(n) {
            return Ou(n).put(new Iu(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                if (t.isPrimary) return t.hm(n).next((function(n) {
                    n || (t.isPrimary = !1, t.zo.Qr((function() {
                        return t.Xw(!1);
                    })));
                }));
            })).next((function() {
                return t.cm(n);
            })).next((function(i) {
                return t.isPrimary && !i ? t.am(n).next((function() {
                    return !1;
                })) : !!i && t.fm(n).next((function() {
                    return !0;
                }));
            }));
        })).catch((function(n) {
            if (!t.allowTabSynchronization) throw n;
            return qn("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", n), 
            /* isPrimary= */ !1;
        })).then((function(n) {
            t.isPrimary !== n && t.zo.Qr((function() {
                return t.Xw(n);
            })), t.isPrimary = n;
        }));
    }, t.prototype.hm = function(t) {
        var n = this;
        return Nu(t).get(cu.key).next((function(t) {
            return si.resolve(n.lm(t));
        }));
    }, t.prototype.dm = function(t) {
        return Ou(t).delete(this.clientId);
    }, 
    /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */
    t.prototype.vm = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var n = this;
            return tslib.__generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    return !this.isPrimary || this.wm(this.Yw, 18e5) ? [ 3 /*break*/ , 2 ] : (this.Yw = Date.now(), 
                    [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(i) {
                        var e = t.nw(i, Iu.store);
                        return e.aw().next((function(t) {
                            var i = n.mm(t, 18e5), r = t.filter((function(t) {
                                return -1 === i.indexOf(t);
                            }));
                            // Delete metadata for clients that are no longer considered active.
                            return si.forEach(r, (function(t) {
                                return e.delete(t.clientId);
                            })).next((function() {
                                return r;
                            }));
                        }));
                    })).catch((function() {
                        // Ignore primary lease violations or any other type of error. The next
                        // primary will run `maybeGarbageCollectMultiClientState()` again.
                        // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend
                        // on LocalStore.
                        return [];
                    })) ]);

                  case 1:
                    // Delete potential leftover entries that may continue to mark the
                    // inactive clients as zombied in LocalStorage.
                    // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                    // the client atomically, but we can't. So we opt to delete the IndexedDb
                    // entries first to avoid potentially reviving a zombied client.
                    i.sent().forEach((function(t) {
                        n.window.localStorage.removeItem(n.pm(t.clientId));
                    })), i.label = 2;

                  case 2:
                    return [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */
    t.prototype.om = function() {
        var t = this;
        this.Hw = this.zo.iu("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
            return t.rm().then((function() {
                return t.vm();
            })).then((function() {
                return t.om();
            }));
        }));
    }, 
    /** Checks whether `client` is the local client. */
    t.prototype.lm = function(t) {
        return !!t && t.ownerId === this.clientId;
    }, 
    /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */
    t.prototype.cm = function(t) {
        var n = this;
        return Nu(t).get(cu.key).next((function(i) {
            // A client is eligible for the primary lease if:
            // - its network is enabled and the client's tab is in the foreground.
            // - its network is enabled and no other client's tab is in the
            //   foreground.
            // - every clients network is disabled and the client's tab is in the
            //   foreground.
            // - every clients network is disabled and no other client's tab is in
            //   the foreground.
            if (null !== i && n.wm(i.leaseTimestampMs, 5e3) && !n.bm(i.ownerId)) {
                if (n.lm(i) && n.networkEnabled) return !0;
                if (!n.lm(i)) {
                    if (!i.allowTabSynchronization) 
                    // Fail the `canActAsPrimary` check if the current leaseholder has
                    // not opted into multi-tab synchronization. If this happens at
                    // client startup, we reject the Promise returned by
                    // `enablePersistence()` and the user can continue to use Firestore
                    // with in-memory persistence.
                    // If this fails during a lease refresh, we will instead block the
                    // AsyncQueue from executing further operations. Note that this is
                    // acceptable since mixing & matching different `synchronizeTabs`
                    // settings is not supported.
                    // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                    // no longer be turned off.
                    throw new E(T.FAILED_PRECONDITION, Pu);
                    return !1;
                }
            }
            return !(!n.networkEnabled || !n.inForeground) || Ou(t).aw().next((function(t) {
                return void 0 === n.mm(t, 5e3).find((function(t) {
                    if (n.clientId !== t.clientId) {
                        var i = !n.networkEnabled && t.networkEnabled, e = !n.inForeground && t.inForeground, r = n.networkEnabled === t.networkEnabled;
                        if (i || e && r) return !0;
                    }
                    return !1;
                }));
            }));
        })).next((function(t) {
            return n.isPrimary !== t && qn("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
            t;
        }));
    }, t.prototype.shutdown = function() {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var t = this;
            return tslib.__generator(this, (function(n) {
                switch (n.label) {
                  case 0:
                    // The shutdown() operations are idempotent and can be called even when
                    // start() aborted (e.g. because it couldn't acquire the persistence lease).
                    return this.Fc = !1, this.gm(), this.Hw && (this.Hw.cancel(), this.Hw = null), this.ym(), 
                    this._m(), [ 4 /*yield*/ , this.em.runTransaction("readwrite", [ cu.store, Iu.store ], (function(n) {
                        return t.am(n).next((function() {
                            return t.dm(n);
                        }));
                    })) ];

                  case 1:
                    return n.sent(), this.em.close(), 
                    // Remove the entry marking the client as zombied from LocalStorage since
                    // we successfully deleted its metadata from IndexedDb.
                    this.Im(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, 
    /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */
    t.prototype.mm = function(t, n) {
        var i = this;
        return t.filter((function(t) {
            return i.wm(t.updateTimeMs, n) && !i.bm(t.clientId);
        }));
    }, t.prototype.Oo = function() {
        var t = this;
        return this.em.runTransaction("readonly", [ Iu.store ], (function(n) {
            return Ou(n).aw().next((function(n) {
                return t.mm(n, 18e5).map((function(t) {
                    return t.clientId;
                }));
            }));
        }));
    }, t.clearPersistence = function(n) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var i;
            return tslib.__generator(this, (function(e) {
                switch (e.label) {
                  case 0:
                    return t.th() ? (i = n + t.Zw, [ 4 /*yield*/ , jr.delete(i) ]) : [ 2 /*return*/ , Promise.resolve() ];

                  case 1:
                    return e.sent(), [ 2 /*return*/ ];
                }
            }));
        }));
    }, Object.defineProperty(t.prototype, "qu", {
        get: function() {
            return this.Fc;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.Vs = function(t) {
        return Wn(this.qu, "Cannot initialize MutationQueue before persistence is started."), 
        Gr.pw(t, this.serializer, this.Bh, this.Cs);
    }, t.prototype.Fs = function() {
        return Wn(this.qu, "Cannot initialize TargetCache before persistence is started."), 
        this.Os;
    }, t.prototype.Ns = function() {
        return Wn(this.qu, "Cannot initialize RemoteDocumentCache before persistence is started."), 
        this.qh;
    }, t.prototype.js = function() {
        return Wn(this.qu, "Cannot initialize IndexManager before persistence is started."), 
        this.Bh;
    }, t.prototype.runTransaction = function(t, n, i) {
        var e = this;
        qn("IndexedDbPersistence", "Starting transaction:", t);
        var r, u = "readonly" === n ? "readonly" : "readwrite";
        // Do all transactions as readwrite against all object stores, since we
        // are the only reader/writer.
        return this.em.runTransaction(u, Ru, (function(u) {
            return r = new Vu(u, e.Oc.next()), "readwrite-primary" === n ? e.hm(u).next((function(t) {
                return !!t || e.cm(u);
            })).next((function(n) {
                if (!n) throw Bn("Failed to obtain primary lease for action '" + t + "'."), e.isPrimary = !1, 
                e.zo.Qr((function() {
                    return e.Xw(!1);
                })), new E(T.FAILED_PRECONDITION, Ai);
                return i(r);
            })).next((function(t) {
                return e.fm(u).next((function() {
                    return t;
                }));
            })) : e.Tm(u).next((function() {
                return i(r);
            }));
        })).then((function(t) {
            return r.Mh(), t;
        }));
    }, 
    /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */
    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.
    t.prototype.Tm = function(t) {
        var n = this;
        return Nu(t).get(cu.key).next((function(t) {
            if (null !== t && n.wm(t.leaseTimestampMs, 5e3) && !n.bm(t.ownerId) && !n.lm(t) && !t.allowTabSynchronization) throw new E(T.FAILED_PRECONDITION, Pu);
        }));
    }, 
    /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */
    t.prototype.fm = function(t) {
        var n = new cu(this.clientId, this.allowTabSynchronization, Date.now());
        return Nu(t).put(cu.key, n);
    }, t.th = function() {
        return jr.th();
    }, 
    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */
    t.Em = function(t) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        var n = t.ae.projectId;
        return t.ae.br || (n += "." + t.ae.database), "firestore/" + t.persistenceKey + "/" + n + "/";
    }, 
    /** Checks the primary lease and removes it if we are the current primary. */
    t.prototype.am = function(t) {
        var n = this, i = Nu(t);
        return i.get(cu.key).next((function(t) {
            return n.lm(t) ? (qn("IndexedDbPersistence", "Releasing primary lease."), i.delete(cu.key)) : si.resolve();
        }));
    }, 
    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */
    t.prototype.wm = function(t, n) {
        var i = Date.now();
        return !(t < i - n) && (!(t > i) || (Bn("Detected an update time that is in the future: " + t + " > " + i), 
        !1));
    }, t.prototype.um = function() {
        var t = this;
        null !== this.document && "function" == typeof this.document.addEventListener && (this.Jw = function() {
            t.zo.Qr((function() {
                return t.inForeground = "visible" === t.document.visibilityState, t.rm();
            }));
        }, this.document.addEventListener("visibilitychange", this.Jw), this.inForeground = "visible" === this.document.visibilityState);
    }, t.prototype.ym = function() {
        this.Jw && (Wn(null !== this.document && "function" == typeof this.document.addEventListener, "Expected 'document.addEventListener' to be a function"), 
        this.document.removeEventListener("visibilitychange", this.Jw), this.Jw = null);
    }, 
    /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */
    t.prototype.sm = function() {
        var t = this;
        "function" == typeof this.window.addEventListener && (this.Kw = function() {
            // Note: In theory, this should be scheduled on the AsyncQueue since it
            // accesses internal state. We execute this code directly during shutdown
            // to make sure it gets a chance to run.
            t.gm(), t.zo.Qr((function() {
                // Attempt graceful shutdown (including releasing our primary lease),
                // but there's no guarantee it will complete.
                return t.shutdown();
            }));
        }, this.window.addEventListener("unload", this.Kw));
    }, t.prototype._m = function() {
        this.Kw && (Wn("function" == typeof this.window.removeEventListener, "Expected 'window.removeEventListener' to be a function"), 
        this.window.removeEventListener("unload", this.Kw), this.Kw = null);
    }, 
    /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */
    t.prototype.bm = function(t) {
        try {
            var n = null !== this.tm.getItem(this.pm(t));
            return qn("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
            n;
        } catch (t) {
            // Gracefully handle if LocalStorage isn't working.
            return Bn("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
        }
    }, 
    /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */
    t.prototype.gm = function() {
        try {
            this.tm.setItem(this.pm(this.clientId), String(Date.now()));
        } catch (t) {
            // Gracefully handle if LocalStorage isn't available / working.
            Bn("Failed to set zombie client id.", t);
        }
    }, 
    /** Removes the zombied client entry if it exists. */
    t.prototype.Im = function() {
        try {
            this.tm.removeItem(this.pm(this.clientId));
        } catch (t) {
            // Ignore
        }
    }, t.prototype.pm = function(t) {
        return "firestore_zombie_" + this.persistenceKey + "_" + t;
    }, 
    /**
     * The name of the main (and currently only) IndexedDB database. this name is
     * appended to the prefix provided to the IndexedDbPersistence constructor.
     */
    t.Zw = "main", t;
}();

/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */
function Nu(t) {
    return t.store(cu.store);
}

/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */ function Ou(t) {
    return t.store(Iu.store);
}

/** Provides LRU functionality for IndexedDB persistence. */ var Fu = /** @class */ function() {
    function t(t, n) {
        this.db = t, this.Bc = null, this.ju = new li(this, n);
    }
    return t.prototype.Wu = function(t) {
        var n = this.Dm(t);
        return this.db.Fs().kc(t).next((function(t) {
            return n.next((function(n) {
                return t + n;
            }));
        }));
    }, t.prototype.Dm = function(t) {
        var n = 0;
        return this.Ku(t, (function(t) {
            n++;
        })).next((function() {
            return n;
        }));
    }, t.prototype.$i = function(t, n) {
        return this.db.Fs().$i(t, n);
    }, t.prototype.Ku = function(t, n) {
        return this.Rm(t, (function(t, i) {
            return n(i);
        }));
    }, t.prototype.As = function(t) {
        this.Bc = t;
    }, t.prototype.es = function(t, n) {
        return Uu(t, n);
    }, t.prototype.us = function(t, n) {
        return Uu(t, n);
    }, t.prototype.Ju = function(t, n, i) {
        return this.db.Fs().Ju(t, n, i);
    }, t.prototype.lc = function(t, n) {
        return Uu(t, n);
    }, 
    /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */
    t.prototype.Sm = function(t, n) {
        return this.Bc.fs(n) ? si.resolve(!0) : function(t, n) {
            var i = !1;
            return Hr(t).ww((function(e) {
                return Wr(t, e, n).next((function(t) {
                    return t && (i = !0), si.resolve(!t);
                }));
            })).next((function() {
                return i;
            }));
        }(t, n);
    }, t.prototype.Hu = function(t, n) {
        var i = this, e = this.db.Ns().Xs(), r = [], u = 0;
        return this.Rm(t, (function(s, o) {
            if (o <= n) {
                var h = i.Sm(t, s).next((function(n) {
                    if (!n) 
                    // Our size accounting requires us to read all documents before
                    // removing them.
                    return u++, e.gs(t, s).next((function() {
                        return e.bs(s), tu(t).delete([ 0, ki(s.path) ]);
                    }));
                }));
                r.push(h);
            }
        })).next((function() {
            return si.pu(r);
        })).next((function() {
            return e.apply(t);
        })).next((function() {
            return u;
        }));
    }, t.prototype.removeTarget = function(t, n) {
        var i = n.ii(t.fo);
        return this.db.Fs().do(t, i);
    }, t.prototype.vo = function(t, n) {
        return Uu(t, n);
    }, 
    /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */
    t.prototype.Rm = function(t, n) {
        var i, e = tu(t), r = ii.Nr;
        return e.vw({
            index: bu.documentTargetsIndex
        }, (function(t, e) {
            var u = t[0], s = (t[1], e.path), o = e.sequenceNumber;
            0 === u ? (
            // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            r !== ii.Nr && n(new j(Fi(i)), r), 
            // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            r = o, i = s) : 
            // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            r = ii.Nr;
        })).next((function() {
            // Since we report sequence numbers after getting to the next key, we
            // need to check if the last key we iterated over was an orphaned
            // document and report it.
            r !== ii.Nr && n(new j(Fi(i)), r);
        }));
    }, t.prototype.Xu = function(t) {
        return this.db.Ns().pc(t);
    }, t;
}();

function Uu(t, n) {
    return tu(t).put(
    /**
 * @return A value suitable for writing a sentinel row in the target-document
 * store.
 */
    function(t, n) {
        return new bu(0, ki(t.path), n);
    }(n, t.fo));
}

/**
 * Provides all components needed for IndexedDb persistence.
 */ var ju = /** @class */ function() {
    function t() {}
    return t.prototype.initialize = function(t, n, i, e, s, o) {
        return tslib.__awaiter(this, void 0, void 0, (function() {
            var r, h, c, a;
            return tslib.__generator(this, (function(u) {
                switch (u.label) {
                  case 0:
                    if (Wn(o.zc, "IndexedDbPersistenceProvider can only provide durable persistence"), 
                    Wn(!this.persistence, "configure() already called"), r = ku.Em(n), h = new Fn(n.ae, {
                        de: jn.xt().de
                    }), !Ri.th(i)) throw new E(T.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
                    return this.Ml = o.synchronizeTabs ? new Ri(t, i, r, e, s) : new Si, c = this, [ 4 /*yield*/ , ku.nm({
                        allowTabSynchronization: o.synchronizeTabs,
                        persistenceKey: r,
                        clientId: e,
                        platform: i,
                        zo: t,
                        serializer: h,
                        im: ai.Pu(o.cacheSizeBytes),
                        zw: this.Ml
                    }) ];

                  case 1:
                    return c.persistence = u.sent(), a = this.persistence.Cs.ju, this.Md = new fi(a, t), 
                    [ 2 /*return*/ ];
                }
            }));
        }));
    }, t.prototype.Jc = function() {
        return Wn(!!this.persistence, "initialize() not called"), this.persistence;
    }, t.prototype.Hc = function() {
        return Wn(!!this.Ml, "initialize() not called"), this.Ml;
    }, t.prototype.Kc = function() {
        return Wn(!!this.Md, "initialize() not called"), this.Md;
    }, t.prototype.clearPersistence = function(t) {
        var n = ku.Em(t);
        return ku.clearPersistence(n);
    }, t;
}(), xu = {
    Firestore: Ar,
    GeoPoint: Ne,
    Timestamp: V,
    Blob: Te,
    Transaction: Cr,
    WriteBatch: Pr,
    DocumentReference: Vr,
    DocumentSnapshot: kr,
    Query: Or,
    QueryDocumentSnapshot: Nr,
    QuerySnapshot: Fr,
    CollectionReference: Ur,
    FieldPath: Ee,
    FieldValue: ke,
    setLogLevel: fr.setLogLevel,
    CACHE_SIZE_UNLIMITED: cr
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var Lu = /** @class */ function() {
    function t() {}
    return t.prototype.jf = function(t) {
        // No-op.
    }, t.prototype.shutdown = function() {
        // No-op.
    }, t;
}(), Mu = /** @class */ function() {
    function t() {
        var t = this;
        this.Am = function() {
            return t.Cm();
        }, this.Pm = function() {
            return t.Vm();
        }, this.km = [], this.Nm();
    }
    return t.prototype.jf = function(t) {
        this.km.push(t);
    }, t.prototype.shutdown = function() {
        window.removeEventListener("online", this.Am), window.removeEventListener("offline", this.Pm);
    }, t.prototype.Nm = function() {
        window.addEventListener("online", this.Am), window.addEventListener("offline", this.Pm);
    }, t.prototype.Cm = function() {
        qn("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for (var t = 0, n = this.km; t < n.length; t++) {
            (0, n[t])(0 /* AVAILABLE */);
        }
    }, t.prototype.Vm = function() {
        qn("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for (var t = 0, n = this.km; t < n.length; t++) {
            (0, n[t])(1 /* UNAVAILABLE */);
        }
    }, 
    // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.
    /** Checks that all used attributes of window are available. */
    t.th = function() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }, t;
}(), qu = /** @class */ function() {
    function t(t) {
        this.Om = t.Om, this.Fm = t.Fm;
    }
    return t.prototype.Ea = function(t) {
        Wn(!this.Um, "Called onOpen on stream twice!"), this.Um = t;
    }, t.prototype.ga = function(t) {
        Wn(!this.jm, "Called onClose on stream twice!"), this.jm = t;
    }, t.prototype.onMessage = function(t) {
        Wn(!this.xm, "Called onMessage on stream twice!"), this.xm = t;
    }, t.prototype.close = function() {
        this.Fm();
    }, t.prototype.send = function(t) {
        this.Om(t);
    }, t.prototype.Lm = function() {
        Wn(void 0 !== this.Um, "Cannot call onOpen because no callback was set"), this.Um();
    }, t.prototype.Mm = function(t) {
        Wn(void 0 !== this.jm, "Cannot call onClose because no callback was set"), this.jm(t);
    }, t.prototype.qm = function(t) {
        Wn(void 0 !== this.xm, "Cannot call onMessage because no callback was set"), this.xm(t);
    }, t;
}(), Bu = {
    BatchGetDocuments: "batchGet",
    Commit: "commit"
}, Qu = "gl-js/ fire/" + _, Gu = /** @class */ function() {
    function t(t) {
        this.ae = t.ae;
        var n = t.ssl ? "https" : "http";
        this.Bm = n + "://" + t.host, this.forceLongPolling = t.forceLongPolling;
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */    return t.prototype.Qm = function(t, n) {
        if (n) for (var i in n.o) n.o.hasOwnProperty(i) && (t[i] = n.o[i]);
        t["X-Goog-Api-Client"] = Qu;
    }, t.prototype.Ua = function(t, n, e) {
        var r = this, u = this.Gm(t);
        return new Promise((function(s, o) {
            var h = new webchannelWrapper.XhrIo;
            h.listenOnce(webchannelWrapper.EventType.COMPLETE, (function() {
                try {
                    switch (h.getLastErrorCode()) {
                      case webchannelWrapper.ErrorCode.NO_ERROR:
                        var n = h.getResponseJson();
                        qn("Connection", "XHR received:", JSON.stringify(n)), s(n);
                        break;

                      case webchannelWrapper.ErrorCode.TIMEOUT:
                        qn("Connection", 'RPC "' + t + '" timed out'), o(new E(T.DEADLINE_EXCEEDED, "Request time out"));
                        break;

                      case webchannelWrapper.ErrorCode.HTTP_ERROR:
                        var i = h.getStatus();
                        if (qn("Connection", 'RPC "' + t + '" failed with status:', i, "response text:", h.getResponseText()), 
                        i > 0) {
                            var e = h.getResponseJson().error;
                            if (e && e.status && e.message) {
                                var r = (u = e.status, c = u.toLowerCase().replace("_", "-"), Object.values(T).indexOf(c) >= 0 ? c : T.UNKNOWN);
                                o(new E(r, e.message));
                            } else o(new E(T.UNKNOWN, "Server responded with status " + h.getStatus()));
                        } else 
                        // If we received an HTTP_ERROR but there's no status code,
                        // it's most probably a connection issue
                        qn("Connection", 'RPC "' + t + '" failed'), o(new E(T.UNAVAILABLE, "Connection failed."));
                        break;

                      default:
                        Gn('RPC "' + t + '" failed with unanticipated webchannel error ' + h.getLastErrorCode() + ": " + h.getLastError() + ", giving up.");
                    }
                } finally {
                    qn("Connection", 'RPC "' + t + '" completed.');
                }
                var u, c;
            }));
            // The database field is already encoded in URL. Specifying it again in
            // the body is not necessary in production, and will cause duplicate field
            // errors in the Firestore Emulator. Let's remove it.
            var c = tslib.__assign({}, n);
            delete c.database;
            var a = JSON.stringify(c);
            qn("Connection", "XHR sending: ", u + " " + a);
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the
            // $httpOverwrite parameter supported by ESF to avoid
            // triggering preflight requests.
            var f = {
                "Content-Type": "text/plain"
            };
            r.Qm(f, e), h.send(u, "POST", a, f, 15);
        }));
    }, t.prototype.ja = function(t, n, i) {
        // The REST API automatically aggregates all of the streamed results, so we
        // can just use the normal invoke() method.
        return this.Ua(t, n, i);
    }, t.prototype.Da = function(t, n) {
        var i = [ this.Bm, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], e = webchannelWrapper.createWebChannelTransport(), r = {
            // Required for backend stickiness, routing behavior is based on this
            // parameter.
            httpSessionIdParam: "gsessionid",
            initMessageHeaders: {},
            messageUrlParams: {
                // This param is used to improve routing and project isolation by the
                // backend and must be included in every request.
                database: "projects/" + this.ae.projectId + "/databases/" + this.ae.database
            },
            sendRawJson: !0,
            supportsCrossDomainXhr: !0,
            internalChannelParams: {
                // Override the default timeout (randomized between 10-20 seconds) since
                // a large write batch on a slow internet connection may take a long
                // time to send to the backend. Rather than have WebChannel impose a
                // tight timeout which could lead to infinite timeouts and retries, we
                // set it very large (5-10 minutes) and rely on the browser's builtin
                // timeouts to kick in if the request isn't working.
                forwardChannelRequestTimeoutMs: 6e5
            },
            forceLongPolling: this.forceLongPolling
        };
        this.Qm(r.initMessageHeaders, n), 
        // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
        // the headers should instead be encoded into a special "$httpHeaders" query
        // parameter, which is recognized by the webchannel backend. This is
        // formally defined here:
        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
        // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
        // doesn't have an Origin header. So we have to exclude a few browser environments that are
        // known to (sometimes) not include an Origin. See
        // https://github.com/firebase/firebase-js-sdk/issues/1491.
        util.isMobileCordova() || util.isReactNative() || util.isElectron() || util.isIE() || util.isUWP() || util.isBrowserExtension() || (r.httpHeadersOverwriteParam = "$httpHeaders");
        var u = i.join("");
        qn("Connection", "Creating WebChannel: " + u + " " + r);
        var s = e.createWebChannel(u, r), o = !1, h = !1, w = new qu({
            Om: function(t) {
                h ? qn("Connection", "Not sending because WebChannel is closed:", t) : (o || (qn("Connection", "Opening WebChannel transport."), 
                s.open(), o = !0), qn("Connection", "WebChannel sending:", t), s.send(t));
            },
            Fm: function() {
                return s.close();
            }
        }), m = function(t, n) {
            // TODO(dimond): closure typing seems broken because WebChannel does
            // not implement goog.events.Listenable
            s.listen(t, (function(t) {
                try {
                    n(t);
                } catch (t) {
                    setTimeout((function() {
                        throw t;
                    }), 0);
                }
            }));
        };
        // WebChannel supports sending the first message with the handshake - saving
        // a network round trip. However, it will have to call send in the same
        // JS event loop as open. In order to enforce this, we delay actually
        // opening the WebChannel until send is called. Whether we have called
        // open is tracked with this variable.
                return m(webchannelWrapper.WebChannel.EventType.OPEN, (function() {
            h || qn("Connection", "WebChannel transport opened.");
        })), m(webchannelWrapper.WebChannel.EventType.CLOSE, (function() {
            h || (h = !0, qn("Connection", "WebChannel transport closed"), w.Mm());
        })), m(webchannelWrapper.WebChannel.EventType.ERROR, (function(t) {
            h || (h = !0, qn("Connection", "WebChannel transport errored:", t), w.Mm(new E(T.UNAVAILABLE, "The operation could not be completed")));
        })), m(webchannelWrapper.WebChannel.EventType.MESSAGE, (function(t) {
            var n;
            if (!h) {
                var i = t.data[0];
                Wn(!!i, "Got a webchannel message without data.");
                // TODO(b/35143891): There is a bug in One Platform that caused errors
                // (and only errors) to be wrapped in an extra array. To be forward
                // compatible with the bug we need to check either condition. The latter
                // can be removed once the fix has been rolled out.
                // Use any because msgData.error is not typed.
                var e = i, r = e.error || (null === (n = e[0]) || void 0 === n ? void 0 : n.error);
                if (r) {
                    qn("Connection", "WebChannel received error:", r);
                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
                    var u = r.status, o = function(t) {
                        // lookup by string
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        var n = Tt[t];
                        if (void 0 !== n) return sn(n);
                    }(u), c = r.message;
                    void 0 === o && (o = T.INTERNAL, c = "Unknown error status: " + u + " with message " + r.message), 
                    // Mark closed so no further events are propagated
                    h = !0, w.Mm(new E(o, c)), s.close();
                } else qn("Connection", "WebChannel received:", i), w.qm(i);
            }
        })), setTimeout((function() {
            // Technically we could/should wait for the WebChannel opened event,
            // but because we want to send the first message with the WebChannel
            // handshake we pretend the channel opened here (asynchronously), and
            // then delay the actual open until the first message is sent.
            w.Lm();
        }), 0), w;
    }, 
    // visible for testing
    t.prototype.Gm = function(t) {
        var n = Bu[t];
        return Wn(void 0 !== n, "Unknown REST mapping for: " + t), this.Bm + "/v1/projects/" + this.ae.projectId + "/databases/" + this.ae.database + "/documents:" + n;
    }, t;
}(), Wu = window.crypto || window.__PRIVATE_msCrypto, zu = /** @class */ function() {
    function t() {
        this.de = !0, this.xa = "undefined" != typeof atob;
    }
    return Object.defineProperty(t.prototype, "document", {
        get: function() {
            return "undefined" != typeof document ? document : null;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "window", {
        get: function() {
            return "undefined" != typeof window ? window : null;
        },
        enumerable: !0,
        configurable: !0
    }), t.prototype.Bd = function(t) {
        return Promise.resolve(new Gu(t));
    }, t.prototype.Qd = function() {
        return Mu.th() ? new Mu : new Lu;
    }, t.prototype.Gd = function(t) {
        return new Fn(t, {
            de: !0
        });
    }, t.prototype.mr = function(t) {
        return JSON.stringify(t);
    }, t.prototype.atob = function(t) {
        return atob(t);
    }, t.prototype.btoa = function(t) {
        return btoa(t);
    }, t.prototype.randomBytes = function(t) {
        if (t <= 0) return new Uint8Array;
        var n = new Uint8Array(t);
        return Wu.getRandomValues(n), n;
    }, t;
}();

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Registers the main Firestore build with the components framework.
 * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
 */
function Ku(t) {
    !
    /**
 * Configures Firestore as part of the Firebase SDK by calling registerService.
 *
 * @param firebase The FirebaseNamespace to register Firestore with
 * @param firestoreFactory A factory function that returns a new Firestore
 *    instance.
 */
    function(t, n) {
        t.INTERNAL.registerComponent(new component.Component("firestore", (function(t) {
            var i = t.getProvider("app").getImmediate();
            return n(i, t.getProvider("auth-internal"));
        }), "PUBLIC" /* PUBLIC */).setServiceProps(tslib.__assign({}, xu)));
    }(t, (function(t, n) {
        return new fr(t, n, new ju);
    })), t.registerVersion("@firebase/firestore", "1.13.1");
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This code needs to run before Firestore is used. This can be achieved in
 * several ways:
 *   1) Through the JSCompiler compiling this code and then (automatically)
 *      executing it before exporting the Firestore symbols.
 *   2) Through importing this module first in a Firestore main module
 */
jn.wr(new zu), Ku(t);

exports.__PRIVATE_registerFirestore = Ku;


}).call(this,require('_process'))
},{"@firebase/app":4,"@firebase/component":5,"@firebase/logger":7,"@firebase/util":8,"@firebase/webchannel-wrapper":9,"_process":14,"tslib":13}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;
/**
 * A container for all of the Logger instances
 */
var instances = [];
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(exports.LogLevel || (exports.LogLevel = {}));
var levelStringToEnum = {
    'debug': exports.LogLevel.DEBUG,
    'verbose': exports.LogLevel.VERBOSE,
    'info': exports.LogLevel.INFO,
    'warn': exports.LogLevel.WARN,
    'error': exports.LogLevel.ERROR,
    'silent': exports.LogLevel.SILENT
};
/**
 * The default log level
 */
var defaultLogLevel = exports.LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
var ConsoleMethod = (_a = {},
    _a[exports.LogLevel.DEBUG] = 'log',
    _a[exports.LogLevel.VERBOSE] = 'log',
    _a[exports.LogLevel.INFO] = 'info',
    _a[exports.LogLevel.WARN] = 'warn',
    _a[exports.LogLevel.ERROR] = 'error',
    _a);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
var defaultLogHandler = function (instance, logType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (logType < instance.logLevel) {
        return;
    }
    var now = new Date().toISOString();
    var method = ConsoleMethod[logType];
    if (method) {
        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
    }
    else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = /** @class */ (function () {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    function Logger(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */
        this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */
        this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */
        instances.push(this);
    }
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (val) {
            if (!(val in exports.LogLevel)) {
                throw new TypeError('Invalid value assigned to `logLevel`');
            }
            this._logLevel = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "logHandler", {
        get: function () {
            return this._logHandler;
        },
        set: function (val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "userLogHandler", {
        get: function () {
            return this._userLogHandler;
        },
        set: function (val) {
            this._userLogHandler = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.DEBUG], args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.VERBOSE], args));
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.INFO], args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.WARN], args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
        this._logHandler.apply(this, __spreadArrays([this, exports.LogLevel.ERROR], args));
    };
    return Logger;
}());
function setLogLevel(level) {
    var newLevel = typeof level === 'string' ? levelStringToEnum[level] : level;
    instances.forEach(function (inst) {
        inst.logLevel = newLevel;
    });
}
function setUserLogHandler(logCallback, options) {
    var _loop_1 = function (instance) {
        var customLogLevel = null;
        if (options && options.level) {
            customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
            instance.userLogHandler = null;
        }
        else {
            instance.userLogHandler = function (instance, level) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                var message = args
                    .map(function (arg) {
                    if (arg == null) {
                        return null;
                    }
                    else if (typeof arg === 'string') {
                        return arg;
                    }
                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
                        return arg.toString();
                    }
                    else if (arg instanceof Error) {
                        return arg.message;
                    }
                    else {
                        try {
                            return JSON.stringify(arg);
                        }
                        catch (ignored) {
                            return null;
                        }
                    }
                })
                    .filter(function (arg) { return arg; })
                    .join(' ');
                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                    logCallback({
                        level: exports.LogLevel[level].toLowerCase(),
                        message: message,
                        args: args,
                        type: instance.name
                    });
                }
            };
        }
    };
    for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
    }
}

exports.Logger = Logger;
exports.setLogLevel = setLogLevel;
exports.setUserLogHandler = setUserLogHandler;


},{}],8:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */
    NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */
    NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */
    SDK_VERSION: '${JSCORE_VERSION}'
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Throws an error if the provided assertion is falsy
 */
var assert = function (assertion, message) {
    if (!assertion) {
        throw assertionError(message);
    }
};
/**
 * Returns an Error object suitable for throwing.
 */
var assertionError = function (message) {
    return new Error('Firebase Database (' +
        CONSTANTS.SDK_VERSION +
        ') INTERNAL ASSERT FAILED: ' +
        message);
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var stringToByteArray = function (str) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if ((c & 0xfc00) === 0xd800 &&
            i + 1 < str.length &&
            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */
var byteArrayToString = function (bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [];
    var pos = 0, c = 0;
    while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
        }
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
        }
        else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        }
        else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */
    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */
    get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */
    get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */
    HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeByteArray: function (input, webSafe) {
        if (!Array.isArray(input)) {
            throw Error('encodeByteArray takes an array as a parameter');
        }
        this.init_();
        var byteToCharMap = webSafe
            ? this.byteToCharMapWebSafe_
            : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
            var outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeString: function (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */
    decodeString: function (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */
    decodeStringToByteArray: function (input, webSafe) {
        this.init_();
        var charToByteMap = webSafe
            ? this.charToByteMapWebSafe_
            : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length;) {
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw Error();
            }
            var outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 !== 64) {
                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 !== 64) {
                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_: function () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */
var base64Encode = function (str) {
    var utf8Bytes = stringToByteArray(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */
var base64Decode = function (str) {
    try {
        return base64.decodeString(str, true);
    }
    catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (var prop in source) {
        if (!source.hasOwnProperty(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.reject = function () { };
        this.resolve = function () { };
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */
    Deferred.prototype.wrapCallback = function (callback) {
        var _this = this;
        return function (error, value) {
            if (error) {
                _this.reject(error);
            }
            else {
                _this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function () { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    };
    return Deferred;
}());

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */
function getUA() {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */
function isMobileCordova() {
    return (typeof window !== 'undefined' &&
        // @ts-ignore Setting up an broadly applicable index signature for Window
        // just to deal with this case would probably be a bad idea.
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return (Object.prototype.toString.call(global.process) === '[object process]');
    }
    catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */
function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    var runtime = typeof chrome === 'object'
        ? chrome.runtime
        : typeof browser === 'object'
            ? browser.runtime
            : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */
function isReactNative() {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
}
/** Detects Electron apps. */
function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */
function isIE() {
    var ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */
function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */
function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
var FirebaseError = /** @class */ (function (_super) {
    tslib.__extends(FirebaseError, _super);
    function FirebaseError(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        }
        return _this;
    }
    return FirebaseError;
}(Error));
var ErrorFactory = /** @class */ (function () {
    function ErrorFactory(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    ErrorFactory.prototype.create = function (code) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        var customData = data[0] || {};
        var fullCode = this.service + "/" + code;
        var template = this.errors[code];
        var message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error = new FirebaseError(fullCode, fullMessage);
        // Keys with an underscore at the end of their name are not included in
        // error.data for some reason.
        // TODO: Replace with Object.entries when lib is updated to es2017.
        for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
            var key = _b[_a];
            if (key.slice(-1) !== '_') {
                if (key in error) {
                    console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                }
                error[key] = customData[key];
            }
        }
        return error;
    };
    return ErrorFactory;
}());
function replaceTemplate(template, data) {
    return template.replace(PATTERN, function (_, key) {
        var value = data[key];
        return value != null ? value.toString() : "<" + key + "?>";
    });
}
var PATTERN = /\{\$([^}]+)}/g;

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */
function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */
function stringify(data) {
    return JSON.stringify(data);
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
var decode = function (token) {
    var header = {}, claims = {}, data = {}, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    }
    catch (e) { }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
var isValidTimestamp = function (token) {
    var claims = decode(token).claims;
    var now = Math.floor(new Date().getTime() / 1000);
    var validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) {
            validSince = claims['nbf'];
        }
        else if (claims.hasOwnProperty('iat')) {
            validSince = claims['iat'];
        }
        if (claims.hasOwnProperty('exp')) {
            validUntil = claims['exp'];
        }
        else {
            // token will expire after 24h by default
            validUntil = validSince + 86400;
        }
    }
    return (!!now &&
        !!validSince &&
        !!validUntil &&
        now >= validSince &&
        now <= validUntil);
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
var issuedAtTime = function (token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
        return claims['iat'];
    }
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
var isValidFormat = function (token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
var isAdmin = function (token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
    }
    else {
        return undefined;
    }
}
function isEmpty(obj) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return false;
        }
    }
    return true;
}
function map(obj, fn, contextObj) {
    var res = {};
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            res[key] = fn.call(contextObj, obj[key], key, obj);
        }
    }
    return res;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */
function querystring(querystringParams) {
    var params = [];
    var _loop_1 = function (key, value) {
        if (Array.isArray(value)) {
            value.forEach(function (arrayVal) {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
            });
        }
        else {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
        }
    };
    for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */
function querystringDecode(querystring) {
    var obj = {};
    var tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach(function (token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */
/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */
var Sha1 = /** @class */ (function () {
    function Sha1() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */
        this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */
        this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */
        this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */
        this.pad_ = [];
        /**
         * @private {number}
         */
        this.inbuf_ = 0;
        /**
         * @private {number}
         */
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (var i = 1; i < this.blockSize; ++i) {
            this.pad_[i] = 0;
        }
        this.reset();
    }
    Sha1.prototype.reset = function () {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */
    Sha1.prototype.compress_ = function (buf, offset) {
        if (!offset) {
            offset = 0;
        }
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') {
            for (var i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                    (buf.charCodeAt(offset) << 24) |
                        (buf.charCodeAt(offset + 1) << 16) |
                        (buf.charCodeAt(offset + 2) << 8) |
                        buf.charCodeAt(offset + 3);
                offset += 4;
            }
        }
        else {
            for (var i = 0; i < 16; i++) {
                W[i] =
                    (buf[offset] << 24) |
                        (buf[offset + 1] << 16) |
                        (buf[offset + 2] << 8) |
                        buf[offset + 3];
                offset += 4;
            }
        }
        // expand to 80 words
        for (var i = 16; i < 80; i++) {
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for (var i = 0; i < 80; i++) {
            if (i < 40) {
                if (i < 20) {
                    f = d ^ (b & (c ^ d));
                    k = 0x5a827999;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            }
            else {
                if (i < 60) {
                    f = (b & c) | (d & (b | c));
                    k = 0x8f1bbcdc;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0xca62c1d6;
                }
            }
            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
    };
    Sha1.prototype.update = function (bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) {
            return;
        }
        if (length === undefined) {
            length = bytes.length;
        }
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while (n < length) {
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) {
                while (n <= lengthMinusBlock) {
                    this.compress_(bytes, n);
                    n += this.blockSize;
                }
            }
            if (typeof bytes === 'string') {
                while (n < length) {
                    buf[inbuf] = bytes.charCodeAt(n);
                    ++inbuf;
                    ++n;
                    if (inbuf === this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
            else {
                while (n < length) {
                    buf[inbuf] = bytes[n];
                    ++inbuf;
                    ++n;
                    if (inbuf === this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    };
    /** @override */
    Sha1.prototype.digest = function () {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) {
            this.update(this.pad_, 56 - this.inbuf_);
        }
        else {
            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        // Add # bits.
        for (var i = this.blockSize - 1; i >= 56; i--) {
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
            for (var j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
            }
        }
        return digest;
    };
    return Sha1;
}());

/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
var ObserverProxy = /** @class */ (function () {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function ObserverProxy(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(function () {
            executor(_this);
        })
            .catch(function (e) {
            _this.error(e);
        });
    }
    ObserverProxy.prototype.next = function (value) {
        this.forEachObserver(function (observer) {
            observer.next(value);
        });
    };
    ObserverProxy.prototype.error = function (error) {
        this.forEachObserver(function (observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy.prototype.complete = function () {
        this.forEachObserver(function (observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error: error,
                complete: complete
            };
        }
        if (observer.next === undefined) {
            observer.next = noop;
        }
        if (observer.error === undefined) {
            observer.error = noop;
        }
        if (observer.complete === undefined) {
            observer.complete = noop;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                try {
                    if (_this.finalError) {
                        observer.error(_this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy.prototype.unsubscribeOne = function (i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    };
    ObserverProxy.prototype.forEachObserver = function (fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (var i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy.prototype.sendOne = function (i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function () {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                try {
                    fn(_this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    };
    ObserverProxy.prototype.close = function (err) {
        var _this = this;
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function () {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy;
}());
/** Turn synchronous function into one called asynchronously. */
function async(fn, onError) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        Promise.resolve(true)
            .then(function () {
            fn.apply(void 0, args);
        })
            .catch(function (error) {
            if (onError) {
                onError(error);
            }
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function noop() {
    // do nothing
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */
var validateArgCount = function (fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) {
        argError = 'at least ' + minCount;
    }
    else if (argCount > maxCount) {
        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    }
    if (argError) {
        var error = fnName +
            ' failed: Was called with ' +
            argCount +
            (argCount === 1 ? ' argument.' : ' arguments.') +
            ' Expects ' +
            argError +
            '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */
function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch (argumentNumber) {
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */
function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace) {
        return;
    }
    if (typeof namespace !== 'string') {
        //TODO: I should do more validation here. We only allow certain chars in namespaces.
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid firebase namespace.');
    }
}
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback) {
        return;
    }
    if (typeof callback !== 'function') {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid function.');
    }
}
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context) {
        return;
    }
    if (typeof context !== 'object' || context === null) {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid context object.');
    }
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */
var stringToByteArray$1 = function (str) {
    var out = [];
    var p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            var high = c - 0xd800; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if (c < 65536) {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */
var stringLength = function (str) {
    var p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            p++;
        }
        else if (c < 2048) {
            p += 2;
        }
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        }
        else {
            p += 3;
        }
    }
    return p;
};

exports.CONSTANTS = CONSTANTS;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError;
exports.Sha1 = Sha1;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.getUA = getUA;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isBrowserExtension = isBrowserExtension;
exports.isElectron = isElectron;
exports.isEmpty = isEmpty;
exports.isIE = isIE;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.isUWP = isUWP;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;
exports.stringify = stringify;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateNamespace = validateNamespace;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"tslib":13}],9:[function(require,module,exports){
(function (global){
(function() {/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
'use strict';var h,goog=goog||{},l=this||self;function aa(){}
function ba(b){var c=typeof b;if("object"==c)if(b){if(b instanceof Array)return"array";if(b instanceof Object)return c;var d=Object.prototype.toString.call(b);if("[object Window]"==d)return"object";if("[object Array]"==d||"number"==typeof b.length&&"undefined"!=typeof b.splice&&"undefined"!=typeof b.propertyIsEnumerable&&!b.propertyIsEnumerable("splice"))return"array";if("[object Function]"==d||"undefined"!=typeof b.call&&"undefined"!=typeof b.propertyIsEnumerable&&!b.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==c&&"undefined"==typeof b.call)return"object";return c}function ca(b){var c=ba(b);return"array"==c||"object"==c&&"number"==typeof b.length}function m(b){var c=typeof b;return"object"==c&&null!=b||"function"==c}function da(b){return Object.prototype.hasOwnProperty.call(b,ea)&&b[ea]||(b[ea]=++fa)}var ea="closure_uid_"+(1E9*Math.random()>>>0),fa=0;function ha(b,c,d){return b.call.apply(b.bind,arguments)}
function ia(b,c,d){if(!b)throw Error();if(2<arguments.length){var e=Array.prototype.slice.call(arguments,2);return function(){var f=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(f,e);return b.apply(c,f)}}return function(){return b.apply(c,arguments)}}function p(b,c,d){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?p=ha:p=ia;return p.apply(null,arguments)}
function ja(b,c){var d=Array.prototype.slice.call(arguments,1);return function(){var e=d.slice();e.push.apply(e,arguments);return b.apply(this,e)}}var q=Date.now||function(){return+new Date};function r(b,c){function d(){}d.prototype=c.prototype;b.N=c.prototype;b.prototype=new d;b.prototype.constructor=b;b.vb=function(e,f,g){for(var k=Array(arguments.length-2),n=2;n<arguments.length;n++)k[n-2]=arguments[n];return c.prototype[f].apply(e,k)}};function t(){0!=ka&&(la[da(this)]=this);this.j=this.j;this.i=this.i}var ka=0,la={};t.prototype.j=!1;t.prototype.ka=function(){if(!this.j&&(this.j=!0,this.F(),0!=ka)){var b=da(this);if(0!=ka&&this.i&&0<this.i.length)throw Error(this+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete la[b]}};t.prototype.F=function(){if(this.i)for(;this.i.length;)this.i.shift()()};var ma=Array.prototype.indexOf?function(b,c){return Array.prototype.indexOf.call(b,c,void 0)}:function(b,c){if("string"===typeof b)return"string"!==typeof c||1!=c.length?-1:b.indexOf(c,0);for(var d=0;d<b.length;d++)if(d in b&&b[d]===c)return d;return-1},na=Array.prototype.forEach?function(b,c,d){Array.prototype.forEach.call(b,c,d)}:function(b,c,d){for(var e=b.length,f="string"===typeof b?b.split(""):b,g=0;g<e;g++)g in f&&c.call(d,f[g],g,b)};
function oa(b){a:{var c=pa;for(var d=b.length,e="string"===typeof b?b.split(""):b,f=0;f<d;f++)if(f in e&&c.call(void 0,e[f],f,b)){c=f;break a}c=-1}return 0>c?null:"string"===typeof b?b.charAt(c):b[c]}function qa(b){return Array.prototype.concat.apply([],arguments)}function ra(b){var c=b.length;if(0<c){for(var d=Array(c),e=0;e<c;e++)d[e]=b[e];return d}return[]};function sa(b){return/^[\s\xa0]*$/.test(b)}var ta=String.prototype.trim?function(b){return b.trim()}:function(b){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(b)[1]};function u(b,c){return-1!=b.indexOf(c)}function ua(b,c){return b<c?-1:b>c?1:0};var v;a:{var va=l.navigator;if(va){var wa=va.userAgent;if(wa){v=wa;break a}}v=""};function xa(b,c,d){for(const e in b)c.call(d,b[e],e,b)}function ya(b){const c={};for(const d in b)c[d]=b[d];return c}var za="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Aa(b,c){let d,e;for(let f=1;f<arguments.length;f++){e=arguments[f];for(d in e)b[d]=e[d];for(let g=0;g<za.length;g++)d=za[g],Object.prototype.hasOwnProperty.call(e,d)&&(b[d]=e[d])}};function Ba(b){Ba[" "](b);return b}Ba[" "]=aa;function Ca(b,c){var d=Da;return Object.prototype.hasOwnProperty.call(d,b)?d[b]:d[b]=c(b)};var Ea=u(v,"Opera"),w=u(v,"Trident")||u(v,"MSIE"),Fa=u(v,"Edge"),Ga=Fa||w,Ha=u(v,"Gecko")&&!(u(v.toLowerCase(),"webkit")&&!u(v,"Edge"))&&!(u(v,"Trident")||u(v,"MSIE"))&&!u(v,"Edge"),Ia=u(v.toLowerCase(),"webkit")&&!u(v,"Edge");function Ja(){var b=l.document;return b?b.documentMode:void 0}var Ka;
a:{var La="",Ma=function(){var b=v;if(Ha)return/rv:([^\);]+)(\)|;)/.exec(b);if(Fa)return/Edge\/([\d\.]+)/.exec(b);if(w)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(b);if(Ia)return/WebKit\/(\S+)/.exec(b);if(Ea)return/(?:Version)[ \/]?(\S+)/.exec(b)}();Ma&&(La=Ma?Ma[1]:"");if(w){var Na=Ja();if(null!=Na&&Na>parseFloat(La)){Ka=String(Na);break a}}Ka=La}var Da={};
function Oa(b){return Ca(b,function(){{var c=0;const f=ta(String(Ka)).split("."),g=ta(String(b)).split("."),k=Math.max(f.length,g.length);for(let n=0;0==c&&n<k;n++){var d=f[n]||"",e=g[n]||"";do{d=/(\d*)(\D*)(.*)/.exec(d)||["","","",""];e=/(\d*)(\D*)(.*)/.exec(e)||["","","",""];if(0==d[0].length&&0==e[0].length)break;c=ua(0==d[1].length?0:parseInt(d[1],10),0==e[1].length?0:parseInt(e[1],10))||ua(0==d[2].length,0==e[2].length)||ua(d[2],e[2]);d=d[3];e=e[3]}while(0==c)}}return 0<=c})}var Pa;
Pa=l.document&&w?Ja():void 0;var Qa=!w||9<=Number(Pa),Ra=w&&!Oa("9"),Sa=function(){if(!l.addEventListener||!Object.defineProperty)return!1;var b=!1,c=Object.defineProperty({},"passive",{get:function(){b=!0}});try{l.addEventListener("test",aa,c),l.removeEventListener("test",aa,c)}catch(d){}return b}();function x(b,c){this.type=b;this.a=this.target=c;this.defaultPrevented=!1}x.prototype.b=function(){this.defaultPrevented=!0};function y(b,c){x.call(this,b?b.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.c=null;if(b){var d=this.type=b.type,e=b.changedTouches&&b.changedTouches.length?b.changedTouches[0]:null;this.target=b.target||b.srcElement;this.a=c;if(c=b.relatedTarget){if(Ha){a:{try{Ba(c.nodeName);var f=!0;break a}catch(g){}f=!1}f||(c=null)}}else"mouseover"==
d?c=b.fromElement:"mouseout"==d&&(c=b.toElement);this.relatedTarget=c;e?(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0):(this.clientX=void 0!==b.clientX?b.clientX:b.pageX,this.clientY=void 0!==b.clientY?b.clientY:b.pageY,this.screenX=b.screenX||0,this.screenY=b.screenY||0);this.button=b.button;this.key=b.key||"";this.ctrlKey=b.ctrlKey;this.altKey=b.altKey;this.shiftKey=b.shiftKey;this.metaKey=
b.metaKey;this.pointerId=b.pointerId||0;this.pointerType="string"===typeof b.pointerType?b.pointerType:Ta[b.pointerType]||"";this.c=b;b.defaultPrevented&&this.b()}}r(y,x);var Ta={2:"touch",3:"pen",4:"mouse"};y.prototype.b=function(){y.N.b.call(this);var b=this.c;if(b.preventDefault)b.preventDefault();else if(b.returnValue=!1,Ra)try{if(b.ctrlKey||112<=b.keyCode&&123>=b.keyCode)b.keyCode=-1}catch(c){}};var z="closure_listenable_"+(1E6*Math.random()|0),Ua=0;function Va(b,c,d,e,f){this.listener=b;this.proxy=null;this.src=c;this.type=d;this.capture=!!e;this.da=f;this.key=++Ua;this.X=this.Z=!1}function Wa(b){b.X=!0;b.listener=null;b.proxy=null;b.src=null;b.da=null};function Xa(b){this.src=b;this.a={};this.b=0}Xa.prototype.add=function(b,c,d,e,f){var g=b.toString();b=this.a[g];b||(b=this.a[g]=[],this.b++);var k=Ya(b,c,e,f);-1<k?(c=b[k],d||(c.Z=!1)):(c=new Va(c,this.src,g,!!e,f),c.Z=d,b.push(c));return c};function Za(b,c){var d=c.type;if(d in b.a){var e=b.a[d],f=ma(e,c),g;(g=0<=f)&&Array.prototype.splice.call(e,f,1);g&&(Wa(c),0==b.a[d].length&&(delete b.a[d],b.b--))}}
function Ya(b,c,d,e){for(var f=0;f<b.length;++f){var g=b[f];if(!g.X&&g.listener==c&&g.capture==!!d&&g.da==e)return f}return-1};var $a="closure_lm_"+(1E6*Math.random()|0),ab={},bb=0;function cb(b,c,d,e,f){if(e&&e.once)return db(b,c,d,e,f);if(Array.isArray(c)){for(var g=0;g<c.length;g++)cb(b,c[g],d,e,f);return null}d=eb(d);return b&&b[z]?b.ya(c,d,m(e)?!!e.capture:!!e,f):fb(b,c,d,!1,e,f)}
function fb(b,c,d,e,f,g){if(!c)throw Error("Invalid event type");var k=m(f)?!!f.capture:!!f;if(k&&!Qa)return null;var n=gb(b);n||(b[$a]=n=new Xa(b));d=n.add(c,d,e,k,g);if(d.proxy)return d;e=hb();d.proxy=e;e.src=b;e.listener=d;if(b.addEventListener)Sa||(f=k),void 0===f&&(f=!1),b.addEventListener(c.toString(),e,f);else if(b.attachEvent)b.attachEvent(ib(c.toString()),e);else if(b.addListener&&b.removeListener)b.addListener(e);else throw Error("addEventListener and attachEvent are unavailable.");bb++;
return d}function hb(){var b=jb,c=Qa?function(d){return b.call(c.src,c.listener,d)}:function(d){d=b.call(c.src,c.listener,d);if(!d)return d};return c}function db(b,c,d,e,f){if(Array.isArray(c)){for(var g=0;g<c.length;g++)db(b,c[g],d,e,f);return null}d=eb(d);return b&&b[z]?b.za(c,d,m(e)?!!e.capture:!!e,f):fb(b,c,d,!0,e,f)}
function kb(b,c,d,e,f){if(Array.isArray(c))for(var g=0;g<c.length;g++)kb(b,c[g],d,e,f);else(e=m(e)?!!e.capture:!!e,d=eb(d),b&&b[z])?(b=b.c,c=String(c).toString(),c in b.a&&(g=b.a[c],d=Ya(g,d,e,f),-1<d&&(Wa(g[d]),Array.prototype.splice.call(g,d,1),0==g.length&&(delete b.a[c],b.b--)))):b&&(b=gb(b))&&(c=b.a[c.toString()],b=-1,c&&(b=Ya(c,d,e,f)),(d=-1<b?c[b]:null)&&lb(d))}
function lb(b){if("number"!==typeof b&&b&&!b.X){var c=b.src;if(c&&c[z])Za(c.c,b);else{var d=b.type,e=b.proxy;c.removeEventListener?c.removeEventListener(d,e,b.capture):c.detachEvent?c.detachEvent(ib(d),e):c.addListener&&c.removeListener&&c.removeListener(e);bb--;(d=gb(c))?(Za(d,b),0==d.b&&(d.src=null,c[$a]=null)):Wa(b)}}}function ib(b){return b in ab?ab[b]:ab[b]="on"+b}function mb(b,c){var d=b.listener,e=b.da||b.src;b.Z&&lb(b);return d.call(e,c)}
function jb(b,c){if(b.X)return!0;if(!Qa){if(!c)a:{c=["window","event"];for(var d=l,e=0;e<c.length;e++)if(d=d[c[e]],null==d){c=null;break a}c=d}c=new y(c,this);return mb(b,c)}return mb(b,new y(c,this))}function gb(b){b=b[$a];return b instanceof Xa?b:null}var nb="__closure_events_fn_"+(1E9*Math.random()>>>0);function eb(b){if("function"==ba(b))return b;b[nb]||(b[nb]=function(c){return b.handleEvent(c)});return b[nb]};function A(){t.call(this);this.c=new Xa(this);this.I=this;this.B=null}r(A,t);A.prototype[z]=!0;h=A.prototype;h.addEventListener=function(b,c,d,e){cb(this,b,c,d,e)};h.removeEventListener=function(b,c,d,e){kb(this,b,c,d,e)};
h.dispatchEvent=function(b){var c,d=this.B;if(d)for(c=[];d;d=d.B)c.push(d);d=this.I;var e=b.type||b;if("string"===typeof b)b=new x(b,d);else if(b instanceof x)b.target=b.target||d;else{var f=b;b=new x(e,d);Aa(b,f)}f=!0;if(c)for(var g=c.length-1;0<=g;g--){var k=b.a=c[g];f=ob(k,e,!0,b)&&f}k=b.a=d;f=ob(k,e,!0,b)&&f;f=ob(k,e,!1,b)&&f;if(c)for(g=0;g<c.length;g++)k=b.a=c[g],f=ob(k,e,!1,b)&&f;return f};
h.F=function(){A.N.F.call(this);if(this.c){var b=this.c,c=0,d;for(d in b.a){for(var e=b.a[d],f=0;f<e.length;f++)++c,Wa(e[f]);delete b.a[d];b.b--}}this.B=null};h.ya=function(b,c,d,e){return this.c.add(String(b),c,!1,d,e)};h.za=function(b,c,d,e){return this.c.add(String(b),c,!0,d,e)};
function ob(b,c,d,e){c=b.c.a[String(c)];if(!c)return!0;c=c.concat();for(var f=!0,g=0;g<c.length;++g){var k=c[g];if(k&&!k.X&&k.capture==d){var n=k.listener,D=k.da||k.src;k.Z&&Za(b.c,k);f=!1!==n.call(D,e)&&f}}return f&&!e.defaultPrevented};var pb=l.JSON.stringify;function qb(){this.b=this.a=null}var tb=new class{constructor(b,c,d){this.f=d;this.c=b;this.g=c;this.b=0;this.a=null}get(){let b;0<this.b?(this.b--,b=this.a,this.a=b.next,b.next=null):b=this.c();return b}}(function(){return new sb},function(b){b.reset()},100);qb.prototype.add=function(b,c){var d=tb.get();d.set(b,c);this.b?this.b.next=d:this.a=d;this.b=d};function ub(){var b=vb,c=null;b.a&&(c=b.a,b.a=b.a.next,b.a||(b.b=null),c.next=null);return c}function sb(){this.next=this.b=this.a=null}
sb.prototype.set=function(b,c){this.a=b;this.b=c;this.next=null};sb.prototype.reset=function(){this.next=this.b=this.a=null};try{(new self.OffscreenCanvas(0,0)).getContext("2d")}catch(b){};function wb(b){l.setTimeout(function(){throw b;},0)};function xb(b,c){yb||zb();Ab||(yb(),Ab=!0);vb.add(b,c)}var yb;function zb(){var b=l.Promise.resolve(void 0);yb=function(){b.then(Bb)}}var Ab=!1,vb=new qb;function Bb(){for(var b;b=ub();){try{b.a.call(b.b)}catch(d){wb(d)}var c=tb;c.g(b);c.b<c.f&&(c.b++,b.next=c.a,c.a=b)}Ab=!1};function Cb(b,c){A.call(this);this.b=b||1;this.a=c||l;this.f=p(this.cb,this);this.g=q()}r(Cb,A);h=Cb.prototype;h.ba=!1;h.L=null;h.cb=function(){if(this.ba){var b=q()-this.g;0<b&&b<.8*this.b?this.L=this.a.setTimeout(this.f,this.b-b):(this.L&&(this.a.clearTimeout(this.L),this.L=null),this.dispatchEvent("tick"),this.ba&&(Db(this),this.start()))}};h.start=function(){this.ba=!0;this.L||(this.L=this.a.setTimeout(this.f,this.b),this.g=q())};function Db(b){b.ba=!1;b.L&&(b.a.clearTimeout(b.L),b.L=null)}
h.F=function(){Cb.N.F.call(this);Db(this);delete this.a};function Eb(b,c,d){if("function"==ba(b))d&&(b=p(b,d));else if(b&&"function"==typeof b.handleEvent)b=p(b.handleEvent,b);else throw Error("Invalid listener argument");return 2147483647<Number(c)?-1:l.setTimeout(b,c||0)};function Fb(b,c,d){t.call(this);this.f=null!=d?p(b,d):b;this.c=c;this.b=p(this.Ya,this);this.a=[]}r(Fb,t);h=Fb.prototype;h.ea=!1;h.U=null;h.Ra=function(b){this.a=arguments;this.U?this.ea=!0:Gb(this)};h.F=function(){Fb.N.F.call(this);this.U&&(l.clearTimeout(this.U),this.U=null,this.ea=!1,this.a=[])};h.Ya=function(){this.U=null;this.ea&&(this.ea=!1,Gb(this))};function Gb(b){b.U=Eb(b.b,b.c);b.f.apply(null,b.a)};function B(b){t.call(this);this.b=b;this.a={}}r(B,t);var Hb=[];function Ib(b,c,d,e){Array.isArray(d)||(d&&(Hb[0]=d.toString()),d=Hb);for(var f=0;f<d.length;f++){var g=cb(c,d[f],e||b.handleEvent,!1,b.b||b);if(!g)break;b.a[g.key]=g}}function Jb(b){xa(b.a,function(c,d){this.a.hasOwnProperty(d)&&lb(c)},b);b.a={}}B.prototype.F=function(){B.N.F.call(this);Jb(this)};B.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function Kb(){};var Lb=null;function Mb(){return Lb=Lb||new A}function Nb(b){x.call(this,"serverreachability",b)}r(Nb,x);function C(b){var c=Mb();c.dispatchEvent(new Nb(c,b))}function Ob(b){x.call(this,"statevent",b)}r(Ob,x);function E(b){var c=Mb();c.dispatchEvent(new Ob(c,b))}function Pb(b){x.call(this,"timingevent",b)}r(Pb,x);function Qb(b,c){if("function"!=ba(b))throw Error("Fn must not be null and must be a function");return l.setTimeout(function(){b()},c)};var Rb={NO_ERROR:0,eb:1,lb:2,kb:3,hb:4,jb:5,mb:6,Ja:7,TIMEOUT:8,pb:9};var Sb={gb:"complete",tb:"success",Ka:"error",Ja:"abort",rb:"ready",sb:"readystatechange",TIMEOUT:"timeout",nb:"incrementaldata",qb:"progress",ib:"downloadprogress",ub:"uploadprogress"};function Tb(){}Tb.prototype.a=null;function Ub(b){var c;(c=b.a)||(c=b.a={});return c};function Vb(){}var F={OPEN:"a",fb:"b",Ka:"c",ob:"d"};function Wb(){x.call(this,"d")}r(Wb,x);function Xb(){x.call(this,"c")}r(Xb,x);var Yb;function Zb(){}r(Zb,Tb);Yb=new Zb;function G(b,c,d){this.g=b;this.W=c;this.V=d||1;this.H=new B(this);this.O=$b;b=Ga?125:void 0;this.P=new Cb(b);this.h=null;this.b=!1;this.l=this.C=this.f=this.D=this.v=this.R=this.i=null;this.j=[];this.a=null;this.A=0;this.c=this.w=null;this.o=-1;this.m=!1;this.I=0;this.B=null;this.s=this.S=this.G=!1}var $b=45E3,ac={},bc={};h=G.prototype;h.setTimeout=function(b){this.O=b};function cc(b,c,d){b.D=1;b.f=dc(H(c));b.l=d;b.G=!0;ec(b,null)}function fc(b,c,d,e){b.D=1;b.f=dc(H(c));b.l=null;b.G=d;ec(b,e)}
function ec(b,c){b.v=q();I(b);b.C=H(b.f);gc(b.C,"t",b.V);b.A=0;b.a=b.g.$(b.g.Y()?c:null);0<b.I&&(b.B=new Fb(p(b.Ha,b,b.a),b.I));Ib(b.H,b.a,"readystatechange",b.ab);c=b.h?ya(b.h):{};b.l?(b.w||(b.w="POST"),c["Content-Type"]="application/x-www-form-urlencoded",b.a.ca(b.C,b.w,b.l,c)):(b.w="GET",b.a.ca(b.C,b.w,null,c));C(1)}h.ab=function(b){b=b.target;var c=this.B;c&&3==J(b)?c.Ra():this.Ha(b)};
h.Ha=function(b){try{if(b==this.a)a:{var c=J(this.a),d=this.a.xa(),e=this.a.T();if(!(3>c||3==c&&!Ga&&!this.a.aa())){this.m||4!=c||7==d||(8==d||0>=e?C(3):C(2));hc(this);var f=this.a.T();this.o=f;var g=this.a.aa();if(this.b=200==f){if(this.S&&!this.s){b:{if(this.a){var k=K(this.a,"X-HTTP-Initial-Response");if(k&&!sa(k)){var n=k;break b}}n=null}if(n)this.s=!0,ic(this,n);else{this.b=!1;this.c=3;E(12);L(this);jc(this);break a}}this.G?(kc(this,c,g),Ga&&this.b&&3==c&&(Ib(this.H,this.P,"tick",this.$a),this.P.start())):
ic(this,g);4==c&&L(this);this.b&&!this.m&&(4==c?this.g.ma(this):(this.b=!1,I(this)))}else 400==f&&0<g.indexOf("Unknown SID")?(this.c=3,E(12)):(this.c=0,E(13)),L(this),jc(this)}}}catch(D){}finally{}};function kc(b,c,d){for(var e=!0;!b.m&&b.A<d.length;){var f=lc(b,d);if(f==bc){4==c&&(b.c=4,E(14),e=!1);break}else if(f==ac){b.c=4;E(15);e=!1;break}else ic(b,f)}4==c&&0==d.length&&(b.c=1,E(16),e=!1);b.b=b.b&&e;e||(L(b),jc(b))}
h.$a=function(){if(this.a){var b=J(this.a),c=this.a.aa();this.A<c.length&&(hc(this),kc(this,b,c),this.b&&4!=b&&I(this))}};function lc(b,c){var d=b.A,e=c.indexOf("\n",d);if(-1==e)return bc;d=Number(c.substring(d,e));if(isNaN(d))return ac;e+=1;if(e+d>c.length)return bc;c=c.substr(e,d);b.A=e+d;return c}h.cancel=function(){this.m=!0;L(this)};function I(b){b.R=q()+b.O;mc(b,b.O)}function mc(b,c){if(null!=b.i)throw Error("WatchDog timer not null");b.i=Qb(p(b.Za,b),c)}
function hc(b){b.i&&(l.clearTimeout(b.i),b.i=null)}h.Za=function(){this.i=null;var b=q();0<=b-this.R?(2!=this.D&&(C(3),E(17)),L(this),this.c=2,jc(this)):mc(this,this.R-b)};function jc(b){b.g.Ba()||b.m||b.g.ma(b)}function L(b){hc(b);var c=b.B;c&&"function"==typeof c.ka&&c.ka();b.B=null;Db(b.P);Jb(b.H);b.a&&(c=b.a,b.a=null,c.abort(),c.ka())}function ic(b,c){try{b.g.Ea(b,c),C(4)}catch(d){}};function nc(b){if(b.J&&"function"==typeof b.J)return b.J();if("string"===typeof b)return b.split("");if(ca(b)){for(var c=[],d=b.length,e=0;e<d;e++)c.push(b[e]);return c}c=[];d=0;for(e in b)c[d++]=b[e];return b=c}
function oc(b,c){if(b.forEach&&"function"==typeof b.forEach)b.forEach(c,void 0);else if(ca(b)||"string"===typeof b)na(b,c,void 0);else{if(b.K&&"function"==typeof b.K)var d=b.K();else if(b.J&&"function"==typeof b.J)d=void 0;else if(ca(b)||"string"===typeof b){d=[];for(var e=b.length,f=0;f<e;f++)d.push(f)}else for(f in d=[],e=0,b)d[e++]=f;e=nc(b);f=e.length;for(var g=0;g<f;g++)c.call(void 0,e[g],d&&d[g],b)}};function M(b,c){this.b={};this.a=[];this.c=0;var d=arguments.length;if(1<d){if(d%2)throw Error("Uneven number of arguments");for(var e=0;e<d;e+=2)this.set(arguments[e],arguments[e+1])}else if(b)if(b instanceof M)for(d=b.K(),e=0;e<d.length;e++)this.set(d[e],b.get(d[e]));else for(e in b)this.set(e,b[e])}h=M.prototype;h.J=function(){pc(this);for(var b=[],c=0;c<this.a.length;c++)b.push(this.b[this.a[c]]);return b};h.K=function(){pc(this);return this.a.concat()};
function pc(b){if(b.c!=b.a.length){for(var c=0,d=0;c<b.a.length;){var e=b.a[c];N(b.b,e)&&(b.a[d++]=e);c++}b.a.length=d}if(b.c!=b.a.length){var f={};for(d=c=0;c<b.a.length;)e=b.a[c],N(f,e)||(b.a[d++]=e,f[e]=1),c++;b.a.length=d}}h.get=function(b,c){return N(this.b,b)?this.b[b]:c};h.set=function(b,c){N(this.b,b)||(this.c++,this.a.push(b));this.b[b]=c};h.forEach=function(b,c){for(var d=this.K(),e=0;e<d.length;e++){var f=d[e],g=this.get(f);b.call(c,g,f,this)}};
function N(b,c){return Object.prototype.hasOwnProperty.call(b,c)};var qc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/\\#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function rc(b,c){if(b){b=b.split("&");for(var d=0;d<b.length;d++){var e=b[d].indexOf("="),f=null;if(0<=e){var g=b[d].substring(0,e);f=b[d].substring(e+1)}else g=b[d];c(g,f?decodeURIComponent(f.replace(/\+/g," ")):"")}}};function O(b,c){this.c=this.j=this.f="";this.h=null;this.i=this.g="";this.a=!1;if(b instanceof O){this.a=void 0!==c?c:b.a;sc(this,b.f);this.j=b.j;tc(this,b.c);uc(this,b.h);this.g=b.g;c=b.b;var d=new P;d.c=c.c;c.a&&(d.a=new M(c.a),d.b=c.b);vc(this,d);this.i=b.i}else b&&(d=String(b).match(qc))?(this.a=!!c,sc(this,d[1]||"",!0),this.j=Q(d[2]||""),tc(this,d[3]||"",!0),uc(this,d[4]),this.g=Q(d[5]||"",!0),vc(this,d[6]||"",!0),this.i=Q(d[7]||"")):(this.a=!!c,this.b=new P(null,this.a))}
O.prototype.toString=function(){var b=[],c=this.f;c&&b.push(R(c,wc,!0),":");var d=this.c;if(d||"file"==c)b.push("//"),(c=this.j)&&b.push(R(c,wc,!0),"@"),b.push(encodeURIComponent(String(d)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),d=this.h,null!=d&&b.push(":",String(d));if(d=this.g)this.c&&"/"!=d.charAt(0)&&b.push("/"),b.push(R(d,"/"==d.charAt(0)?xc:yc,!0));(d=this.b.toString())&&b.push("?",d);(d=this.i)&&b.push("#",R(d,zc));return b.join("")};function H(b){return new O(b)}
function sc(b,c,d){b.f=d?Q(c,!0):c;b.f&&(b.f=b.f.replace(/:$/,""))}function tc(b,c,d){b.c=d?Q(c,!0):c}function uc(b,c){if(c){c=Number(c);if(isNaN(c)||0>c)throw Error("Bad port number "+c);b.h=c}else b.h=null}function vc(b,c,d){c instanceof P?(b.b=c,Ac(b.b,b.a)):(d||(c=R(c,Bc)),b.b=new P(c,b.a))}function S(b,c,d){b.b.set(c,d)}function gc(b,c,d){Array.isArray(d)||(d=[String(d)]);Cc(b.b,c,d)}
function dc(b){S(b,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^q()).toString(36));return b}function Dc(b){return b instanceof O?H(b):new O(b,void 0)}function Ec(b,c,d,e){var f=new O(null,void 0);b&&sc(f,b);c&&tc(f,c);d&&uc(f,d);e&&(f.g=e);return f}function Q(b,c){return b?c?decodeURI(b.replace(/%25/g,"%2525")):decodeURIComponent(b):""}
function R(b,c,d){return"string"===typeof b?(b=encodeURI(b).replace(c,Fc),d&&(b=b.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),b):null}function Fc(b){b=b.charCodeAt(0);return"%"+(b>>4&15).toString(16)+(b&15).toString(16)}var wc=/[#\/\?@]/g,yc=/[#\?:]/g,xc=/[#\?]/g,Bc=/[#\?@]/g,zc=/#/g;function P(b,c){this.b=this.a=null;this.c=b||null;this.f=!!c}function T(b){b.a||(b.a=new M,b.b=0,b.c&&rc(b.c,function(c,d){b.add(decodeURIComponent(c.replace(/\+/g," ")),d)}))}h=P.prototype;
h.add=function(b,c){T(this);this.c=null;b=U(this,b);var d=this.a.get(b);d||this.a.set(b,d=[]);d.push(c);this.b+=1;return this};function Gc(b,c){T(b);c=U(b,c);N(b.a.b,c)&&(b.c=null,b.b-=b.a.get(c).length,b=b.a,N(b.b,c)&&(delete b.b[c],b.c--,b.a.length>2*b.c&&pc(b)))}function Hc(b,c){T(b);c=U(b,c);return N(b.a.b,c)}h.forEach=function(b,c){T(this);this.a.forEach(function(d,e){na(d,function(f){b.call(c,f,e,this)},this)},this)};
h.K=function(){T(this);for(var b=this.a.J(),c=this.a.K(),d=[],e=0;e<c.length;e++)for(var f=b[e],g=0;g<f.length;g++)d.push(c[e]);return d};h.J=function(b){T(this);var c=[];if("string"===typeof b)Hc(this,b)&&(c=qa(c,this.a.get(U(this,b))));else{b=this.a.J();for(var d=0;d<b.length;d++)c=qa(c,b[d])}return c};h.set=function(b,c){T(this);this.c=null;b=U(this,b);Hc(this,b)&&(this.b-=this.a.get(b).length);this.a.set(b,[c]);this.b+=1;return this};
h.get=function(b,c){if(!b)return c;b=this.J(b);return 0<b.length?String(b[0]):c};function Cc(b,c,d){Gc(b,c);0<d.length&&(b.c=null,b.a.set(U(b,c),ra(d)),b.b+=d.length)}h.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var b=[],c=this.a.K(),d=0;d<c.length;d++){var e=c[d],f=encodeURIComponent(String(e));e=this.J(e);for(var g=0;g<e.length;g++){var k=f;""!==e[g]&&(k+="="+encodeURIComponent(String(e[g])));b.push(k)}}return this.c=b.join("&")};
function U(b,c){c=String(c);b.f&&(c=c.toLowerCase());return c}function Ac(b,c){c&&!b.f&&(T(b),b.c=null,b.a.forEach(function(d,e){var f=e.toLowerCase();e!=f&&(Gc(this,e),Cc(this,f,d))},b));b.f=c};function Jc(b){this.a=b;this.b=this.h=null;this.g=!1;this.i=null;this.c=-1;this.l=this.f=null}h=Jc.prototype;h.M=null;function Kc(b){var c=b.a.D.a;if(null!=c)E(4),c?(E(10),V(b.a,b,!1)):(E(11),V(b.a,b,!0));else{b.b=new G(b,void 0,void 0);b.b.h=b.h;c=b.a;c=Lc(c,c.Y()?b.f:null,b.i);E(4);gc(c,"TYPE","xmlhttp");var d=b.a.j,e=b.a.H;d&&e&&S(c,d,e);fc(b.b,c,!1,b.f)}}h.$=function(b){return this.a.$(b)};h.abort=function(){this.b&&(this.b.cancel(),this.b=null);this.c=-1};h.Ba=function(){return!1};
h.Ea=function(b,c){this.c=b.o;if(0==this.M){if(!this.a.o&&(b=b.a)){var d=K(b,"X-Client-Wire-Protocol");this.l=d?d:null;this.a.j&&(b=K(b,"X-HTTP-Session-Id"))&&(this.a.H=b)}if(c){try{var e=this.a.ja.a.parse(c)}catch(f){c=this.a;c.m=this.c;W(c,2);return}this.f=e[0]}else c=this.a,c.m=this.c,W(c,2)}else if(1==this.M)if(this.g)E(6);else if("11111"==c){if(E(5),this.g=!0,!w||10<=Number(Pa))this.c=200,this.b.cancel(),E(11),V(this.a,this,!0)}else E(7),this.g=!1};
h.ma=function(){this.c=this.b.o;if(this.b.b)0==this.M?(this.M=1,Kc(this)):1==this.M&&(this.g?(E(11),V(this.a,this,!0)):(E(10),V(this.a,this,!1)));else{0==this.M?E(8):1==this.M&&E(9);var b=this.a;b.m=this.c;W(b,2)}};h.Y=function(){return this.a.Y()};h.la=function(){return this.a.la()};function Mc(){this.a=this.b=null};function Nc(b,c){this.b=b;this.a=c};function Oc(b){this.g=b||Pc;l.PerformanceNavigationTiming?(b=l.performance.getEntriesByType("navigation"),b=0<b.length&&("hq"==b[0].nextHopProtocol||"h2"==b[0].nextHopProtocol)):b=!!(l.a&&l.a.Ca&&l.a.Ca()&&l.a.Ca().wb);this.f=b?this.g:1;this.a=null;1<this.f&&(this.a=new Set);this.b=null;this.c=[]}var Pc=10;function Qc(b,c){!b.a&&(u(c,"spdy")||u(c,"quic")||u(c,"h2"))&&(b.f=b.g,b.a=new Set,b.b&&(Rc(b,b.b),b.b=null))}function Sc(b){return b.b?!0:b.a?b.a.size>=b.f:!1}
function Tc(b){return b.b?1:b.a?b.a.size:0}function Uc(b,c){return b.b?b.b==c:b.a?b.a.has(c):!1}function Rc(b,c){b.a?b.a.add(c):b.b=c}function Vc(b,c){b.b&&b.b==c?b.b=null:b.a&&b.a.has(c)&&b.a.delete(c)}Oc.prototype.cancel=function(){this.c=Wc(this);if(this.b)this.b.cancel(),this.b=null;else if(this.a&&0!==this.a.size){for(const b of this.a.values())b.cancel();this.a.clear()}};
function Wc(b){if(null!=b.b)return b.c.concat(b.b.j);if(null!=b.a&&0!==b.a.size){let c=b.c;for(const d of b.a.values())c=c.concat(d.j);return c}return ra(b.c)};function Xc(){}Xc.prototype.stringify=function(b){return l.JSON.stringify(b,void 0)};Xc.prototype.parse=function(b){return l.JSON.parse(b,void 0)};function Yc(){this.a=new Xc}function Zc(b,c,d){var e=d||"";try{oc(b,function(f,g){var k=f;m(f)&&(k=pb(f));c.push(e+g+"="+encodeURIComponent(k))})}catch(f){throw c.push(e+"type="+encodeURIComponent("_badmap")),f;}};function $c(b,c){var d=new Kb;if(l.Image){var e=new Image;e.onload=ja(ad,d,e,"TestLoadImage: loaded",!0,c);e.onerror=ja(ad,d,e,"TestLoadImage: error",!1,c);e.onabort=ja(ad,d,e,"TestLoadImage: abort",!1,c);e.ontimeout=ja(ad,d,e,"TestLoadImage: timeout",!1,c);l.setTimeout(function(){if(e.ontimeout)e.ontimeout()},1E4);e.src=b}else c(!1)}function ad(b,c,d,e,f){try{c.onload=null,c.onerror=null,c.onabort=null,c.ontimeout=null,f(e)}catch(g){}};var bd=l.JSON.parse;function X(b){A.call(this);this.headers=new M;this.G=b||null;this.b=!1;this.s=this.a=null;this.A="";this.h=0;this.f="";this.g=this.w=this.l=this.v=!1;this.o=0;this.m=null;this.H=cd;this.C=this.D=!1}r(X,A);var cd="",dd=/^https?$/i,ed=["POST","PUT"];h=X.prototype;
h.ca=function(b,c,d,e){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.A+"; newUri="+b);c=c?c.toUpperCase():"GET";this.A=b;this.f="";this.h=0;this.v=!1;this.b=!0;this.a=new XMLHttpRequest;this.s=this.G?Ub(this.G):Ub(Yb);this.a.onreadystatechange=p(this.Da,this);try{this.w=!0,this.a.open(c,String(b),!0),this.w=!1}catch(g){fd(this,g);return}b=d||"";var f=new M(this.headers);e&&oc(e,function(g,k){f.set(k,g)});e=oa(f.K());d=l.FormData&&b instanceof l.FormData;!(0<=
ma(ed,c))||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,k){this.a.setRequestHeader(k,g)},this);this.H&&(this.a.responseType=this.H);"withCredentials"in this.a&&this.a.withCredentials!==this.D&&(this.a.withCredentials=this.D);try{gd(this),0<this.o&&((this.C=hd(this.a))?(this.a.timeout=this.o,this.a.ontimeout=p(this.Aa,this)):this.m=Eb(this.Aa,this.o,this)),this.l=!0,this.a.send(b),this.l=!1}catch(g){fd(this,g)}};
function hd(b){return w&&Oa(9)&&"number"===typeof b.timeout&&void 0!==b.ontimeout}function pa(b){return"content-type"==b.toLowerCase()}h.Aa=function(){"undefined"!=typeof goog&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8))};function fd(b,c){b.b=!1;b.a&&(b.g=!0,b.a.abort(),b.g=!1);b.f=c;b.h=5;id(b);jd(b)}function id(b){b.v||(b.v=!0,b.dispatchEvent("complete"),b.dispatchEvent("error"))}
h.abort=function(b){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=b||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),jd(this))};h.F=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),jd(this,!0));X.N.F.call(this)};h.Da=function(){this.j||(this.w||this.l||this.g?kd(this):this.Xa())};h.Xa=function(){kd(this)};
function kd(b){if(b.b&&"undefined"!=typeof goog&&(!b.s[1]||4!=J(b)||2!=b.T()))if(b.l&&4==J(b))Eb(b.Da,0,b);else if(b.dispatchEvent("readystatechange"),4==J(b)){b.b=!1;try{var c=b.T();a:switch(c){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var d=!0;break a;default:d=!1}var e;if(!(e=d)){var f;if(f=0===c){var g=String(b.A).match(qc)[1]||null;if(!g&&l.self&&l.self.location){var k=l.self.location.protocol;g=k.substr(0,k.length-1)}f=!dd.test(g?g.toLowerCase():"")}e=f}if(e)b.dispatchEvent("complete"),
b.dispatchEvent("success");else{b.h=6;try{var n=2<J(b)?b.a.statusText:""}catch(D){n=""}b.f=n+" ["+b.T()+"]";id(b)}}finally{jd(b)}}}function jd(b,c){if(b.a){gd(b);var d=b.a,e=b.s[0]?aa:null;b.a=null;b.s=null;c||b.dispatchEvent("ready");try{d.onreadystatechange=e}catch(f){}}}function gd(b){b.a&&b.C&&(b.a.ontimeout=null);b.m&&(l.clearTimeout(b.m),b.m=null)}function J(b){return b.a?b.a.readyState:0}h.T=function(){try{return 2<J(this)?this.a.status:-1}catch(b){return-1}};
h.aa=function(){try{return this.a?this.a.responseText:""}catch(b){return""}};h.Sa=function(b){if(this.a){var c=this.a.responseText;b&&0==c.indexOf(b)&&(c=c.substring(b.length));return bd(c)}};function K(b,c){return b.a?b.a.getResponseHeader(c):null}h.xa=function(){return this.h};h.Va=function(){return"string"===typeof this.f?this.f:String(this.f)};function ld(b){var c="";xa(b,function(d,e){c+=e;c+=":";c+=d;c+="\r\n"});return c}function md(b,c,d){a:{for(e in d){var e=!1;break a}e=!0}if(e)return b;d=ld(d);if("string"===typeof b){c=encodeURIComponent(String(c));d=null!=d?"="+encodeURIComponent(String(d)):"";if(c+=d){d=b.indexOf("#");0>d&&(d=b.length);e=b.indexOf("?");if(0>e||e>d){e=d;var f=""}else f=b.substring(e+1,d);b=[b.substr(0,e),f,b.substr(d)];d=b[1];b[1]=c?d?d+"&"+c:c:d;b=b[0]+(b[1]?"?"+b[1]:"")+b[2]}return b}S(b,c,d);return b};function nd(b,c,d){return d&&d.internalChannelParams?d.internalChannelParams[b]||c:c}
function od(b){this.f=[];this.D=new Mc;this.ga=this.oa=this.B=this.ha=this.a=this.H=this.j=this.V=this.g=this.I=this.i=null;this.Oa=this.P=0;this.Ma=nd("failFast",!1,b);this.ia=this.w=this.s=this.l=this.h=this.c=null;this.na=!0;this.m=this.qa=this.O=-1;this.S=this.v=this.A=0;this.La=nd("baseRetryDelayMs",5E3,b);this.Pa=nd("retryDelaySeedMs",1E4,b);this.Na=nd("forwardChannelMaxRetries",2,b);this.pa=nd("forwardChannelRequestTimeoutMs",2E4,b);this.Ia=b&&b.xb||void 0;this.C=void 0;this.R=b&&b.supportsCrossDomainXhr||
!1;this.G="";this.b=new Oc(b&&b.concurrentRequestLimit);this.ja=new Yc;this.o=!0;(this.W=b&&b.fastHandshake||!1)&&!this.o&&(this.o=!0);b&&b.forceLongPolling&&(this.na=!1);this.fa=void 0}h=od.prototype;h.va=8;h.u=1;
function pd(b){qd(b);if(3==b.u){var c=b.P++,d=H(b.B);S(d,"SID",b.G);S(d,"RID",c);S(d,"TYPE","terminate");rd(b,d);c=new G(b,c,void 0);c.D=2;c.f=dc(H(d));d=!1;l.navigator&&l.navigator.sendBeacon&&(d=l.navigator.sendBeacon(c.f.toString(),""));!d&&l.Image&&((new Image).src=c.f,d=!0);d||(c.a=c.g.$(null),c.a.ca(c.f));c.v=q();I(c)}sd(b)}
function qd(b){b.w&&(b.w.abort(),b.w=null);b.a&&(b.a.cancel(),b.a=null);b.l&&(l.clearTimeout(b.l),b.l=null);td(b);b.b.cancel();b.h&&("number"===typeof b.h&&l.clearTimeout(b.h),b.h=null)}function ud(b,c){b.f.push(new Nc(b.Oa++,c));3==b.u&&vd(b)}h.Ba=function(){return 0==this.u};function vd(b){Sc(b.b)||b.h||(b.h=!0,xb(b.Ga,b),b.A=0)}
function wd(b,c){if(Tc(b.b)>=b.b.f-(b.h?1:0))return!1;if(b.h)return b.f=c.j.concat(b.f),!0;if(1==b.u||2==b.u||b.A>=(b.Ma?0:b.Na))return!1;b.h=Qb(p(b.Ga,b,c),xd(b,b.A));b.A++;return!0}
h.Ga=function(b){if(this.h)if(this.h=null,1==this.u){if(!b){this.P=Math.floor(1E5*Math.random());b=this.P++;var c=new G(this,b,void 0),d=this.i;this.I&&(d?(d=ya(d),Aa(d,this.I)):d=this.I);null===this.g&&(c.h=d);var e;if(this.W)a:{for(var f=e=0;f<this.f.length;f++){b:{var g=this.f[f];if("__data__"in g.a&&(g=g.a.__data__,"string"===typeof g)){g=g.length;break b}g=void 0}if(void 0===g)break;e+=g;if(4096<e){e=f;break a}if(4096===e||f===this.f.length-1){e=f+1;break a}}e=1E3}else e=1E3;e=yd(this,c,e);f=
H(this.B);S(f,"RID",b);S(f,"CVER",22);this.o&&this.j&&S(f,"X-HTTP-Session-Id",this.j);rd(this,f);this.g&&d&&md(f,this.g,d);Rc(this.b,c);this.W?(S(f,"$req",e),S(f,"SID","null"),c.S=!0,cc(c,f,null)):cc(c,f,e);this.u=2}}else 3==this.u&&(b?zd(this,b):0==this.f.length||Sc(this.b)||zd(this))};
function zd(b,c){var d;c?d=c.W:d=b.P++;var e=H(b.B);S(e,"SID",b.G);S(e,"RID",d);S(e,"AID",b.O);rd(b,e);b.g&&b.i&&md(e,b.g,b.i);d=new G(b,d,b.A+1);null===b.g&&(d.h=b.i);c&&(b.f=c.j.concat(b.f));c=yd(b,d,1E3);d.setTimeout(Math.round(.5*b.pa)+Math.round(.5*b.pa*Math.random()));Rc(b.b,d);cc(d,e,c)}function rd(b,c){b.c&&oc({},function(d,e){S(c,e,d)})}
function yd(b,c,d){d=Math.min(b.f.length,d);var e=b.c?p(b.c.Qa,b.c,b):null;a:for(var f=b.f,g=-1;;){var k=["count="+d];-1==g?0<d?(g=f[0].b,k.push("ofs="+g)):g=0:k.push("ofs="+g);for(var n=!0,D=0;D<d;D++){var rb=f[D].b,Ic=f[D].a;rb-=g;if(0>rb)g=Math.max(0,f[D].b-100),n=!1;else try{Zc(Ic,k,"req"+rb+"_")}catch(Hd){e&&e(Ic)}}if(n){e=k.join("&");break a}}b=b.f.splice(0,d);c.j=b;return e}function Ad(b){b.a||b.l||(b.S=1,xb(b.Fa,b),b.v=0)}
function Bd(b){if(b.a||b.l||3<=b.v)return!1;b.S++;b.l=Qb(p(b.Fa,b),xd(b,b.v));b.v++;return!0}h.Fa=function(){this.l=null;this.a=new G(this,"rpc",this.S);null===this.g&&(this.a.h=this.i);this.a.I=0;var b=H(this.oa);S(b,"RID","rpc");S(b,"SID",this.G);S(b,"CI",this.ia?"0":"1");S(b,"AID",this.O);rd(this,b);S(b,"TYPE","xmlhttp");this.g&&this.i&&md(b,this.g,this.i);this.C&&this.a.setTimeout(this.C);fc(this.a,b,!0,this.ga)};
function V(b,c,d){var e=c.l;e&&Qc(b.b,e);b.ia=b.na&&d;b.m=c.c;b.B=Lc(b,null,b.ha);vd(b)}
h.Ea=function(b,c){if(0!=this.u&&(this.a==b||Uc(this.b,b)))if(this.m=b.o,!b.s&&Uc(this.b,b)&&3==this.u){try{var d=this.ja.a.parse(c)}catch(g){d=null}if(Array.isArray(d)&&3==d.length){c=d;if(0==c[0])a:{if(!this.l){if(this.a)if(this.a.v+3E3<b.v)td(this),this.a.cancel(),this.a=null;else break a;Bd(this);E(18)}}else this.qa=c[1],0<this.qa-this.O&&37500>c[2]&&this.ia&&0==this.v&&!this.s&&(this.s=Qb(p(this.Wa,this),6E3));if(1>=Tc(this.b)&&this.fa){try{this.fa()}catch(g){}this.fa=void 0}}else W(this,11)}else if((b.s||
this.a==b)&&td(this),!sa(c))for(c=d=this.ja.a.parse(c),d=0;d<c.length;d++){var e=c[d];this.O=e[0];e=e[1];if(2==this.u)if("c"==e[0]){this.G=e[1];this.ga=e[2];var f=e[3];null!=f&&(this.va=f);e=e[5];null!=e&&"number"===typeof e&&0<e&&(this.C=1.5*e);this.o&&(e=b.a)&&((f=K(e,"X-Client-Wire-Protocol"))&&Qc(this.b,f),this.j&&(e=K(e,"X-HTTP-Session-Id")))&&(this.H=e,S(this.B,this.j,e));this.u=3;this.c&&this.c.ua();e=b;this.oa=Lc(this,this.Y()?this.ga:null,this.ha);e.s?(Vc(this.b,e),(f=this.C)&&e.setTimeout(f),
e.i&&(hc(e),I(e)),this.a=e):Ad(this);0<this.f.length&&vd(this)}else"stop"!=e[0]&&"close"!=e[0]||W(this,7);else 3==this.u&&("stop"==e[0]||"close"==e[0]?"stop"==e[0]?W(this,7):pd(this):"noop"!=e[0]&&this.c&&this.c.ta(e),this.v=0)}};h.Wa=function(){null!=this.s&&(this.s=null,this.a.cancel(),this.a=null,Bd(this),E(19))};function td(b){null!=b.s&&(l.clearTimeout(b.s),b.s=null)}
h.ma=function(b){var c=null;if(this.a==b){td(this);this.a=null;var d=2}else if(Uc(this.b,b))c=b.j,Vc(this.b,b),d=1;else return;this.m=b.o;if(0!=this.u)if(b.b)if(1==d){c=b.l?b.l.length:0;b=q()-b.v;var e=this.A;d=Mb();d.dispatchEvent(new Pb(d,c,b,e));vd(this)}else Ad(this);else if(e=b.c,3==e||0==e&&0<this.m||!(1==d&&wd(this,b)||2==d&&Bd(this)))switch(c&&0<c.length&&(b=this.b,b.c=b.c.concat(c)),e){case 1:W(this,5);break;case 4:W(this,10);break;case 3:W(this,6);break;default:W(this,2)}};
function xd(b,c){var d=b.La+Math.floor(Math.random()*b.Pa);b.la()||(d*=2);return d*c}function W(b,c){if(2==c){var d=null;b.c&&(d=null);var e=p(b.bb,b);d||(d=new O("//www.google.com/images/cleardot.gif"),l.location&&"http"==l.location.protocol||sc(d,"https"),dc(d));$c(d.toString(),e)}else E(2);b.u=0;b.c&&b.c.sa(c);sd(b);qd(b)}h.bb=function(b){b?E(2):E(1)};function sd(b){b.u=0;b.m=-1;if(b.c){if(0!=Wc(b.b).length||0!=b.f.length)b.b.c.length=0,ra(b.f),b.f.length=0;b.c.ra()}}
function Lc(b,c,d){var e=Dc(d);if(""!=e.c)c&&tc(e,c+"."+e.c),uc(e,e.h);else{var f=l.location;e=Ec(f.protocol,c?c+"."+f.hostname:f.hostname,+f.port,d)}b.V&&xa(b.V,function(g,k){S(e,k,g)});c=b.j;d=b.H;c&&d&&S(e,c,d);S(e,"VER",b.va);rd(b,e);return e}h.$=function(b){if(b&&!this.R)throw Error("Can't create secondary domain capable XhrIo object.");b=new X(this.Ia);b.D=this.R;return b};h.la=function(){return!!this.c&&!0};h.Y=function(){return this.R};function Cd(){}h=Cd.prototype;h.ua=function(){};
h.ta=function(){};h.sa=function(){};h.ra=function(){};h.Qa=function(){};function Dd(b){for(var c=arguments[0],d=1;d<arguments.length;d++){var e=arguments[d];if(0==e.lastIndexOf("/",0))c=e;else{var f;(f=""==c)||(f=c.length-1,f=0<=f&&c.indexOf("/",f)==f);f?c+=e:c+="/"+e}}return c};function Ed(){if(w&&!(10<=Number(Pa)))throw Error("Environmental error: no available transport.");}Ed.prototype.a=function(b,c){return new Y(b,c)};
function Y(b,c){A.call(this);this.a=new od(c);this.g=b;this.m=Dd(this.g,"test");this.b=c&&c.messageUrlParams||null;b=c&&c.messageHeaders||null;c&&c.clientProtocolHeaderRequired&&(b?b["X-Client-Protocol"]="webchannel":b={"X-Client-Protocol":"webchannel"});this.a.i=b;b=c&&c.initMessageHeaders||null;c&&c.messageContentType&&(b?b["X-WebChannel-Content-Type"]=c.messageContentType:b={"X-WebChannel-Content-Type":c.messageContentType});c&&c.wa&&(b?b["X-WebChannel-Client-Profile"]=c.wa:b={"X-WebChannel-Client-Profile":c.wa});
this.a.I=b;(b=c&&c.httpHeadersOverwriteParam)&&!sa(b)&&(this.a.g=b);this.l=c&&c.supportsCrossDomainXhr||!1;this.h=c&&c.sendRawJson||!1;(c=c&&c.httpSessionIdParam)&&!sa(c)&&(this.a.j=c,b=this.b,null!==b&&c in b&&(b=this.b,c in b&&delete b[c]));this.f=new Z(this)}r(Y,A);h=Y.prototype;h.addEventListener=function(b,c,d,e){Y.N.addEventListener.call(this,b,c,d,e)};h.removeEventListener=function(b,c,d,e){Y.N.removeEventListener.call(this,b,c,d,e)};
h.Ta=function(){this.a.c=this.f;this.l&&(this.a.R=!0);var b=this.a,c=this.m,d=this.g,e=this.b||void 0;E(0);b.ha=d;b.V=e||{};b.o&&(b.D.b=[],b.D.a=!1);b.w=new Jc(b);null===b.g&&(b.w.h=b.i);d=c;b.g&&b.i&&(d=md(c,b.g,b.i));b=b.w;b.i=d;c=Lc(b.a,null,b.i);E(3);d=b.a.D.b;null!=d?(b.f=d[0],b.M=1,Kc(b)):(gc(c,"MODE","init"),!b.a.o&&b.a.j&&gc(c,"X-HTTP-Session-Id",b.a.j),b.b=new G(b,void 0,void 0),b.b.h=b.h,fc(b.b,c,!1,null),b.M=0)};h.close=function(){pd(this.a)};
h.Ua=function(b){if("string"===typeof b){var c={};c.__data__=b;ud(this.a,c)}else this.h?(c={},c.__data__=pb(b),ud(this.a,c)):ud(this.a,b)};h.F=function(){this.a.c=null;delete this.f;pd(this.a);delete this.a;Y.N.F.call(this)};function Fd(b){Wb.call(this);var c=b.__sm__;if(c){a:{for(const d in c){b=d;break a}b=void 0}(this.c=b)?(b=this.c,this.data=null!==c&&b in c?c[b]:void 0):this.data=c}else this.data=b}r(Fd,Wb);function Gd(){Xb.call(this);this.status=1}r(Gd,Xb);function Z(b){this.a=b}r(Z,Cd);
Z.prototype.ua=function(){this.a.dispatchEvent("a")};Z.prototype.ta=function(b){this.a.dispatchEvent(new Fd(b))};Z.prototype.sa=function(b){this.a.dispatchEvent(new Gd(b))};Z.prototype.ra=function(){this.a.dispatchEvent("b")};/*

 Copyright 2017 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
Ed.prototype.createWebChannel=Ed.prototype.a;Y.prototype.send=Y.prototype.Ua;Y.prototype.open=Y.prototype.Ta;Y.prototype.close=Y.prototype.close;Rb.NO_ERROR=0;Rb.TIMEOUT=8;Rb.HTTP_ERROR=6;Sb.COMPLETE="complete";Vb.EventType=F;F.OPEN="a";F.CLOSE="b";F.ERROR="c";F.MESSAGE="d";A.prototype.listen=A.prototype.ya;X.prototype.listenOnce=X.prototype.za;X.prototype.getLastError=X.prototype.Va;X.prototype.getLastErrorCode=X.prototype.xa;X.prototype.getStatus=X.prototype.T;X.prototype.getResponseJson=X.prototype.Sa;
X.prototype.getResponseText=X.prototype.aa;X.prototype.send=X.prototype.ca;module.exports={createWebChannelTransport:function(){return new Ed},ErrorCode:Rb,EventType:Sb,WebChannel:Vb,XhrIo:X};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],10:[function(require,module,exports){
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var firebase = _interopDefault(require('@firebase/app'));

var name = "firebase";
var version = "7.13.2";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
firebase.registerVersion(name, version, 'app');

module.exports = firebase;


},{"@firebase/app":4}],11:[function(require,module,exports){
'use strict';

require('@firebase/firestore');



},{"@firebase/firestore":6}],12:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],13:[function(require,module,exports){
(function (global){
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    __extends = function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function (m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    };

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],14:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[3]);
